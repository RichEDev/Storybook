@using System.Web.Http.Controllers
@using System.Web.Http.Description
@using SpendManagementApi.Areas.HelpPage
@using SpendManagementApi.Utilities
@model IGrouping<HttpControllerDescriptor, ApiDescription>

@{
    var controllerDocumentation = ViewBag.DocumentationProvider != null ? 
        XmlDocumentationProvider.RemoveNamespaces(ViewBag.DocumentationProvider.GetDocumentation(Model.Key), false) : 
        null;


    var orderedModel = Model.OrderBy(m => ViewBag.HttpMethodOrder[m.HttpMethod.ToString()]).ToList();

}
<hr />
<header class="api-list-header" id="@Model.Key.ControllerName">
    <a href="#@Model.Key.ControllerName">
        <h2>
            @Model.Key.ControllerName.RemoveApiVersionNumber() <small>(@(orderedModel.Count) actions)</small>
        </h2>
    </a>

</header>
<section class="api-list-collapsible">
@if (!String.IsNullOrEmpty(controllerDocumentation))
{
        <p>@Html.Raw(controllerDocumentation)</p>
}
<table class="help-page-table">
    <thead>
            <tr><th>Verb</th><th>API element</th><th>Parameters</th><th>Description</th></tr>
    </thead>
    <tbody>
    @foreach (var api in orderedModel)
    {
        <tr>
                    <td>
                        <a href="@Url.Action("Api", "Help", new { apiId = api.GetFriendlyId(), versionId = api.GetVersionNumber() })">@api.HttpMethod.Method</a>
                    </td>
            <td class="api-name">

                <a href="@Url.Action("Api", "Help", new { apiId = api.GetFriendlyId(), versionId = api.GetVersionNumber() })">@api.RelativePath</a>
            </td>
            <td class="api-name">

                <a href="@Url.Action("Api", "Help", new { apiId = api.GetFriendlyId(), versionId = api.GetVersionNumber() })">
                    @if (api.ActionDescriptor.GetParameters().Count > 0)
                    {
                        <table class="help-page-table">
                            <thead>
                                <tr><th>Name</th>
                                <th>Type</th></tr>
                            </thead>
                            <tbody>

                                @foreach (var param in api.ActionDescriptor.GetParameters())
                                {
                                    @Html.DisplayFor(p => param, "ComplexTypeParameter");
                                }
                                </tbody>
                        </table>
                        
                    }
                </a>
            </td>
            <td class="api-documentation">
            @if (api.Documentation != null)
            {
                    <p>@Html.Raw(XmlDocumentationProvider.RemoveNamespaces(api.Documentation, false))</p>
            }
            else
            {
                <p>No documentation available.</p>
            }
            </td>
        </tr>
    }
    </tbody>
</table>
</section>