namespace SpendManagementApi.Models.Types
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web.UI.WebControls;
    using SpendManagementApi.Common.Enums;
    using SpendManagementApi.Interfaces;
    using SpendManagementApi.Models.Types.Employees;
    using SpendManagementLibrary;

    /// <summary>
    /// Holds the attribute details for a user defined field
    /// </summary>
    public class Attribute : BaseExternalType, IApiFrontForDbObject<SpendManagementLibrary.cAttribute, Attribute>
    {
        /// <summary>
        /// Get attribute Id
        /// </summary>
        public int Attributeid { get; set;}
      
        /// <summary>
        /// Get attribute name
        /// </summary>
        public string Attributename { get; set; }
    
        /// <summary>
        /// Get friendly display name of attribute
        /// </summary>
        public string Displayname { get; set; }
    
        /// <summary>
        /// Get attribute description
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Get associated tool tip
        /// </summary>
        public string Tooltip { get; set; }
   
        /// <summary>
        /// Get mandatory indication
        /// </summary>
        public bool Mandatory { get; set; }
     
        /// <summary>
        ///  Gets a value indicating whether the attribute should be displayed to mobile users.
        /// </summary>
        public bool DisplayInMobile { get; set; }

        /// <summary>
        /// Get field type
        /// </summary>
        public TypeOfUserDefinedField Fieldtype { get; set; }
     
        /// <summary>
        /// Get attribute creation date
        /// </summary>
        public DateTime Createdon { get; set; }
     
        /// <summary>
        /// Get User ID of attribute creator
        /// </summary>
        public int Createdby { get; set; }
     
        /// <summary>
        /// Get attribute last modification date
        /// </summary>
        public DateTime? Modifiedon { get; set; }
     
        /// <summary>
        /// Get User ID of attributes modifer
        /// </summary>
        public int? Modifiedby { get; set; }
       
        /// <summary>
        /// Get field id for reporting of attribute
        /// </summary>
        public Guid Fieldid { get; set; }
      
        /// <summary>
        /// Get whether the attribute is a key field
        /// </summary>
        public bool Iskeyfield { get; set; }
      
        /// <summary>
        /// Get whether attribute is used as audit log field identifier
        /// </summary>
        public bool Isauditidentifer { get; set; }
      
        /// <summary>
        /// Gets whether the attribute value is to be unique
        /// </summary>
        public bool Isunique { get; set; }
    
        /// <summary>
        /// Gets whether the attribute can be edited
        /// </summary>
        public bool AllowEdit { get; set; }
    
        /// <summary>
        /// Gets whether the attribute can be deleted
        /// </summary>
        public bool AllowDelete { get; set; }
    
        /// <summary>
        /// Gets whether the attribute was generated by the application and not a user
        /// </summary>
        public bool IsSystemAttribute { get; set; }
    
        /// <summary>
        /// A generic boolean attribute for the attribute.
        /// Attachment attribute - include image library
        /// Formatted text box - strip font tags from html before save.
        /// </summary>
        public bool BoolAttribute { get; set; }

        /// <summary>
        /// The max length for the field
        /// </summary>
        public int MaxLength { get; set; }

        /// <summary>
        /// The format of the field
        /// </summary>
        public FieldFormat FieldFormat {get;set;}
        
        /// <summary>
        /// The precision of a number field
        /// </summary>
        public int Precision { get; set; } 

        /// <summary>
        /// Details of the hyperlink for a hyperlink field
        /// </summary>
        public HyperLink HyperLink { get; set; }

        /// <summary>
        /// The default value for a checkbox field
        /// </summary>
        public String DefautCheckValue { get; set; }

        /// <summary>
        /// The list of values that make up the list field type
        /// </summary>
        public List<UserDefinedFieldListElement> ListElements { get; set; }

        /// <summary>
        /// Transforms a SML <see cref="cAttribute">cAttribute</see>to a API type <see cref="Attribute">Attribute</see>
        /// </summary>
        /// <param name="dbType">The <see cref="cAttribute">cAttribute</see></param>
        /// <param name="actionContext">The actioncontext</param>
        /// <returns></returns>
        public Attribute From(cAttribute dbType, IActionContext actionContext)
        {
            this.Attributeid = dbType.attributeid;
            this.Attributename = dbType.attributename;
            this.Displayname = dbType.displayname;
            this.Description = dbType.description;
            this.Tooltip = dbType.tooltip;
            this.Mandatory = dbType.mandatory;
            this.DisplayInMobile = dbType.DisplayInMobile;
            this.Fieldtype = (TypeOfUserDefinedField)dbType.fieldtype;
            this.Createdon = dbType.createdon;
            this.Createdby = dbType.createdby;
            this.Modifiedon = dbType.modifiedon;
            this.Modifiedby = dbType.modifiedby;
            this.Fieldid = dbType.fieldid;
            this.Iskeyfield = dbType.iskeyfield;
            this.Isauditidentifer = dbType.isauditidentifer;
            this.Isunique = dbType.isunique;
            this.AllowEdit = dbType.AllowEdit;
            this.AllowDelete = dbType.AllowDelete;
            this.IsSystemAttribute = dbType.IsSystemAttribute;
            this.FieldFormat = FieldFormat.NotSet;
         
            switch (this.Fieldtype)
            {
                case TypeOfUserDefinedField.Text:
                case TypeOfUserDefinedField.Number:
                case TypeOfUserDefinedField.Integer:
                case TypeOfUserDefinedField.Relationship:
                case TypeOfUserDefinedField.Currency:

                    if (dbType.GetType() == typeof(cTextAttribute))
                    {
                        var txtatt = (cTextAttribute)dbType;

                        if (txtatt.maxlength.HasValue == true && txtatt.maxlength.Value > 0)
                        {
                            this.MaxLength = txtatt.maxlength.Value;
                        }

                        this.FieldFormat = txtatt.format == AttributeFormat.MultiLine ? FieldFormat.MultiLine : FieldFormat.SingleLine;
                    }

                    if (dbType.GetType() == typeof(cNumberAttribute))
                    {

                        var numberAttribute = (cNumberAttribute)dbType;
                        this.Precision = numberAttribute.precision;
                    }

                    break;

                case TypeOfUserDefinedField.LargeText:

                    var largeTextAttribute = (cTextAttribute)dbType;

                    switch (largeTextAttribute.format)
                    {
                        case AttributeFormat.MultiLine:
                            this.FieldFormat = FieldFormat.MultiLine;
                            break;
                        case AttributeFormat.FormattedText:
                            this.FieldFormat = FieldFormat.FormattedText;
                            break;
                    }

                    break;

                case TypeOfUserDefinedField.Hyperlink:

                    cHyperlinkAttribute hyperlinkAttribute = (cHyperlinkAttribute)dbType;
                    this.HyperLink = new HyperLink();
                    this.HyperLink.NavigateUrl = hyperlinkAttribute.hyperlinkPath;
                    this.HyperLink.ID = "lnk" + dbType.attributeid;
                    this.HyperLink.NavigateUrl = hyperlinkAttribute.hyperlinkPath;
                    this.HyperLink.Target = "_blank";
                    this.HyperLink.Text = hyperlinkAttribute.hyperlinkText;

                    break;

                case TypeOfUserDefinedField.DateTime:

                    cDateTimeAttribute dateatt = (cDateTimeAttribute)dbType;
                    switch (dateatt.format)
                    {
                        case AttributeFormat.DateOnly:
                            this.FieldFormat = FieldFormat.DateOnly;
                            break;
                        case AttributeFormat.TimeOnly:
                            this.FieldFormat = FieldFormat.TimeOnly;
                            break;
                        case AttributeFormat.DateTime:
                            this.FieldFormat = FieldFormat.DateTime;
                            break;
                    }

                    break;

                case TypeOfUserDefinedField.TickBox:

                    cTickboxAttribute tmpChk = (cTickboxAttribute)dbType;
                    this.DefautCheckValue = tmpChk.defaultvalue;
                    break;

                case TypeOfUserDefinedField.List:

                    this.ListElements =
                        (dbType as cListAttribute).items.Values.Select(
                            item => item.Cast<UserDefinedFieldListElement>()).ToList();

                    break;
            }

            return this;
        }


        public cAttribute To(IActionContext actionContext)
        {
            throw new System.NotImplementedException();
        }
    }
}
