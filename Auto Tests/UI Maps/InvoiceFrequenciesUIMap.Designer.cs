// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Auto_Tests.UIMaps.InvoiceFrequenciesUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class InvoiceFrequenciesUIMap
    {
        
        /// <summary>
        /// NavigateToInvoiceFreqenciesFromHomePage
        /// </summary>
        public void NavigateToInvoiceFreqenciesFromHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIAdministrationPane = this.UIWelcometoframework20Window.UIWelcometoframework20Document.UIAdministrationPane;
            HtmlSpan uIBaseInformationPane = this.UIWelcometoframework20Window.UIAdministrationDocument.UIBaseInformationPane;
            HtmlSpan uIInvoiceInformationPane = this.UIWelcometoframework20Window.UIBaseInformationDocument.UIInvoiceInformationPane;
            HtmlSpan uIInvoiceFrequenciesPane = this.UIWelcometoframework20Window.UIInvoiceConfigurationDocument.UIInvoiceFrequenciesPane;
            #endregion

            // Click 'Administration' pane
            Mouse.Click(uIAdministrationPane, new Point(97, 10));

            // Click 'Base Information' pane
            Mouse.Click(uIBaseInformationPane, new Point(94, 13));

            // Click 'Invoice Information' pane
            Mouse.Click(uIInvoiceInformationPane, new Point(83, 16));

            // Click 'Invoice Frequencies' pane
            Mouse.Click(uIInvoiceFrequenciesPane, new Point(139, 18));
        }
        
        /// <summary>
        /// ValidateInvoiceFrequenciesPageLayout - Use 'ValidateInvoiceFrequenciesPageLayoutExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateInvoiceFrequenciesPageLayout()
        {
            #region Variable Declarations
            HtmlDiv uIPageOptionsAddDefiniPane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIAspnetFormCustom.UIPageOptionsAddDefiniPane;
            HtmlDiv uIJamesLloyd20SeptembePane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInfodivPane.UIJamesLloyd20SeptembePane;
            HtmlDiv uIAboutSwitchSubAccounPane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIMenudivPane.UIAboutSwitchSubAccounPane;
            HtmlDiv uIItemPane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UILogodivPane.UIItemPane;
            HtmlDiv uIBaseDefinitionsPane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIBaseDefinitionsPane;
            HtmlDiv uIInvoiceFrequencyTypePane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvoiceFrequencyTypePane;
            HtmlDiv uICurrentDefinitionsPane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIMaindivPane.UICurrentDefinitionsPane;
            #endregion

            // Verify that 'Page Options Add Definition' pane's property 'InnerText' equals 'Page Options
            //Add Definition '
            Assert.AreEqual(this.ValidateInvoiceFrequenciesPageLayoutExpectedValues.UIPageOptionsAddDefiniPaneInnerText, uIPageOptionsAddDefiniPane.InnerText);

            // Verify that 'James Lloyd | 20 September 2010' pane's property 'DisplayText' contains 'James Lloyd'
            StringAssert.Contains(uIJamesLloyd20SeptembePane.DisplayText, this.ValidateInvoiceFrequenciesPageLayoutExpectedValues.UIJamesLloyd20SeptembePaneDisplayText);

            // Verify that 'About  | Switch Sub Account |  Exit  Hom' pane's property 'InnerText' equals 'About  | Switch Sub Account |  Exit  Home Page : Administration Menu : Base Information : Invoice Information : Invoice Frequencies '
            Assert.AreEqual(this.ValidateInvoiceFrequenciesPageLayoutExpectedValues.UIAboutSwitchSubAccounPaneInnerText, uIAboutSwitchSubAccounPane.InnerText);

            // Verify that 'Unknown Name' pane's property 'Exists' equals 'True'
            Assert.AreEqual(this.ValidateInvoiceFrequenciesPageLayoutExpectedValues.UIItemPaneExists, uIItemPane.Exists);

            // Verify that 'Base Definitions' pane's property 'DisplayText' equals 'Base Definitions'
            Assert.AreEqual(this.ValidateInvoiceFrequenciesPageLayoutExpectedValues.UIBaseDefinitionsPaneDisplayText, uIBaseDefinitionsPane.DisplayText);

            // Verify that 'Invoice Frequency Types' pane's property 'DisplayText' equals 'Invoice Frequency Types'
            Assert.AreEqual(this.ValidateInvoiceFrequenciesPageLayoutExpectedValues.UIInvoiceFrequencyTypePaneDisplayText, uIInvoiceFrequencyTypePane.DisplayText);

            // Verify that 'Current Definitions' pane's property 'DisplayText' equals 'Current Definitions'
            Assert.AreEqual(this.ValidateInvoiceFrequenciesPageLayoutExpectedValues.UICurrentDefinitionsPaneDisplayText, uICurrentDefinitionsPane.DisplayText);
        }
        
        /// <summary>
        /// AddInvoiceFrequencyDescriptionOnly - Use 'AddInvoiceFrequencyDescriptionOnlyParams' to pass parameters into this method.
        /// </summary>
        public void AddInvoiceFrequencyDescriptionOnly()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddDefinitionHyperlink = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIPageOptionsAddDefiniPane.UIAddDefinitionHyperlink;
            HtmlEdit uIInvoiceFrequencyDescEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvoiceFrequencyDescEdit;
            HtmlImage uISaveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UISaveImage;
            #endregion

            // Click 'Add Definition' link
            Mouse.Click(uIAddDefinitionHyperlink, new Point(27, 10));

            // Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
            uIInvoiceFrequencyDescEdit.Text = this.AddInvoiceFrequencyDescriptionOnlyParams.UIInvoiceFrequencyDescEditText;

            // Click 'Save' image
            Mouse.Click(uISaveImage, new Point(28, 7));
        }
        
        /// <summary>
        /// ValidateInvoiceFrequencyDoesNotExist - Use 'ValidateInvoiceFrequencyDoesNotExistExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateInvoiceFrequencyDoesNotExist()
        {
            #region Variable Declarations
            HtmlCell uICodedUIInvoiceFrequeCell = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Table.UICodedUIInvoiceFrequeCell;
            #endregion

            // Verify that 'CodedUI Invoice Frequency' cell's property 'InnerText' is not equal to 'CodedUI Invoice Frequency'
            Assert.AreNotEqual(this.ValidateInvoiceFrequencyDoesNotExistExpectedValues.UICodedUIInvoiceFrequeCellInnerText, uICodedUIInvoiceFrequeCell.InnerText);
        }
        
        /// <summary>
        /// ValidateAddInvoiceFrequencyDescriptionOnly - Use 'ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAddInvoiceFrequencyDescriptionOnly()
        {
            #region Variable Declarations
            HtmlCell uICodedUIInvoiceFrequeCell = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Table.UICodedUIInvoiceFrequeCell;
            HtmlCell uIItem0Cell = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Table.UIItem0Cell;
            #endregion

            // Verify that 'CodedUI Invoice Frequency' cell's property 'InnerText' equals 'CodedUI Invoice Frequency'
            Assert.AreEqual(this.ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues.UICodedUIInvoiceFrequeCellInnerText, uICodedUIInvoiceFrequeCell.InnerText);

            // Verify that '0' cell's property 'InnerText' equals '0'
            Assert.AreEqual(this.ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues.UIItem0CellInnerText, uIItem0Cell.InnerText);
        }
        
        /// <summary>
        /// DeleteInvoiceFrequencyWithCancel
        /// </summary>
        public void DeleteInvoiceFrequencyWithCancel()
        {
            #region Variable Declarations
            HtmlImage uIDeleteImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Row.UIDeleteImage;
            BrowserWindow uIWelcometoframework20Window = this.UIWelcometoframework20Window;
            #endregion

            // Click 'Delete' image
            Mouse.Click(uIDeleteImage, new Point(10, 10));

            // Click 'Cancel' button in the browser dialog window
            uIWelcometoframework20Window.PerformDialogAction(BrowserDialogAction.Cancel);
        }
        
        /// <summary>
        /// DeleteInvoiceFrequenc
        /// </summary>
        public void DeleteInvoiceFrequenc()
        {
            #region Variable Declarations
            HtmlImage uIDeleteImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Row.UIDeleteImage;
            BrowserWindow uIWelcometoframework20Window = this.UIWelcometoframework20Window;
            #endregion

            // Click 'Delete' image
            Mouse.Click(uIDeleteImage, new Point(7, 8));

            // Click 'Ok' button in the browser dialog window
            uIWelcometoframework20Window.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// AddInvoiceFrequencyAllInformation - Use 'AddInvoiceFrequencyAllInformationParams' to pass parameters into this method.
        /// </summary>
        public void AddInvoiceFrequencyAllInformation()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddDefinitionHyperlink1 = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIPageOptionsAddDefiniPane.UIAddDefinitionHyperlink1;
            HtmlEdit uIInvoiceFrequencyDescEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvoiceFrequencyDescEdit;
            HtmlEdit uIInvFreqinMonthsEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvFreqinMonthsEdit;
            HtmlImage uISaveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UISaveImage;
            #endregion

            // Click 'Add Definition' link
            Mouse.Click(uIAddDefinitionHyperlink1, new Point(29, 15));

            // Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
            uIInvoiceFrequencyDescEdit.Text = this.AddInvoiceFrequencyAllInformationParams.UIInvoiceFrequencyDescEditText;

            // Type '6' in 'Inv. Freq. in Months' text box
            uIInvFreqinMonthsEdit.Text = this.AddInvoiceFrequencyAllInformationParams.UIInvFreqinMonthsEditText;

            // Click 'Save' image
            Mouse.Click(uISaveImage, new Point(18, 18));
        }
        
        /// <summary>
        /// ValidateAddInvoiceFrequencyAllInformation - Use 'ValidateAddInvoiceFrequencyAllInformationExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAddInvoiceFrequencyAllInformation()
        {
            #region Variable Declarations
            HtmlCell uICodedUIInvoiceFrequeCell1 = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Table.UICodedUIInvoiceFrequeCell1;
            HtmlCell uIItem6Cell = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Table.UIItem6Cell;
            #endregion

            // Verify that 'CodedUI Invoice Frequency' cell's property 'InnerText' equals 'CodedUI Invoice Frequency'
            Assert.AreEqual(this.ValidateAddInvoiceFrequencyAllInformationExpectedValues.UICodedUIInvoiceFrequeCell1InnerText, uICodedUIInvoiceFrequeCell1.InnerText);

            // Verify that '6' cell's property 'InnerText' equals '6'
            Assert.AreEqual(this.ValidateAddInvoiceFrequencyAllInformationExpectedValues.UIItem6CellInnerText, uIItem6Cell.InnerText);
        }
        
        /// <summary>
        /// AddInvoiceFrequencyWithCancel - Use 'AddInvoiceFrequencyWithCancelParams' to pass parameters into this method.
        /// </summary>
        public void AddInvoiceFrequencyWithCancel()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddDefinitionHyperlink1 = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIPageOptionsAddDefiniPane.UIAddDefinitionHyperlink1;
            HtmlEdit uIInvoiceFrequencyDescEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvoiceFrequencyDescEdit;
            HtmlEdit uIInvFreqinMonthsEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvFreqinMonthsEdit;
            HtmlInputButton uICtl00contentmaincmdDButton = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UICtl00contentmaincmdDButton;
            #endregion

            // Click 'Add Definition' link
            Mouse.Click(uIAddDefinitionHyperlink1, new Point(69, 10));

            // Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
            uIInvoiceFrequencyDescEdit.Text = this.AddInvoiceFrequencyWithCancelParams.UIInvoiceFrequencyDescEditText;

            // Type '6' in 'Inv. Freq. in Months' text box
            uIInvFreqinMonthsEdit.Text = this.AddInvoiceFrequencyWithCancelParams.UIInvFreqinMonthsEditText;

            // Click 'ctl00$contentmain$cmdDefCancel' button
            Mouse.Click(uICtl00contentmaincmdDButton, new Point(26, 18));
        }
        
        /// <summary>
        /// ValidateAddDuplicateInvoiceFrequency - Use 'ValidateAddDuplicateInvoiceFrequencyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAddDuplicateInvoiceFrequency()
        {
            #region Variable Declarations
            HtmlDiv uICtl00_pnlMasterPopupPane = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UICtl00_pnlMasterPopupPane;
            #endregion

            // Verify that 'ctl00_pnlMasterPopup' pane's property 'InnerText' equals 'Duplicate Definition
            //
            //
            //This definiton already exists and cannot be added'
            Assert.AreEqual(this.ValidateAddDuplicateInvoiceFrequencyExpectedValues.UICtl00_pnlMasterPopupPaneInnerText, uICtl00_pnlMasterPopupPane.InnerText);

            // Verify that 'ctl00_pnlMasterPopup' pane's property 'Exists' equals 'True'
            Assert.AreEqual(this.ValidateAddDuplicateInvoiceFrequencyExpectedValues.UICtl00_pnlMasterPopupPaneExists, uICtl00_pnlMasterPopupPane.Exists);
        }
        
        /// <summary>
        /// ValidateInvoiceFrequencyIsNotArchived - Use 'ValidateInvoiceFrequencyIsNotArchivedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateInvoiceFrequencyIsNotArchived()
        {
            #region Variable Declarations
            HtmlImage uIArchiveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Cell.UIArchiveImage;
            #endregion

            // Verify that 'Archive' image's property 'Title' equals 'Archive'
            Assert.AreEqual(this.ValidateInvoiceFrequencyIsNotArchivedExpectedValues.UIArchiveImageTitle, uIArchiveImage.Title);
        }
        
        /// <summary>
        /// ArchiveInvoiceFrequencyWithCancel
        /// </summary>
        public void ArchiveInvoiceFrequencyWithCancel()
        {
            #region Variable Declarations
            HtmlImage uIArchiveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Cell.UIArchiveImage;
            BrowserWindow uIWelcometoframework20Window = this.UIWelcometoframework20Window;
            #endregion

            // Click 'Archive' image
            Mouse.Click(uIArchiveImage, new Point(7, 9));

            // Click 'Cancel' button in the browser dialog window
            uIWelcometoframework20Window.PerformDialogAction(BrowserDialogAction.Cancel);
        }
        
        /// <summary>
        /// ArchiveInvoiceFrequency
        /// </summary>
        public void ArchiveInvoiceFrequency()
        {
            #region Variable Declarations
            HtmlImage uIArchiveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Cell.UIArchiveImage;
            BrowserWindow uIWelcometoframework20Window = this.UIWelcometoframework20Window;
            #endregion

            // Click 'Archive' image
            Mouse.Click(uIArchiveImage, new Point(11, 13));

            // Click 'Ok' button in the browser dialog window
            uIWelcometoframework20Window.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// ValidateInvoiceFrequencyIsArchived - Use 'ValidateInvoiceFrequencyIsArchivedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateInvoiceFrequencyIsArchived()
        {
            #region Variable Declarations
            HtmlImage uIUnArchiveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Cell.UIUnArchiveImage;
            #endregion

            // Verify that 'Un-Archive' image's property 'Title' equals 'Un-Archive'
            Assert.AreEqual(this.ValidateInvoiceFrequencyIsArchivedExpectedValues.UIUnArchiveImageTitle, uIUnArchiveImage.Title);
        }
        
        /// <summary>
        /// UnArchiveInvoiceFrequencyWithCancel
        /// </summary>
        public void UnArchiveInvoiceFrequencyWithCancel()
        {
            #region Variable Declarations
            HtmlImage uIUnArchiveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Cell.UIUnArchiveImage;
            BrowserWindow uIWelcometoframework20Window = this.UIWelcometoframework20Window;
            #endregion

            // Click 'Un-Archive' image
            Mouse.Click(uIUnArchiveImage, new Point(13, 6));

            // Click 'Cancel' button in the browser dialog window
            uIWelcometoframework20Window.PerformDialogAction(BrowserDialogAction.Cancel);
        }
        
        /// <summary>
        /// UnArchiveInvoiceFrequency
        /// </summary>
        public void UnArchiveInvoiceFrequency()
        {
            #region Variable Declarations
            HtmlImage uIUnArchiveImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Cell.UIUnArchiveImage;
            BrowserWindow uIWelcometoframework20Window = this.UIWelcometoframework20Window;
            #endregion

            // Click 'Un-Archive' image
            Mouse.Click(uIUnArchiveImage, new Point(9, 6));

            // Click 'Ok' button in the browser dialog window
            uIWelcometoframework20Window.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// EditInvoiceFrequencyWithCancel - Use 'EditInvoiceFrequencyWithCancelParams' to pass parameters into this method.
        /// </summary>
        public void EditInvoiceFrequencyWithCancel()
        {
            #region Variable Declarations
            HtmlImage uIEditImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Row1.UIEditImage;
            HtmlEdit uIInvoiceFrequencyDescEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvoiceFrequencyDescEdit;
            HtmlEdit uIInvFreqinMonthsEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvFreqinMonthsEdit;
            HtmlInputButton uICtl00contentmaincmdDButton = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UICtl00contentmaincmdDButton;
            #endregion

            // Click 'Edit' image
            Mouse.Click(uIEditImage, new Point(9, 7));

            // Type 'CodedUI Invoice Frequency EDITED' in 'Invoice Frequency Description' text box
            uIInvoiceFrequencyDescEdit.Text = this.EditInvoiceFrequencyWithCancelParams.UIInvoiceFrequencyDescEditText;

            // Type '8' in 'Inv. Freq. in Months' text box
            uIInvFreqinMonthsEdit.Text = this.EditInvoiceFrequencyWithCancelParams.UIInvFreqinMonthsEditText;

            // Click 'ctl00$contentmain$cmdDefCancel' button
            Mouse.Click(uICtl00contentmaincmdDButton, new Point(37, 18));
        }
        
        /// <summary>
        /// EditInvoiceFrequency - Use 'EditInvoiceFrequencyParams' to pass parameters into this method.
        /// </summary>
        public void EditInvoiceFrequency()
        {
            #region Variable Declarations
            HtmlImage uIEditImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Row1.UIEditImage;
            HtmlEdit uIInvoiceFrequencyDescEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvoiceFrequencyDescEdit;
            HtmlEdit uIInvFreqinMonthsEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvFreqinMonthsEdit;
            HtmlImage uISaveImage1 = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UISaveImage1;
            #endregion

            // Click 'Edit' image
            Mouse.Click(uIEditImage, new Point(11, 10));

            // Type 'CodedUI Invoice Frequency EDITED' in 'Invoice Frequency Description' text box
            uIInvoiceFrequencyDescEdit.Text = this.EditInvoiceFrequencyParams.UIInvoiceFrequencyDescEditText;

            // Type '8' in 'Inv. Freq. in Months' text box
            uIInvFreqinMonthsEdit.Text = this.EditInvoiceFrequencyParams.UIInvFreqinMonthsEditText;

            // Click 'Save' image
            Mouse.Click(uISaveImage1, new Point(23, 22));
        }
        
        /// <summary>
        /// ValidateEditInvoiceFrequency - Use 'ValidateEditInvoiceFrequencyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateEditInvoiceFrequency()
        {
            #region Variable Declarations
            HtmlCell uICodedUIInvoiceFrequeCell2 = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Table.UICodedUIInvoiceFrequeCell2;
            HtmlCell uIItem8Cell = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Table.UIItem8Cell;
            #endregion

            // Verify that 'CodedUI Invoice Frequency EDITED' cell's property 'InnerText' equals 'CodedUI Invoice Frequency EDITED'
            Assert.AreEqual(this.ValidateEditInvoiceFrequencyExpectedValues.UICodedUIInvoiceFrequeCell2InnerText, uICodedUIInvoiceFrequeCell2.InnerText);

            // Verify that '8' cell's property 'InnerText' equals '8'
            Assert.AreEqual(this.ValidateEditInvoiceFrequencyExpectedValues.UIItem8CellInnerText, uIItem8Cell.InnerText);
        }
        
        /// <summary>
        /// EditInvoiceFrequencyResetValues - Use 'EditInvoiceFrequencyResetValuesParams' to pass parameters into this method.
        /// </summary>
        public void EditInvoiceFrequencyResetValues()
        {
            #region Variable Declarations
            HtmlImage uIEditImage = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UITbl_bdGrid_f6f78056_Row2.UIEditImage;
            HtmlEdit uIInvoiceFrequencyDescEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvoiceFrequencyDescEdit;
            HtmlEdit uIInvFreqinMonthsEdit = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UIInvFreqinMonthsEdit;
            HtmlImage uISaveImage1 = this.UIWelcometoframework20Window.UIBaseDefinitionsDocument.UISaveImage1;
            #endregion

            // Click 'Edit' image
            Mouse.Click(uIEditImage, new Point(9, 3));

            // Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
            uIInvoiceFrequencyDescEdit.Text = this.EditInvoiceFrequencyResetValuesParams.UIInvoiceFrequencyDescEditText;

            // Type '6' in 'Inv. Freq. in Months' text box
            uIInvFreqinMonthsEdit.Text = this.EditInvoiceFrequencyResetValuesParams.UIInvFreqinMonthsEditText;

            // Click 'Save' image
            Mouse.Click(uISaveImage1, new Point(14, 9));
        }
        
        #region Properties
        public virtual ValidateInvoiceFrequenciesPageLayoutExpectedValues ValidateInvoiceFrequenciesPageLayoutExpectedValues
        {
            get
            {
                if ((this.mValidateInvoiceFrequenciesPageLayoutExpectedValues == null))
                {
                    this.mValidateInvoiceFrequenciesPageLayoutExpectedValues = new ValidateInvoiceFrequenciesPageLayoutExpectedValues();
                }
                return this.mValidateInvoiceFrequenciesPageLayoutExpectedValues;
            }
        }
        
        public virtual AddInvoiceFrequencyDescriptionOnlyParams AddInvoiceFrequencyDescriptionOnlyParams
        {
            get
            {
                if ((this.mAddInvoiceFrequencyDescriptionOnlyParams == null))
                {
                    this.mAddInvoiceFrequencyDescriptionOnlyParams = new AddInvoiceFrequencyDescriptionOnlyParams();
                }
                return this.mAddInvoiceFrequencyDescriptionOnlyParams;
            }
        }
        
        public virtual ValidateInvoiceFrequencyDoesNotExistExpectedValues ValidateInvoiceFrequencyDoesNotExistExpectedValues
        {
            get
            {
                if ((this.mValidateInvoiceFrequencyDoesNotExistExpectedValues == null))
                {
                    this.mValidateInvoiceFrequencyDoesNotExistExpectedValues = new ValidateInvoiceFrequencyDoesNotExistExpectedValues();
                }
                return this.mValidateInvoiceFrequencyDoesNotExistExpectedValues;
            }
        }
        
        public virtual ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues
        {
            get
            {
                if ((this.mValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues == null))
                {
                    this.mValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues = new ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues();
                }
                return this.mValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues;
            }
        }
        
        public virtual AddInvoiceFrequencyAllInformationParams AddInvoiceFrequencyAllInformationParams
        {
            get
            {
                if ((this.mAddInvoiceFrequencyAllInformationParams == null))
                {
                    this.mAddInvoiceFrequencyAllInformationParams = new AddInvoiceFrequencyAllInformationParams();
                }
                return this.mAddInvoiceFrequencyAllInformationParams;
            }
        }
        
        public virtual ValidateAddInvoiceFrequencyAllInformationExpectedValues ValidateAddInvoiceFrequencyAllInformationExpectedValues
        {
            get
            {
                if ((this.mValidateAddInvoiceFrequencyAllInformationExpectedValues == null))
                {
                    this.mValidateAddInvoiceFrequencyAllInformationExpectedValues = new ValidateAddInvoiceFrequencyAllInformationExpectedValues();
                }
                return this.mValidateAddInvoiceFrequencyAllInformationExpectedValues;
            }
        }
        
        public virtual AddInvoiceFrequencyWithCancelParams AddInvoiceFrequencyWithCancelParams
        {
            get
            {
                if ((this.mAddInvoiceFrequencyWithCancelParams == null))
                {
                    this.mAddInvoiceFrequencyWithCancelParams = new AddInvoiceFrequencyWithCancelParams();
                }
                return this.mAddInvoiceFrequencyWithCancelParams;
            }
        }
        
        public virtual ValidateAddDuplicateInvoiceFrequencyExpectedValues ValidateAddDuplicateInvoiceFrequencyExpectedValues
        {
            get
            {
                if ((this.mValidateAddDuplicateInvoiceFrequencyExpectedValues == null))
                {
                    this.mValidateAddDuplicateInvoiceFrequencyExpectedValues = new ValidateAddDuplicateInvoiceFrequencyExpectedValues();
                }
                return this.mValidateAddDuplicateInvoiceFrequencyExpectedValues;
            }
        }
        
        public virtual ValidateInvoiceFrequencyIsNotArchivedExpectedValues ValidateInvoiceFrequencyIsNotArchivedExpectedValues
        {
            get
            {
                if ((this.mValidateInvoiceFrequencyIsNotArchivedExpectedValues == null))
                {
                    this.mValidateInvoiceFrequencyIsNotArchivedExpectedValues = new ValidateInvoiceFrequencyIsNotArchivedExpectedValues();
                }
                return this.mValidateInvoiceFrequencyIsNotArchivedExpectedValues;
            }
        }
        
        public virtual ValidateInvoiceFrequencyIsArchivedExpectedValues ValidateInvoiceFrequencyIsArchivedExpectedValues
        {
            get
            {
                if ((this.mValidateInvoiceFrequencyIsArchivedExpectedValues == null))
                {
                    this.mValidateInvoiceFrequencyIsArchivedExpectedValues = new ValidateInvoiceFrequencyIsArchivedExpectedValues();
                }
                return this.mValidateInvoiceFrequencyIsArchivedExpectedValues;
            }
        }
        
        public virtual EditInvoiceFrequencyWithCancelParams EditInvoiceFrequencyWithCancelParams
        {
            get
            {
                if ((this.mEditInvoiceFrequencyWithCancelParams == null))
                {
                    this.mEditInvoiceFrequencyWithCancelParams = new EditInvoiceFrequencyWithCancelParams();
                }
                return this.mEditInvoiceFrequencyWithCancelParams;
            }
        }
        
        public virtual EditInvoiceFrequencyParams EditInvoiceFrequencyParams
        {
            get
            {
                if ((this.mEditInvoiceFrequencyParams == null))
                {
                    this.mEditInvoiceFrequencyParams = new EditInvoiceFrequencyParams();
                }
                return this.mEditInvoiceFrequencyParams;
            }
        }
        
        public virtual ValidateEditInvoiceFrequencyExpectedValues ValidateEditInvoiceFrequencyExpectedValues
        {
            get
            {
                if ((this.mValidateEditInvoiceFrequencyExpectedValues == null))
                {
                    this.mValidateEditInvoiceFrequencyExpectedValues = new ValidateEditInvoiceFrequencyExpectedValues();
                }
                return this.mValidateEditInvoiceFrequencyExpectedValues;
            }
        }
        
        public virtual EditInvoiceFrequencyResetValuesParams EditInvoiceFrequencyResetValuesParams
        {
            get
            {
                if ((this.mEditInvoiceFrequencyResetValuesParams == null))
                {
                    this.mEditInvoiceFrequencyResetValuesParams = new EditInvoiceFrequencyResetValuesParams();
                }
                return this.mEditInvoiceFrequencyResetValuesParams;
            }
        }
        
        public UIWelcometoframework20Window UIWelcometoframework20Window
        {
            get
            {
                if ((this.mUIWelcometoframework20Window == null))
                {
                    this.mUIWelcometoframework20Window = new UIWelcometoframework20Window();
                }
                return this.mUIWelcometoframework20Window;
            }
        }
        #endregion
        
        #region Fields
        private ValidateInvoiceFrequenciesPageLayoutExpectedValues mValidateInvoiceFrequenciesPageLayoutExpectedValues;
        
        private AddInvoiceFrequencyDescriptionOnlyParams mAddInvoiceFrequencyDescriptionOnlyParams;
        
        private ValidateInvoiceFrequencyDoesNotExistExpectedValues mValidateInvoiceFrequencyDoesNotExistExpectedValues;
        
        private ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues mValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues;
        
        private AddInvoiceFrequencyAllInformationParams mAddInvoiceFrequencyAllInformationParams;
        
        private ValidateAddInvoiceFrequencyAllInformationExpectedValues mValidateAddInvoiceFrequencyAllInformationExpectedValues;
        
        private AddInvoiceFrequencyWithCancelParams mAddInvoiceFrequencyWithCancelParams;
        
        private ValidateAddDuplicateInvoiceFrequencyExpectedValues mValidateAddDuplicateInvoiceFrequencyExpectedValues;
        
        private ValidateInvoiceFrequencyIsNotArchivedExpectedValues mValidateInvoiceFrequencyIsNotArchivedExpectedValues;
        
        private ValidateInvoiceFrequencyIsArchivedExpectedValues mValidateInvoiceFrequencyIsArchivedExpectedValues;
        
        private EditInvoiceFrequencyWithCancelParams mEditInvoiceFrequencyWithCancelParams;
        
        private EditInvoiceFrequencyParams mEditInvoiceFrequencyParams;
        
        private ValidateEditInvoiceFrequencyExpectedValues mValidateEditInvoiceFrequencyExpectedValues;
        
        private EditInvoiceFrequencyResetValuesParams mEditInvoiceFrequencyResetValuesParams;
        
        private UIWelcometoframework20Window mUIWelcometoframework20Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateInvoiceFrequenciesPageLayout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateInvoiceFrequenciesPageLayoutExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Page Options Add Definition' pane's property 'InnerText' equals 'Page Options
        ///Add Definition '
        /// </summary>
        public string UIPageOptionsAddDefiniPaneInnerText = "Page Options\r\nAdd Definition ";
        
        /// <summary>
        /// Verify that 'James Lloyd | 20 September 2010' pane's property 'DisplayText' contains 'James Lloyd'
        /// </summary>
        public string UIJamesLloyd20SeptembePaneDisplayText = "James Lloyd";
        
        /// <summary>
        /// Verify that 'About  | Switch Sub Account |  Exit  Hom' pane's property 'InnerText' equals 'About  | Switch Sub Account |  Exit  Home Page : Administration Menu : Base Information : Invoice Information : Invoice Frequencies '
        /// </summary>
        public string UIAboutSwitchSubAccounPaneInnerText = "About  | Switch Sub Account |  Exit  Home Page : Administration Menu : Base Infor" +
            "mation : Invoice Information : Invoice Frequencies ";
        
        /// <summary>
        /// Verify that 'Unknown Name' pane's property 'Exists' equals 'True'
        /// </summary>
        public bool UIItemPaneExists = true;
        
        /// <summary>
        /// Verify that 'Base Definitions' pane's property 'DisplayText' equals 'Base Definitions'
        /// </summary>
        public string UIBaseDefinitionsPaneDisplayText = "Base Definitions";
        
        /// <summary>
        /// Verify that 'Invoice Frequency Types' pane's property 'DisplayText' equals 'Invoice Frequency Types'
        /// </summary>
        public string UIInvoiceFrequencyTypePaneDisplayText = "Invoice Frequency Types";
        
        /// <summary>
        /// Verify that 'Current Definitions' pane's property 'DisplayText' equals 'Current Definitions'
        /// </summary>
        public string UICurrentDefinitionsPaneDisplayText = "Current Definitions";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddInvoiceFrequencyDescriptionOnly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AddInvoiceFrequencyDescriptionOnlyParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
        /// </summary>
        public string UIInvoiceFrequencyDescEditText = "CodedUI Invoice Frequency";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateInvoiceFrequencyDoesNotExist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateInvoiceFrequencyDoesNotExistExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CodedUI Invoice Frequency' cell's property 'InnerText' is not equal to 'CodedUI Invoice Frequency'
        /// </summary>
        public string UICodedUIInvoiceFrequeCellInnerText = "CodedUI Invoice Frequency";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAddInvoiceFrequencyDescriptionOnly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateAddInvoiceFrequencyDescriptionOnlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CodedUI Invoice Frequency' cell's property 'InnerText' equals 'CodedUI Invoice Frequency'
        /// </summary>
        public string UICodedUIInvoiceFrequeCellInnerText = "CodedUI Invoice Frequency";
        
        /// <summary>
        /// Verify that '0' cell's property 'InnerText' equals '0'
        /// </summary>
        public string UIItem0CellInnerText = "0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddInvoiceFrequencyAllInformation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AddInvoiceFrequencyAllInformationParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
        /// </summary>
        public string UIInvoiceFrequencyDescEditText = "CodedUI Invoice Frequency";
        
        /// <summary>
        /// Type '6' in 'Inv. Freq. in Months' text box
        /// </summary>
        public string UIInvFreqinMonthsEditText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAddInvoiceFrequencyAllInformation'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateAddInvoiceFrequencyAllInformationExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CodedUI Invoice Frequency' cell's property 'InnerText' equals 'CodedUI Invoice Frequency'
        /// </summary>
        public string UICodedUIInvoiceFrequeCell1InnerText = "CodedUI Invoice Frequency";
        
        /// <summary>
        /// Verify that '6' cell's property 'InnerText' equals '6'
        /// </summary>
        public string UIItem6CellInnerText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddInvoiceFrequencyWithCancel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AddInvoiceFrequencyWithCancelParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
        /// </summary>
        public string UIInvoiceFrequencyDescEditText = "CodedUI Invoice Frequency";
        
        /// <summary>
        /// Type '6' in 'Inv. Freq. in Months' text box
        /// </summary>
        public string UIInvFreqinMonthsEditText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAddDuplicateInvoiceFrequency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateAddDuplicateInvoiceFrequencyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'ctl00_pnlMasterPopup' pane's property 'InnerText' equals 'Duplicate Definition
        ///
        ///
        ///This definiton already exists and cannot be added'
        /// </summary>
        public string UICtl00_pnlMasterPopupPaneInnerText = "Duplicate Definition\r\n\r\n\r\nThis definiton already exists and cannot be added";
        
        /// <summary>
        /// Verify that 'ctl00_pnlMasterPopup' pane's property 'Exists' equals 'True'
        /// </summary>
        public bool UICtl00_pnlMasterPopupPaneExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateInvoiceFrequencyIsNotArchived'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateInvoiceFrequencyIsNotArchivedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Archive' image's property 'Title' equals 'Archive'
        /// </summary>
        public string UIArchiveImageTitle = "Archive";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateInvoiceFrequencyIsArchived'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateInvoiceFrequencyIsArchivedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Un-Archive' image's property 'Title' equals 'Un-Archive'
        /// </summary>
        public string UIUnArchiveImageTitle = "Un-Archive";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditInvoiceFrequencyWithCancel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class EditInvoiceFrequencyWithCancelParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CodedUI Invoice Frequency EDITED' in 'Invoice Frequency Description' text box
        /// </summary>
        public string UIInvoiceFrequencyDescEditText = "CodedUI Invoice Frequency EDITED";
        
        /// <summary>
        /// Type '8' in 'Inv. Freq. in Months' text box
        /// </summary>
        public string UIInvFreqinMonthsEditText = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditInvoiceFrequency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class EditInvoiceFrequencyParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CodedUI Invoice Frequency EDITED' in 'Invoice Frequency Description' text box
        /// </summary>
        public string UIInvoiceFrequencyDescEditText = "CodedUI Invoice Frequency EDITED";
        
        /// <summary>
        /// Type '8' in 'Inv. Freq. in Months' text box
        /// </summary>
        public string UIInvFreqinMonthsEditText = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateEditInvoiceFrequency'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateEditInvoiceFrequencyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CodedUI Invoice Frequency EDITED' cell's property 'InnerText' equals 'CodedUI Invoice Frequency EDITED'
        /// </summary>
        public string UICodedUIInvoiceFrequeCell2InnerText = "CodedUI Invoice Frequency EDITED";
        
        /// <summary>
        /// Verify that '8' cell's property 'InnerText' equals '8'
        /// </summary>
        public string UIItem8CellInnerText = "8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditInvoiceFrequencyResetValues'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class EditInvoiceFrequencyResetValuesParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CodedUI Invoice Frequency' in 'Invoice Frequency Description' text box
        /// </summary>
        public string UIInvoiceFrequencyDescEditText = "CodedUI Invoice Frequency";
        
        /// <summary>
        /// Type '6' in 'Inv. Freq. in Months' text box
        /// </summary>
        public string UIInvFreqinMonthsEditText = "6";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoframework20Window : BrowserWindow
    {
        
        public UIWelcometoframework20Window()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to framework2009";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to framework2009");
            this.WindowTitles.Add("Administration");
            this.WindowTitles.Add("Base Information");
            this.WindowTitles.Add("Invoice Configuration Options");
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIWelcometoframework20Document UIWelcometoframework20Document
        {
            get
            {
                if ((this.mUIWelcometoframework20Document == null))
                {
                    this.mUIWelcometoframework20Document = new UIWelcometoframework20Document(this);
                }
                return this.mUIWelcometoframework20Document;
            }
        }
        
        public UIAdministrationDocument UIAdministrationDocument
        {
            get
            {
                if ((this.mUIAdministrationDocument == null))
                {
                    this.mUIAdministrationDocument = new UIAdministrationDocument(this);
                }
                return this.mUIAdministrationDocument;
            }
        }
        
        public UIBaseInformationDocument UIBaseInformationDocument
        {
            get
            {
                if ((this.mUIBaseInformationDocument == null))
                {
                    this.mUIBaseInformationDocument = new UIBaseInformationDocument(this);
                }
                return this.mUIBaseInformationDocument;
            }
        }
        
        public UIInvoiceConfigurationDocument UIInvoiceConfigurationDocument
        {
            get
            {
                if ((this.mUIInvoiceConfigurationDocument == null))
                {
                    this.mUIInvoiceConfigurationDocument = new UIInvoiceConfigurationDocument(this);
                }
                return this.mUIInvoiceConfigurationDocument;
            }
        }
        
        public UIBaseDefinitionsDocument UIBaseDefinitionsDocument
        {
            get
            {
                if ((this.mUIBaseDefinitionsDocument == null))
                {
                    this.mUIBaseDefinitionsDocument = new UIBaseDefinitionsDocument(this);
                }
                return this.mUIBaseDefinitionsDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIWelcometoframework20Document mUIWelcometoframework20Document;
        
        private UIAdministrationDocument mUIAdministrationDocument;
        
        private UIBaseInformationDocument mUIBaseInformationDocument;
        
        private UIInvoiceConfigurationDocument mUIInvoiceConfigurationDocument;
        
        private UIBaseDefinitionsDocument mUIBaseDefinitionsDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoframework20Document : HtmlDocument
    {
        
        public UIWelcometoframework20Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Welcome to framework2009";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Home.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/Home.aspx";
            this.WindowTitles.Add("Welcome to framework2009");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIAdministrationPane
        {
            get
            {
                if ((this.mUIAdministrationPane == null))
                {
                    this.mUIAdministrationPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel2";
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Administration";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel2 class=menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUIAdministrationPane.WindowTitles.Add("Welcome to framework2009");
                    #endregion
                }
                return this.mUIAdministrationPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIAdministrationPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdministrationDocument : HtmlDocument
    {
        
        public UIAdministrationDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Administration";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MenuMain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/MenuMain.aspx?menusection=admin";
            this.WindowTitles.Add("Administration");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIBaseInformationPane
        {
            get
            {
                if ((this.mUIBaseInformationPane == null))
                {
                    this.mUIBaseInformationPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIBaseInformationPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel0";
                    this.mUIBaseInformationPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIBaseInformationPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Base Information";
                    this.mUIBaseInformationPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIBaseInformationPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIBaseInformationPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel0 class=menuitemtitle";
                    this.mUIBaseInformationPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
                    this.mUIBaseInformationPane.WindowTitles.Add("Administration");
                    #endregion
                }
                return this.mUIBaseInformationPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIBaseInformationPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBaseInformationDocument : HtmlDocument
    {
        
        public UIBaseInformationDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Base Information";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MenuMain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/MenuMain.aspx?menusection=baseinfo";
            this.WindowTitles.Add("Base Information");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIInvoiceInformationPane
        {
            get
            {
                if ((this.mUIInvoiceInformationPane == null))
                {
                    this.mUIInvoiceInformationPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIInvoiceInformationPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel1";
                    this.mUIInvoiceInformationPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIInvoiceInformationPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Invoice Information";
                    this.mUIInvoiceInformationPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIInvoiceInformationPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIInvoiceInformationPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel1 class=menuitemtitle";
                    this.mUIInvoiceInformationPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUIInvoiceInformationPane.WindowTitles.Add("Base Information");
                    #endregion
                }
                return this.mUIInvoiceInformationPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIInvoiceInformationPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInvoiceConfigurationDocument : HtmlDocument
    {
        
        public UIInvoiceConfigurationDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Invoice Configuration Options";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MenuMain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/MenuMain.aspx?menusection=invoiceinfo";
            this.WindowTitles.Add("Invoice Configuration Options");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIInvoiceFrequenciesPane
        {
            get
            {
                if ((this.mUIInvoiceFrequenciesPane == null))
                {
                    this.mUIInvoiceFrequenciesPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIInvoiceFrequenciesPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel0";
                    this.mUIInvoiceFrequenciesPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIInvoiceFrequenciesPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Invoice Frequencies";
                    this.mUIInvoiceFrequenciesPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIInvoiceFrequenciesPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIInvoiceFrequenciesPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel0 class=menuitemtitle";
                    this.mUIInvoiceFrequenciesPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUIInvoiceFrequenciesPane.WindowTitles.Add("Invoice Configuration Options");
                    #endregion
                }
                return this.mUIInvoiceFrequenciesPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIInvoiceFrequenciesPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIBaseDefinitionsDocument : HtmlDocument
    {
        
        public UIBaseDefinitionsDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Base Definitions";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/contracts/admin/basedefinitions.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/contracts/admin/basedefinitions.aspx?bdt=130";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public UIAspnetFormCustom UIAspnetFormCustom
        {
            get
            {
                if ((this.mUIAspnetFormCustom == null))
                {
                    this.mUIAspnetFormCustom = new UIAspnetFormCustom(this);
                }
                return this.mUIAspnetFormCustom;
            }
        }
        
        public UIInfodivPane UIInfodivPane
        {
            get
            {
                if ((this.mUIInfodivPane == null))
                {
                    this.mUIInfodivPane = new UIInfodivPane(this);
                }
                return this.mUIInfodivPane;
            }
        }
        
        public UIMenudivPane UIMenudivPane
        {
            get
            {
                if ((this.mUIMenudivPane == null))
                {
                    this.mUIMenudivPane = new UIMenudivPane(this);
                }
                return this.mUIMenudivPane;
            }
        }
        
        public UILogodivPane UILogodivPane
        {
            get
            {
                if ((this.mUILogodivPane == null))
                {
                    this.mUILogodivPane = new UILogodivPane(this);
                }
                return this.mUILogodivPane;
            }
        }
        
        public HtmlDiv UIBaseDefinitionsPane
        {
            get
            {
                if ((this.mUIBaseDefinitionsPane == null))
                {
                    this.mUIBaseDefinitionsPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIBaseDefinitionsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "pagetitle";
                    this.mUIBaseDefinitionsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIBaseDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Base Definitions";
                    this.mUIBaseDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIBaseDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "withsubtitle";
                    this.mUIBaseDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=pagetitle class=withsubtitle";
                    this.mUIBaseDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "21";
                    this.mUIBaseDefinitionsPane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIBaseDefinitionsPane;
            }
        }
        
        public HtmlDiv UIInvoiceFrequencyTypePane
        {
            get
            {
                if ((this.mUIInvoiceFrequencyTypePane == null))
                {
                    this.mUIInvoiceFrequencyTypePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIInvoiceFrequencyTypePane.SearchProperties[HtmlDiv.PropertyNames.Id] = "subpagetitle";
                    this.mUIInvoiceFrequencyTypePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIInvoiceFrequencyTypePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Invoice Frequency Types";
                    this.mUIInvoiceFrequencyTypePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIInvoiceFrequencyTypePane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIInvoiceFrequencyTypePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=subpagetitle";
                    this.mUIInvoiceFrequencyTypePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "22";
                    this.mUIInvoiceFrequencyTypePane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIInvoiceFrequencyTypePane;
            }
        }
        
        public UIMaindivPane UIMaindivPane
        {
            get
            {
                if ((this.mUIMaindivPane == null))
                {
                    this.mUIMaindivPane = new UIMaindivPane(this);
                }
                return this.mUIMaindivPane;
            }
        }
        
        public UIPageOptionsAddDefiniPane UIPageOptionsAddDefiniPane
        {
            get
            {
                if ((this.mUIPageOptionsAddDefiniPane == null))
                {
                    this.mUIPageOptionsAddDefiniPane = new UIPageOptionsAddDefiniPane(this);
                }
                return this.mUIPageOptionsAddDefiniPane;
            }
        }
        
        public HtmlEdit UIInvoiceFrequencyDescEdit
        {
            get
            {
                if ((this.mUIInvoiceFrequencyDescEdit == null))
                {
                    this.mUIInvoiceFrequencyDescEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInvoiceFrequencyDescEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtcodes_invoicefrequencytype_invoiceFrequencyTypeDesc";
                    this.mUIInvoiceFrequencyDescEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtcodes_invoicefrequencytype_invoiceFrequencyTypeDesc";
                    this.mUIInvoiceFrequencyDescEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Invoice Frequency Description";
                    this.mUIInvoiceFrequencyDescEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInvoiceFrequencyDescEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInvoiceFrequencyDescEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fillspan";
                    this.mUIInvoiceFrequencyDescEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtcodes_invoicefre";
                    this.mUIInvoiceFrequencyDescEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIInvoiceFrequencyDescEdit.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIInvoiceFrequencyDescEdit;
            }
        }
        
        public HtmlImage UISaveImage
        {
            get
            {
                if ((this.mUISaveImage == null))
                {
                    this.mUISaveImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUISaveImage.SearchProperties[HtmlImage.PropertyNames.Id] = "cmdSave";
                    this.mUISaveImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUISaveImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Save";
                    this.mUISaveImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_save.png";
                    this.mUISaveImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUISaveImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUISaveImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "id=cmdSave onclick=javascript:baseDefObj";
                    this.mUISaveImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "28";
                    this.mUISaveImage.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUISaveImage;
            }
        }
        
        public UITbl_bdGrid_f6f78056_Table UITbl_bdGrid_f6f78056_Table
        {
            get
            {
                if ((this.mUITbl_bdGrid_f6f78056_Table == null))
                {
                    this.mUITbl_bdGrid_f6f78056_Table = new UITbl_bdGrid_f6f78056_Table(this);
                }
                return this.mUITbl_bdGrid_f6f78056_Table;
            }
        }
        
        public UITbl_bdGrid_f6f78056_Row UITbl_bdGrid_f6f78056_Row
        {
            get
            {
                if ((this.mUITbl_bdGrid_f6f78056_Row == null))
                {
                    this.mUITbl_bdGrid_f6f78056_Row = new UITbl_bdGrid_f6f78056_Row(this);
                }
                return this.mUITbl_bdGrid_f6f78056_Row;
            }
        }
        
        public HtmlEdit UIInvFreqinMonthsEdit
        {
            get
            {
                if ((this.mUIInvFreqinMonthsEdit == null))
                {
                    this.mUIInvFreqinMonthsEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIInvFreqinMonthsEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtcodes_invoicefrequencytype_frequencyInMonths";
                    this.mUIInvFreqinMonthsEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtcodes_invoicefrequencytype_frequencyInMonths";
                    this.mUIInvFreqinMonthsEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Inv. Freq. in Months";
                    this.mUIInvFreqinMonthsEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIInvFreqinMonthsEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIInvFreqinMonthsEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fillspan";
                    this.mUIInvFreqinMonthsEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtcodes_invoicefre";
                    this.mUIInvFreqinMonthsEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIInvFreqinMonthsEdit.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIInvFreqinMonthsEdit;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdDButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdDButton == null))
                {
                    this.mUICtl00contentmaincmdDButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdDButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdDefCancel";
                    this.mUICtl00contentmaincmdDButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdDefCancel";
                    this.mUICtl00contentmaincmdDButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdDButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdDButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/cancel_up.gif";
                    this.mUICtl00contentmaincmdDButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdDButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdDButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdDButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUICtl00contentmaincmdDButton.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUICtl00contentmaincmdDButton;
            }
        }
        
        public HtmlDiv UICtl00_pnlMasterPopupPane
        {
            get
            {
                if ((this.mUICtl00_pnlMasterPopupPane == null))
                {
                    this.mUICtl00_pnlMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_pnlMasterPopup";
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Duplicate Definition\r\n\r\n\r\nThis definiton";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "errorModal";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 11001; POSITION: fixed; ";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    this.mUICtl00_pnlMasterPopupPane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUICtl00_pnlMasterPopupPane;
            }
        }
        
        public UITbl_bdGrid_f6f78056_Cell UITbl_bdGrid_f6f78056_Cell
        {
            get
            {
                if ((this.mUITbl_bdGrid_f6f78056_Cell == null))
                {
                    this.mUITbl_bdGrid_f6f78056_Cell = new UITbl_bdGrid_f6f78056_Cell(this);
                }
                return this.mUITbl_bdGrid_f6f78056_Cell;
            }
        }
        
        public UITbl_bdGrid_f6f78056_Row1 UITbl_bdGrid_f6f78056_Row1
        {
            get
            {
                if ((this.mUITbl_bdGrid_f6f78056_Row1 == null))
                {
                    this.mUITbl_bdGrid_f6f78056_Row1 = new UITbl_bdGrid_f6f78056_Row1(this);
                }
                return this.mUITbl_bdGrid_f6f78056_Row1;
            }
        }
        
        public HtmlImage UISaveImage1
        {
            get
            {
                if ((this.mUISaveImage1 == null))
                {
                    this.mUISaveImage1 = new HtmlImage(this);
                    #region Search Criteria
                    this.mUISaveImage1.SearchProperties[HtmlImage.PropertyNames.Id] = "cmdSave";
                    this.mUISaveImage1.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUISaveImage1.SearchProperties[HtmlImage.PropertyNames.Alt] = "Save";
                    this.mUISaveImage1.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_save.png";
                    this.mUISaveImage1.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUISaveImage1.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUISaveImage1.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "id=cmdSave onclick=javascript:baseDefObj";
                    this.mUISaveImage1.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "31";
                    this.mUISaveImage1.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUISaveImage1;
            }
        }
        
        public UITbl_bdGrid_f6f78056_Row2 UITbl_bdGrid_f6f78056_Row2
        {
            get
            {
                if ((this.mUITbl_bdGrid_f6f78056_Row2 == null))
                {
                    this.mUITbl_bdGrid_f6f78056_Row2 = new UITbl_bdGrid_f6f78056_Row2(this);
                }
                return this.mUITbl_bdGrid_f6f78056_Row2;
            }
        }
        #endregion
        
        #region Fields
        private UIAspnetFormCustom mUIAspnetFormCustom;
        
        private UIInfodivPane mUIInfodivPane;
        
        private UIMenudivPane mUIMenudivPane;
        
        private UILogodivPane mUILogodivPane;
        
        private HtmlDiv mUIBaseDefinitionsPane;
        
        private HtmlDiv mUIInvoiceFrequencyTypePane;
        
        private UIMaindivPane mUIMaindivPane;
        
        private UIPageOptionsAddDefiniPane mUIPageOptionsAddDefiniPane;
        
        private HtmlEdit mUIInvoiceFrequencyDescEdit;
        
        private HtmlImage mUISaveImage;
        
        private UITbl_bdGrid_f6f78056_Table mUITbl_bdGrid_f6f78056_Table;
        
        private UITbl_bdGrid_f6f78056_Row mUITbl_bdGrid_f6f78056_Row;
        
        private HtmlEdit mUIInvFreqinMonthsEdit;
        
        private HtmlInputButton mUICtl00contentmaincmdDButton;
        
        private HtmlDiv mUICtl00_pnlMasterPopupPane;
        
        private UITbl_bdGrid_f6f78056_Cell mUITbl_bdGrid_f6f78056_Cell;
        
        private UITbl_bdGrid_f6f78056_Row1 mUITbl_bdGrid_f6f78056_Row1;
        
        private HtmlImage mUISaveImage1;
        
        private UITbl_bdGrid_f6f78056_Row2 mUITbl_bdGrid_f6f78056_Row2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAspnetFormCustom : HtmlCustom
    {
        
        public UIAspnetFormCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["Id"] = "aspnetForm";
            this.SearchProperties[UITestControl.PropertyNames.Name] = "aspnetForm";
            this.SearchProperties["TagName"] = "FORM";
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=aspnetForm method=post name=aspnetFor";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIPageOptionsAddDefiniPane
        {
            get
            {
                if ((this.mUIPageOptionsAddDefiniPane == null))
                {
                    this.mUIPageOptionsAddDefiniPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIPageOptionsAddDefiniPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIPageOptionsAddDefiniPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIPageOptionsAddDefiniPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Page Options\r\nAdd Definition ";
                    this.mUIPageOptionsAddDefiniPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIPageOptionsAddDefiniPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "submenuholder";
                    this.mUIPageOptionsAddDefiniPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=submenuholder";
                    this.mUIPageOptionsAddDefiniPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "5";
                    this.mUIPageOptionsAddDefiniPane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIPageOptionsAddDefiniPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIPageOptionsAddDefiniPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInfodivPane : HtmlDiv
    {
        
        public UIInfodivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "infodiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "James Lloyd | 20 September 2010 Base Def";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=infodiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "17";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIJamesLloyd20SeptembePane
        {
            get
            {
                if ((this.mUIJamesLloyd20SeptembePane == null))
                {
                    this.mUIJamesLloyd20SeptembePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIJamesLloyd20SeptembePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIJamesLloyd20SeptembePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIJamesLloyd20SeptembePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "James Lloyd | 20 September 2010 ";
                    this.mUIJamesLloyd20SeptembePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIJamesLloyd20SeptembePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "userinfo";
                    this.mUIJamesLloyd20SeptembePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=userinfo";
                    this.mUIJamesLloyd20SeptembePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    this.mUIJamesLloyd20SeptembePane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIJamesLloyd20SeptembePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIJamesLloyd20SeptembePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenudivPane : HtmlDiv
    {
        
        public UIMenudivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "menudiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "About  | Switch Sub Account |  Exit  Hom";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menudiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "14";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIAboutSwitchSubAccounPane
        {
            get
            {
                if ((this.mUIAboutSwitchSubAccounPane == null))
                {
                    this.mUIAboutSwitchSubAccounPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIAboutSwitchSubAccounPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIAboutSwitchSubAccounPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIAboutSwitchSubAccounPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "About  | Switch Sub Account |  Exit  Hom";
                    this.mUIAboutSwitchSubAccounPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIAboutSwitchSubAccounPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menubar";
                    this.mUIAboutSwitchSubAccounPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=menubar";
                    this.mUIAboutSwitchSubAccounPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
                    this.mUIAboutSwitchSubAccounPane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIAboutSwitchSubAccounPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIAboutSwitchSubAccounPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILogodivPane : HtmlDiv
    {
        
        public UILogodivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "logodiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "  ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=logodiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = " ";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "clientlogo";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=clientlogo";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    this.mUIItemPane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMaindivPane : HtmlDiv
    {
        
        public UIMaindivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "maindiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Current Definitions\r\nInv. Freq. in Month";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=maindiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UICurrentDefinitionsPane
        {
            get
            {
                if ((this.mUICurrentDefinitionsPane == null))
                {
                    this.mUICurrentDefinitionsPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICurrentDefinitionsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUICurrentDefinitionsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICurrentDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Current Definitions";
                    this.mUICurrentDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICurrentDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "sectiontitle";
                    this.mUICurrentDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=sectiontitle";
                    this.mUICurrentDefinitionsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    this.mUICurrentDefinitionsPane.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUICurrentDefinitionsPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUICurrentDefinitionsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIPageOptionsAddDefiniPane : HtmlDiv
    {
        
        public UIPageOptionsAddDefiniPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "submenu";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Page Options\r\nAdd Definition ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=submenu";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAddDefinitionHyperlink
        {
            get
            {
                if ((this.mUIAddDefinitionHyperlink == null))
                {
                    this.mUIAddDefinitionHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddDefinitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAddDefinitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddDefinitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddDefinitionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add Definition";
                    this.mUIAddDefinitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "baseDefObject.editDefinition(-1);";
                    this.mUIAddDefinitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddDefinitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:baseDefObject.editDefinition(-1);";
                    this.mUIAddDefinitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "submenuitem";
                    this.mUIAddDefinitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=submenuitem href=\"javascript:baseD";
                    this.mUIAddDefinitionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIAddDefinitionHyperlink.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIAddDefinitionHyperlink;
            }
        }
        
        public HtmlHyperlink UIAddDefinitionHyperlink1
        {
            get
            {
                if ((this.mUIAddDefinitionHyperlink1 == null))
                {
                    this.mUIAddDefinitionHyperlink1 = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddDefinitionHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAddDefinitionHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddDefinitionHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddDefinitionHyperlink1.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add Definition";
                    this.mUIAddDefinitionHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "baseDefObject.editDefinition(-1);";
                    this.mUIAddDefinitionHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddDefinitionHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:baseDefObject.editDefinition(-1);";
                    this.mUIAddDefinitionHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "submenuitem";
                    this.mUIAddDefinitionHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=submenuitem tabIndex=0 href=\"javas";
                    this.mUIAddDefinitionHyperlink1.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIAddDefinitionHyperlink1.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIAddDefinitionHyperlink1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAddDefinitionHyperlink;
        
        private HtmlHyperlink mUIAddDefinitionHyperlink1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_bdGrid_f6f78056_Table : HtmlTable
    {
        
        public UITbl_bdGrid_f6f78056_Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_bdGrid_f6f78056_aea7_4089_b0dd_d39512aab2da";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Inv. Freq. in Months Invoice Frequency D";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_bdGrid_f6f78056_aea7_4089_b0dd_d3";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "9";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "5";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "datatbl";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlCell UICodedUIInvoiceFrequeCell
        {
            get
            {
                if ((this.mUICodedUIInvoiceFrequeCell == null))
                {
                    this.mUICodedUIInvoiceFrequeCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUICodedUIInvoiceFrequeCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUICodedUIInvoiceFrequeCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUICodedUIInvoiceFrequeCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUICodedUIInvoiceFrequeCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "CodedUI Invoice Frequency";
                    this.mUICodedUIInvoiceFrequeCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row2";
                    this.mUICodedUIInvoiceFrequeCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "2";
                    this.mUICodedUIInvoiceFrequeCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "4";
                    this.mUICodedUIInvoiceFrequeCell.FilterProperties[HtmlCell.PropertyNames.Class] = "row2";
                    this.mUICodedUIInvoiceFrequeCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "10";
                    this.mUICodedUIInvoiceFrequeCell.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUICodedUIInvoiceFrequeCell;
            }
        }
        
        public HtmlCell UIItem0Cell
        {
            get
            {
                if ((this.mUIItem0Cell == null))
                {
                    this.mUIItem0Cell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem0Cell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem0Cell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem0Cell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem0Cell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "0";
                    this.mUIItem0Cell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row2";
                    this.mUIItem0Cell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "2";
                    this.mUIItem0Cell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "3";
                    this.mUIItem0Cell.FilterProperties[HtmlCell.PropertyNames.Class] = "row2";
                    this.mUIItem0Cell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "9";
                    this.mUIItem0Cell.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIItem0Cell;
            }
        }
        
        public HtmlCell UICodedUIInvoiceFrequeCell1
        {
            get
            {
                if ((this.mUICodedUIInvoiceFrequeCell1 == null))
                {
                    this.mUICodedUIInvoiceFrequeCell1 = new HtmlCell(this);
                    #region Search Criteria
                    this.mUICodedUIInvoiceFrequeCell1.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUICodedUIInvoiceFrequeCell1.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUICodedUIInvoiceFrequeCell1.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUICodedUIInvoiceFrequeCell1.FilterProperties[HtmlCell.PropertyNames.InnerText] = "CodedUI Invoice Frequency";
                    this.mUICodedUIInvoiceFrequeCell1.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row1";
                    this.mUICodedUIInvoiceFrequeCell1.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "5";
                    this.mUICodedUIInvoiceFrequeCell1.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "4";
                    this.mUICodedUIInvoiceFrequeCell1.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
                    this.mUICodedUIInvoiceFrequeCell1.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "25";
                    this.mUICodedUIInvoiceFrequeCell1.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUICodedUIInvoiceFrequeCell1;
            }
        }
        
        public HtmlCell UIItem6Cell
        {
            get
            {
                if ((this.mUIItem6Cell == null))
                {
                    this.mUIItem6Cell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem6Cell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem6Cell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem6Cell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem6Cell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "6";
                    this.mUIItem6Cell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row1";
                    this.mUIItem6Cell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "5";
                    this.mUIItem6Cell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "3";
                    this.mUIItem6Cell.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
                    this.mUIItem6Cell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "24";
                    this.mUIItem6Cell.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIItem6Cell;
            }
        }
        
        public HtmlCell UICodedUIInvoiceFrequeCell2
        {
            get
            {
                if ((this.mUICodedUIInvoiceFrequeCell2 == null))
                {
                    this.mUICodedUIInvoiceFrequeCell2 = new HtmlCell(this);
                    #region Search Criteria
                    this.mUICodedUIInvoiceFrequeCell2.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUICodedUIInvoiceFrequeCell2.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUICodedUIInvoiceFrequeCell2.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUICodedUIInvoiceFrequeCell2.FilterProperties[HtmlCell.PropertyNames.InnerText] = "CodedUI Invoice Frequency EDITED";
                    this.mUICodedUIInvoiceFrequeCell2.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row2";
                    this.mUICodedUIInvoiceFrequeCell2.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "6";
                    this.mUICodedUIInvoiceFrequeCell2.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "4";
                    this.mUICodedUIInvoiceFrequeCell2.FilterProperties[HtmlCell.PropertyNames.Class] = "row2";
                    this.mUICodedUIInvoiceFrequeCell2.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "30";
                    this.mUICodedUIInvoiceFrequeCell2.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUICodedUIInvoiceFrequeCell2;
            }
        }
        
        public HtmlCell UIItem8Cell
        {
            get
            {
                if ((this.mUIItem8Cell == null))
                {
                    this.mUIItem8Cell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIItem8Cell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIItem8Cell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIItem8Cell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIItem8Cell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "8";
                    this.mUIItem8Cell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row2";
                    this.mUIItem8Cell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "6";
                    this.mUIItem8Cell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "3";
                    this.mUIItem8Cell.FilterProperties[HtmlCell.PropertyNames.Class] = "row2";
                    this.mUIItem8Cell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "29";
                    this.mUIItem8Cell.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIItem8Cell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUICodedUIInvoiceFrequeCell;
        
        private HtmlCell mUIItem0Cell;
        
        private HtmlCell mUICodedUIInvoiceFrequeCell1;
        
        private HtmlCell mUIItem6Cell;
        
        private HtmlCell mUICodedUIInvoiceFrequeCell2;
        
        private HtmlCell mUIItem8Cell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_bdGrid_f6f78056_Row : HtmlRow
    {
        
        public UITbl_bdGrid_f6f78056_Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_bdGrid_f6f78056_aea7_4089_b0dd_d39512aab2da_CodedUI Invoice Frequency";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "0CodedUI Invoice Frequency";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=\"tbl_bdGrid_f6f78056_aea7_4089_b0dd_d";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "2";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "3";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIDeleteImage
        {
            get
            {
                if ((this.mUIDeleteImage == null))
                {
                    this.mUIDeleteImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/delete2.png";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/icons/delete2.png";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Delete src=\"/shared/images/icons/del";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "2";
                    this.mUIDeleteImage.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_bdGrid_f6f78056_Cell : HtmlCell
    {
        
        public UITbl_bdGrid_f6f78056_Cell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlCell.PropertyNames.Id] = "tbl_bdGrid_f6f78056_aea7_4089_b0dd_d39512aab2da_CodedUI Invoice Frequency_archive" +
                "Status";
            this.SearchProperties[HtmlCell.PropertyNames.Name] = null;
            this.FilterProperties[HtmlCell.PropertyNames.InnerText] = null;
            this.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "id=\"tbl_bdGrid_f6f78056_aea7_4089_b0dd_d";
            this.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "5";
            this.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "2";
            this.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
            this.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIArchiveImage
        {
            get
            {
                if ((this.mUIArchiveImage == null))
                {
                    this.mUIArchiveImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/folder_lock.png";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/icons/folder_lock.png";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "title=Archive src=\"/shared/images/icons/";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    this.mUIArchiveImage.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIArchiveImage;
            }
        }
        
        public HtmlImage UIUnArchiveImage
        {
            get
            {
                if ((this.mUIUnArchiveImage == null))
                {
                    this.mUIUnArchiveImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/folder_into.png";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/icons/folder_into.png";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "title=Un-Archive src=\"/shared/images/ico";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    this.mUIUnArchiveImage.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIUnArchiveImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIArchiveImage;
        
        private HtmlImage mUIUnArchiveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_bdGrid_f6f78056_Row1 : HtmlRow
    {
        
        public UITbl_bdGrid_f6f78056_Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_bdGrid_f6f78056_aea7_4089_b0dd_d39512aab2da_CodedUI Invoice Frequency";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "6CodedUI Invoice Frequency";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=\"tbl_bdGrid_f6f78056_aea7_4089_b0dd_d";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "5";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIEditImage
        {
            get
            {
                if ((this.mUIEditImage == null))
                {
                    this.mUIEditImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Edit";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/edit.png";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/icons/edit.png";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Edit src=\"/shared/images/icons/edit.";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    this.mUIEditImage.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIEditImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIEditImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_bdGrid_f6f78056_Row2 : HtmlRow
    {
        
        public UITbl_bdGrid_f6f78056_Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_bdGrid_f6f78056_aea7_4089_b0dd_d39512aab2da_CodedUI Invoice Frequency EDITED";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "8CodedUI Invoice Frequency EDITED";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=\"tbl_bdGrid_f6f78056_aea7_4089_b0dd_d";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "6";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "7";
            this.WindowTitles.Add("Base Definitions");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIEditImage
        {
            get
            {
                if ((this.mUIEditImage == null))
                {
                    this.mUIEditImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Edit";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/edit.png";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/icons/edit.png";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Edit src=\"/shared/images/icons/edit.";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    this.mUIEditImage.WindowTitles.Add("Base Definitions");
                    #endregion
                }
                return this.mUIEditImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIEditImage;
        #endregion
    }
}
