// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Auto_Tests.UIMaps.PasswordComplexityUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class PasswordComplexityUIMap
    {
        
        /// <summary>
        /// NavigateToGeneralOptionsFromFrameworkHomePage
        /// </summary>
        public void NavigateToGeneralOptionsFromFrameworkHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIAdministrationPane = this.UIWelcometoframework20Window.UIWelcometoframework20Document.UIAdministrationPane;
            HtmlSpan uITailoringPane = this.UIWelcometoframework20Window.UIAdministrationDocument.UITailoringPane;
            HtmlSpan uIGeneralOptionsPane = this.UIWelcometoframework20Window.UITailoringOptionsDocument.UIGeneralOptionsPane;
            #endregion

            // Click 'Administration' pane
            Mouse.Click(uIAdministrationPane, new Point(55, 12));

            // Click 'Tailoring' pane
            Mouse.Click(uITailoringPane, new Point(68, 18));

            // Click 'General Options' pane
            Mouse.Click(uIGeneralOptionsPane, new Point(111, 16));
        }
        
        /// <summary>
        /// SelectPasswordSettingsWithinGeneralOptions
        /// </summary>
        public void SelectPasswordSettingsWithinGeneralOptions()
        {
            #region Variable Declarations
            HtmlHyperlink uIPasswordSettingsHyperlink = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordSettingsHyperlink;
            #endregion

            // Click 'Password Settings' link
            Mouse.Click(uIPasswordSettingsHyperlink, new Point(72, 8));
        }
        
        /// <summary>
        /// PasswordSettingsSetComplexityToOnlyMustContainSymbol - Use 'PasswordSettingsSetComplexityToOnlyMustContainSymbolParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetComplexityToOnlyMustContainSymbol()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainnCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainaCheckBox;
            #endregion

            // Select 'Password can be any length' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetComplexityToOnlyMustContainSymbolParams.UIPasswordlengthComboBoxSelectedItem;

            // Clear 'Password must contain upper case letters' check box
            uIPasswordmustcontainuCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainSymbolParams.UIPasswordmustcontainuCheckBoxChecked;

            // Clear 'Password must contain numbers' check box
            uIPasswordmustcontainnCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainSymbolParams.UIPasswordmustcontainnCheckBoxChecked;

            // Select 'Password must contain a symbol character' check box
            uIPasswordmustcontainaCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainSymbolParams.UIPasswordmustcontainaCheckBoxChecked;
        }
        
        /// <summary>
        /// ValidatePasswordSettingsComplexityContainsSymbolOnly - Use 'ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsComplexityContainsSymbolOnly()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainnCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainaCheckBox;
            #endregion

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);

            // Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues.UIPasswordmustcontainuCheckBoxChecked, uIPasswordmustcontainuCheckBox.Checked);

            // Verify that 'Password must contain numbers' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues.UIPasswordmustcontainnCheckBoxChecked, uIPasswordmustcontainnCheckBox.Checked);

            // Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues.UIPasswordmustcontainaCheckBoxChecked, uIPasswordmustcontainaCheckBox.Checked);
        }
        
        /// <summary>
        /// ValidatePasswordSettingsComplexityContainsUpperOnly - Use 'ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsComplexityContainsUpperOnly()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainnCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainaCheckBox;
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainuCheckBox;
            #endregion

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);

            // Verify that 'Password must contain numbers' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues.UIPasswordmustcontainnCheckBoxChecked, uIPasswordmustcontainnCheckBox.Checked);

            // Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues.UIPasswordmustcontainaCheckBoxChecked, uIPasswordmustcontainaCheckBox.Checked);

            // Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues.UIPasswordmustcontainuCheckBoxChecked, uIPasswordmustcontainuCheckBox.Checked);
        }
        
        /// <summary>
        /// ValidatePasswordSettingsComplexityContainsNumbersOnly - Use 'ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsComplexityContainsNumbersOnly()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainnCheckBox;
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainaCheckBox;
            #endregion

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);

            // Verify that 'Password must contain numbers' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues.UIPasswordmustcontainnCheckBoxChecked, uIPasswordmustcontainnCheckBox.Checked);

            // Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues.UIPasswordmustcontainuCheckBoxChecked, uIPasswordmustcontainuCheckBox.Checked);

            // Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'False'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues.UIPasswordmustcontainaCheckBoxChecked, uIPasswordmustcontainaCheckBox.Checked);
        }
        
        /// <summary>
        /// PressGeneralOptionsSaveButton
        /// </summary>
        public void PressGeneralOptionsSaveButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmainbtnSButton = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UICtl00contentmainbtnSButton;
            #endregion

            // Click 'ctl00$contentmain$btnSave' button
            Mouse.Click(uICtl00contentmainbtnSButton, new Point(32, 16));
        }
        
        /// <summary>
        /// PressGeneralOptionsCancelButton
        /// </summary>
        public void PressGeneralOptionsCancelButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmainbtnCButton = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UICtl00contentmainbtnCButton;
            #endregion

            // Click 'ctl00$contentmain$btnCancel' button
            Mouse.Click(uICtl00contentmainbtnCButton, new Point(17, 20));
        }
        
        /// <summary>
        /// PasswordSettingsSetComplexityToOnlyMustContainUpperCase - Use 'PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetComplexityToOnlyMustContainUpperCase()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainnCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainaCheckBox;
            #endregion

            // Select 'Password can be any length' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams.UIPasswordlengthComboBoxSelectedItem;

            // Select 'Password must contain upper case letters' check box
            uIPasswordmustcontainuCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams.UIPasswordmustcontainuCheckBoxChecked;

            // Clear 'Password must contain numbers' check box
            uIPasswordmustcontainnCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams.UIPasswordmustcontainnCheckBoxChecked;

            // Clear 'Password must contain a symbol character' check box
            uIPasswordmustcontainaCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams.UIPasswordmustcontainaCheckBoxChecked;
        }
        
        /// <summary>
        /// PasswordSettingsSetComplexityToOnlyMustContainNumbers - Use 'PasswordSettingsSetComplexityToOnlyMustContainNumbersParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetComplexityToOnlyMustContainNumbers()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainaCheckBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainnCheckBox;
            #endregion

            // Select 'Password can be any length' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetComplexityToOnlyMustContainNumbersParams.UIPasswordlengthComboBoxSelectedItem;

            // Clear 'Password must contain upper case letters' check box
            uIPasswordmustcontainuCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainNumbersParams.UIPasswordmustcontainuCheckBoxChecked;

            // Clear 'Password must contain a symbol character' check box
            uIPasswordmustcontainaCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainNumbersParams.UIPasswordmustcontainaCheckBoxChecked;

            // Select 'Password must contain numbers' check box
            uIPasswordmustcontainnCheckBox.Checked = this.PasswordSettingsSetComplexityToOnlyMustContainNumbersParams.UIPasswordmustcontainnCheckBoxChecked;
        }
        
        /// <summary>
        /// PasswordSettingsSetNumberOfAttempts - Use 'PasswordSettingsSetNumberOfAttemptsParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetNumberOfAttempts()
        {
            #region Variable Declarations
            HtmlEdit uINumberofattemptsbefoEdit = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UINumberofattemptsbefoEdit;
            #endregion

            // Type '4' in 'Number of attempts before lock-out' text box
            uINumberofattemptsbefoEdit.Text = this.PasswordSettingsSetNumberOfAttemptsParams.UINumberofattemptsbefoEditText;
        }
        
        /// <summary>
        /// PasswordSettingsSetExpiryPeriod - Use 'PasswordSettingsSetExpiryPeriodParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetExpiryPeriod()
        {
            #region Variable Declarations
            HtmlEdit uIPasswordexpiresafterEdit = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordexpiresafterEdit;
            #endregion

            // Type '1' in 'Password expires after x days (0 = never)' text box
            uIPasswordexpiresafterEdit.Text = this.PasswordSettingsSetExpiryPeriodParams.UIPasswordexpiresafterEditText;
        }
        
        /// <summary>
        /// PasswordSettingsSetPreviousNotPermittedPasswords - Use 'PasswordSettingsSetPreviousNotPermittedPasswordsParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetPreviousNotPermittedPasswords()
        {
            #region Variable Declarations
            HtmlEdit uIPreviouspasswordsnotEdit = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPreviouspasswordsnotEdit;
            #endregion

            // Type '3' in 'Previous passwords not permitted' text box
            uIPreviouspasswordsnotEdit.Text = this.PasswordSettingsSetPreviousNotPermittedPasswordsParams.UIPreviouspasswordsnotEditText;
        }
        
        /// <summary>
        /// ChangePasswordFromMyDetailsWithSymbol - Use 'ChangePasswordFromMyDetailsWithSymbolParams' to pass parameters into this method.
        /// </summary>
        public void ChangePasswordFromMyDetailsWithSymbol()
        {
            #region Variable Declarations
            HtmlEdit uIOldPasswordEdit = this.UIChangePasswordWindowWindow.UIChangePasswordDocument.UIOldPasswordEdit;
            HtmlEdit uINewPasswordEdit = this.UIChangePasswordWindowWindow.UIChangePasswordDocument.UINewPasswordEdit;
            HtmlEdit uIConfirmNewPasswordEdit = this.UIChangePasswordWindowWindow.UIChangePasswordDocument.UIConfirmNewPasswordEdit;
            #endregion

            // Type '********' in 'Old Password' text box
            uIOldPasswordEdit.Password = this.ChangePasswordFromMyDetailsWithSymbolParams.UIOldPasswordEditPassword;

            // Type '********' in 'New Password' text box
            uINewPasswordEdit.Password = this.ChangePasswordFromMyDetailsWithSymbolParams.UINewPasswordEditPassword;

            // Type '********' in 'Confirm New Password' text box
            uIConfirmNewPasswordEdit.Password = this.ChangePasswordFromMyDetailsWithSymbolParams.UIConfirmNewPasswordEditPassword;
        }
        
        /// <summary>
        /// NavigateToGeneralOptionsFromFrameworkTailoringPage
        /// </summary>
        public void NavigateToGeneralOptionsFromFrameworkTailoringPage()
        {
            #region Variable Declarations
            HtmlSpan uIGeneralOptionsPane = this.UIWelcometoframework20Window.UITailoringOptionsDocument.UIGeneralOptionsPane;
            #endregion

            // Click 'General Options' pane
            Mouse.Click(uIGeneralOptionsPane, new Point(78, 14));
        }
        
        /// <summary>
        /// NavigateToMyDetailsChangePasswordFromFrameworkHomePage
        /// </summary>
        public void NavigateToMyDetailsChangePasswordFromFrameworkHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIMyDetailsPane = this.UIWelcometoframework20Window.UIWelcometoframework20Document.UIMyDetailsPane;
            HtmlHyperlink uIChangePasswordHyperlink = this.UIWelcometoframework20Window.UIMyDetailsDocument.UIChangePasswordHyperlink;
            #endregion

            // Click 'My Details' pane
            Mouse.Click(uIMyDetailsPane, new Point(55, 8));

            // Click 'Change Password' link
            Mouse.Click(uIChangePasswordHyperlink, new Point(37, 12));
        }
        
        /// <summary>
        /// PressMyDetailsChangePasswordSaveButton
        /// </summary>
        public void PressMyDetailsChangePasswordSaveButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmaincmdoButton = this.UIChangePasswordWindowWindow.UIChangePasswordDocument1.UICtl00contentmaincmdoButton;
            #endregion

            // Click 'ctl00$contentmain$cmdok' button
            Mouse.Click(uICtl00contentmaincmdoButton, new Point(26, 19));
        }
        
        /// <summary>
        /// PressMyDetailsChangePasswordCancelButton
        /// </summary>
        public void PressMyDetailsChangePasswordCancelButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmaincmdcButton = this.UIChangePasswordWindowWindow.UIChangePasswordDocument1.UICtl00contentmaincmdcButton;
            #endregion

            // Click 'ctl00$contentmain$cmdcancel' button
            Mouse.Click(uICtl00contentmaincmdcButton, new Point(38, 15));
        }
        
        /// <summary>
        /// NavigateToSelectEmployeeFromFrameworkHomePage
        /// </summary>
        public void NavigateToSelectEmployeeFromFrameworkHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIAdministrationPane = this.UIWelcometoframework20Window.UIWelcometoframework20Document2.UIAdministrationPane;
            HtmlSpan uIEmployeeManagementPane = this.UIWelcometoframework20Window.UIAdministrationDocument1.UIEmployeeManagementPane;
            HtmlSpan uIEmployeesPane = this.UIWelcometoframework20Window.UIEmployeeManagementDocument.UIEmployeesPane;
            #endregion

            // Click 'Administration' pane
            Mouse.Click(uIAdministrationPane, new Point(50, 19));

            // Click 'Employee Management' pane
            Mouse.Click(uIEmployeeManagementPane, new Point(32, 16));

            // Click 'Employees' pane
            Mouse.Click(uIEmployeesPane, new Point(53, 21));
        }
        
        /// <summary>
        /// NavigateToAdminEmployeeChangePasswordFromFrameworkHomePage - Use 'NavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams' to pass parameters into this method.
        /// </summary>
        public void NavigateToAdminEmployeeChangePasswordFromFrameworkHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIAdministrationPane = this.UIWelcometoframework20Window.UIWelcometoframework20Document1.UIAdministrationPane;
            HtmlSpan uIEmployeeManagementPane = this.UIWelcometoframework20Window.UIAdministrationDocument1.UIEmployeeManagementPane;
            HtmlSpan uIEmployeesPane = this.UIWelcometoframework20Window.UIEmployeeManagementDocument.UIEmployeesPane;
            HtmlEdit uIUsernameEdit = this.UIWelcometoframework20Window.UIHttpsfwtestselexpensDocument.UIUsernameEdit;
            HtmlInputButton uICtl00contentmaincmdoButton = this.UIWelcometoframework20Window.UIHttpsfwtestselexpensDocument.UICtl00contentmaincmdoButton;
            HtmlImage uIChangePasswordImage = this.UIWelcometoframework20Window.UIEmployeesDocument.UITbl_gridEmployees_53Row.UIChangePasswordImage;
            #endregion

            // Click 'Administration' pane
            Mouse.Click(uIAdministrationPane, new Point(83, 18));

            // Click 'Employee Management' pane
            Mouse.Click(uIEmployeeManagementPane, new Point(17, 9));

            // Click 'Employees' pane
            Mouse.Click(uIEmployeesPane, new Point(77, 16));

            // Type 'james' in 'Username' text box
            uIUsernameEdit.Text = this.NavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams.UIUsernameEditText;

            // Click 'ctl00$contentmain$cmdok' button
            Mouse.Click(uICtl00contentmaincmdoButton, new Point(17, 21));

            // Click 'Change Password' image
            Mouse.Click(uIChangePasswordImage, new Point(7, 11));
        }
        
        /// <summary>
        /// ChangePasswordFromAdminEmployeeWithSymbol - Use 'ChangePasswordFromAdminEmployeeWithSymbolParams' to pass parameters into this method.
        /// </summary>
        public void ChangePasswordFromAdminEmployeeWithSymbol()
        {
            #region Variable Declarations
            HtmlEdit uINewPasswordEdit = this.UIChangePasswordWindowWindow.UIChangePasswordDocument2.UINewPasswordEdit;
            HtmlEdit uIConfirmNewPasswordEdit = this.UIChangePasswordWindowWindow.UIChangePasswordDocument2.UIConfirmNewPasswordEdit;
            #endregion

            // Type '********' in 'New Password' text box
            uINewPasswordEdit.Password = this.ChangePasswordFromAdminEmployeeWithSymbolParams.UINewPasswordEditPassword;

            // Type '********' in 'Confirm New Password' text box
            uIConfirmNewPasswordEdit.Password = this.ChangePasswordFromAdminEmployeeWithSymbolParams.UIConfirmNewPasswordEditPassword;
        }
        
        /// <summary>
        /// PressAdminEmployeeChangePasswordSaveButton
        /// </summary>
        public void PressAdminEmployeeChangePasswordSaveButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmaincmdoButton = this.UIChangePasswordWindowWindow.UIChangePasswordDocument2.UICtl00contentmaincmdoButton;
            #endregion

            // Click 'ctl00$contentmain$cmdok' button
            Mouse.Click(uICtl00contentmaincmdoButton, new Point(23, 20));
        }
        
        /// <summary>
        /// PressAdminEmployeeChangePasswordCancelButton
        /// </summary>
        public void PressAdminEmployeeChangePasswordCancelButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmaincmdcButton = this.UIChangePasswordWindowWindow.UIChangePasswordDocument2.UICtl00contentmaincmdcButton;
            #endregion

            // Click 'ctl00$contentmain$cmdcancel' button
            Mouse.Click(uICtl00contentmaincmdcButton, new Point(40, 7));
        }
        
        /// <summary>
        /// ValidateSymbolPolicyInMyDetails - Use 'ValidateSymbolPolicyInMyDetailsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateSymbolPolicyInMyDetails()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument.UIMaindivPane.UIYournewpasswordmustcCustom;
            #endregion

            // Verify that 'Your new password must contain an approv' custom control's property 'InnerText' equals 'Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)'
            Assert.AreEqual(this.ValidateSymbolPolicyInMyDetailsExpectedValues.UIYournewpasswordmustcCustomInnerText, uIYournewpasswordmustcCustom.InnerText);
        }
        
        /// <summary>
        /// ValidateSymbolPolicyInAdminEmployee - Use 'ValidateSymbolPolicyInAdminEmployeeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateSymbolPolicyInAdminEmployee()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument3.UIMaindivPane.UIYournewpasswordmustcCustom;
            #endregion

            // Verify that 'Your new password must contain an approv' custom control's property 'InnerText' equals 'Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)'
            Assert.AreEqual(this.ValidateSymbolPolicyInAdminEmployeeExpectedValues.UIYournewpasswordmustcCustomInnerText, uIYournewpasswordmustcCustom.InnerText);
        }
        
        /// <summary>
        /// ValidatePasswordDoesNotConformInAdminEmployee - Use 'ValidatePasswordDoesNotConformInAdminEmployeeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordDoesNotConformInAdminEmployee()
        {
            #region Variable Declarations
            HtmlSpan uICtl00_contentmain_lbPane = this.UIChangePasswordWindowWindow.UIChangePasswordDocument3.UICtl00_contentmain_lbPane;
            #endregion

            // Verify that 'ctl00_contentmain_lblmsg' pane's property 'DisplayText' contains 'The password could not be changed as it does not conform to the password policy.'
            StringAssert.Contains(uICtl00_contentmain_lbPane.DisplayText, this.ValidatePasswordDoesNotConformInAdminEmployeeExpectedValues.UICtl00_contentmain_lbPaneDisplayText);
        }
        
        /// <summary>
        /// ValidateSymbolPolicyInLogonScreen - Use 'ValidateSymbolPolicyInLogonScreenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateSymbolPolicyInLogonScreen()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument4.UIMaindivPane.UIYournewpasswordmustcCustom;
            #endregion

            // Verify that 'Your new password must contain an approv' custom control's property 'InnerText' equals 'Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)'
            Assert.AreEqual(this.ValidateSymbolPolicyInLogonScreenExpectedValues.UIYournewpasswordmustcCustomInnerText, uIYournewpasswordmustcCustom.InnerText);
        }
        
        /// <summary>
        /// ChangePasswordFromLogonPageWithSymbol - Use 'ChangePasswordFromLogonPageWithSymbolParams' to pass parameters into this method.
        /// </summary>
        public void ChangePasswordFromLogonPageWithSymbol()
        {
            #region Variable Declarations
            HtmlEdit uINewPasswordEdit = this.UIChangePasswordWindowWindow.UIChangePasswordDocument4.UINewPasswordEdit;
            HtmlEdit uIConfirmNewPasswordEdit = this.UIChangePasswordWindowWindow.UIChangePasswordDocument4.UIConfirmNewPasswordEdit;
            #endregion

            // Type '********' in 'New Password' text box
            uINewPasswordEdit.Password = this.ChangePasswordFromLogonPageWithSymbolParams.UINewPasswordEditPassword;

            // Type '********' in 'Confirm New Password' text box
            uIConfirmNewPasswordEdit.Password = this.ChangePasswordFromLogonPageWithSymbolParams.UIConfirmNewPasswordEditPassword;
        }
        
        /// <summary>
        /// PressLogonPageChangePasswordSaveButton
        /// </summary>
        public void PressLogonPageChangePasswordSaveButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmaincmdoButton = this.UIChangePasswordWindowWindow.UIChangePasswordDocument4.UICtl00contentmaincmdoButton;
            #endregion

            // Click 'ctl00$contentmain$cmdok' button
            Mouse.Click(uICtl00contentmaincmdoButton, new Point(25, 18));
        }
        
        /// <summary>
        /// ValidatePasswordDoesNotConformInLogonPage - Use 'ValidatePasswordDoesNotConformInLogonPageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordDoesNotConformInLogonPage()
        {
            #region Variable Declarations
            HtmlSpan uICtl00_contentmain_lbPane = this.UIChangePasswordWindowWindow.UIChangePasswordDocument4.UICtl00_contentmain_lbPane;
            #endregion

            // Verify that 'ctl00_contentmain_lblmsg' pane's property 'DisplayText' contains 'The password could not be changed as it does not conform to the password policy.'
            StringAssert.Contains(uICtl00_contentmain_lbPane.DisplayText, this.ValidatePasswordDoesNotConformInLogonPageExpectedValues.UICtl00_contentmain_lbPaneDisplayText);
        }
        
        /// <summary>
        /// PressLogonPageChangePasswordCancelButton
        /// </summary>
        public void PressLogonPageChangePasswordCancelButton()
        {
            #region Variable Declarations
            HtmlInputButton uICtl00contentmaincmdcButton = this.UIChangePasswordWindowWindow.UIChangePasswordDocument4.UICtl00contentmaincmdcButton;
            #endregion

            // Click 'ctl00$contentmain$cmdcancel' button
            Mouse.Click(uICtl00contentmaincmdcButton, new Point(37, 15));
        }
        
        /// <summary>
        /// ValidateNumbersPolicyInMyDetails - Use 'ValidateNumbersPolicyInMyDetailsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateNumbersPolicyInMyDetails()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom1 = this.UIChangePasswordWindowWindow.UIChangePasswordDocument.UIMaindivPane.UIYournewpasswordmustcCustom1;
            #endregion

            // Verify that 'Your new password must contain a number.' custom control's property 'InnerText' equals 'Your new password must contain a number.'
            Assert.AreEqual(this.ValidateNumbersPolicyInMyDetailsExpectedValues.UIYournewpasswordmustcCustom1InnerText, uIYournewpasswordmustcCustom1.InnerText);
        }
        
        /// <summary>
        /// ValidateNumbersPolicyInAdminEmployee - Use 'ValidateNumbersPolicyInAdminEmployeeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateNumbersPolicyInAdminEmployee()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom1 = this.UIChangePasswordWindowWindow.UIChangePasswordDocument3.UIMaindivPane.UIYournewpasswordmustcCustom1;
            #endregion

            // Verify that 'Your new password must contain a number.' custom control's property 'InnerText' equals 'Your new password must contain a number.'
            Assert.AreEqual(this.ValidateNumbersPolicyInAdminEmployeeExpectedValues.UIYournewpasswordmustcCustom1InnerText, uIYournewpasswordmustcCustom1.InnerText);
        }
        
        /// <summary>
        /// ValidateNumbersPolicyInLogonPage - Use 'ValidateNumbersPolicyInLogonPageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateNumbersPolicyInLogonPage()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument5.UIMaindivPane.UIYournewpasswordmustcCustom;
            #endregion

            // Verify that 'Your new password must contain a number.' custom control's property 'InnerText' equals 'Your new password must contain a number.'
            Assert.AreEqual(this.ValidateNumbersPolicyInLogonPageExpectedValues.UIYournewpasswordmustcCustomInnerText, uIYournewpasswordmustcCustom.InnerText);
        }
        
        /// <summary>
        /// ValidateUpperCasePolicyInMyDetails - Use 'ValidateUpperCasePolicyInMyDetailsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUpperCasePolicyInMyDetails()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom2 = this.UIChangePasswordWindowWindow.UIChangePasswordDocument.UIMaindivPane.UIYournewpasswordmustcCustom2;
            #endregion

            // Verify that 'Your new password must contain an upper' custom control's property 'InnerText' equals 'Your new password must contain an upper case character.'
            Assert.AreEqual(this.ValidateUpperCasePolicyInMyDetailsExpectedValues.UIYournewpasswordmustcCustom2InnerText, uIYournewpasswordmustcCustom2.InnerText);
        }
        
        /// <summary>
        /// ValidateUpperCasePolicyInAdminEmployee - Use 'ValidateUpperCasePolicyInAdminEmployeeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUpperCasePolicyInAdminEmployee()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom2 = this.UIChangePasswordWindowWindow.UIChangePasswordDocument3.UIMaindivPane.UIYournewpasswordmustcCustom2;
            #endregion

            // Verify that 'Your new password must contain an upper' custom control's property 'InnerText' equals 'Your new password must contain an upper case character.'
            Assert.AreEqual(this.ValidateUpperCasePolicyInAdminEmployeeExpectedValues.UIYournewpasswordmustcCustom2InnerText, uIYournewpasswordmustcCustom2.InnerText);
        }
        
        /// <summary>
        /// ValidateUpperCasePolicyInLogonPage - Use 'ValidateUpperCasePolicyInLogonPageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUpperCasePolicyInLogonPage()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustcCustom1 = this.UIChangePasswordWindowWindow.UIChangePasswordDocument5.UIMaindivPane.UIYournewpasswordmustcCustom1;
            #endregion

            // Verify that 'Your new password must contain an upper' custom control's property 'InnerText' equals 'Your new password must contain an upper case character.'
            Assert.AreEqual(this.ValidateUpperCasePolicyInLogonPageExpectedValues.UIYournewpasswordmustcCustom1InnerText, uIYournewpasswordmustcCustom1.InnerText);
        }
        
        /// <summary>
        /// PasswordSettingsSetComplexityToMustContainAll - Use 'PasswordSettingsSetComplexityToMustContainAllParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetComplexityToMustContainAll()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordlengthComboBox;
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainaCheckBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainnCheckBox;
            #endregion

            // Select 'Password can be any length' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetComplexityToMustContainAllParams.UIPasswordlengthComboBoxSelectedItem;

            // Select 'Password must contain upper case letters' check box
            uIPasswordmustcontainuCheckBox.Checked = this.PasswordSettingsSetComplexityToMustContainAllParams.UIPasswordmustcontainuCheckBoxChecked;

            // Select 'Password must contain a symbol character' check box
            uIPasswordmustcontainaCheckBox.Checked = this.PasswordSettingsSetComplexityToMustContainAllParams.UIPasswordmustcontainaCheckBoxChecked;

            // Select 'Password must contain numbers' check box
            uIPasswordmustcontainnCheckBox.Checked = this.PasswordSettingsSetComplexityToMustContainAllParams.UIPasswordmustcontainnCheckBoxChecked;
        }
        
        /// <summary>
        /// ValidatePasswordSettingsComplexityContainsAll - Use 'ValidatePasswordSettingsComplexityContainsAllExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsComplexityContainsAll()
        {
            #region Variable Declarations
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainnCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainaCheckBox;
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordlengthComboBox;
            #endregion

            // Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsAllExpectedValues.UIPasswordmustcontainuCheckBoxChecked, uIPasswordmustcontainuCheckBox.Checked);

            // Verify that 'Password must contain numbers' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsAllExpectedValues.UIPasswordmustcontainnCheckBoxChecked, uIPasswordmustcontainnCheckBox.Checked);

            // Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'True'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsAllExpectedValues.UIPasswordmustcontainaCheckBoxChecked, uIPasswordmustcontainaCheckBox.Checked);

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
            Assert.AreEqual(this.ValidatePasswordSettingsComplexityContainsAllExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);
        }
        
        /// <summary>
        /// PasswordSettingsSetLengthToEqualTo - Use 'PasswordSettingsSetLengthToEqualToParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetLengthToEqualTo()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordlengthComboBox;
            HtmlEdit uIMinimumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIMinimumlengthEdit1;
            #endregion

            // Select 'Password must be equal to' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetLengthToEqualToParams.UIPasswordlengthComboBoxSelectedItem;

            // Type '6' in 'Minimum length' text box
            uIMinimumlengthEdit1.Text = this.PasswordSettingsSetLengthToEqualToParams.UIMinimumlengthEdit1Text;
        }
        
        /// <summary>
        /// PasswordSettingsSetLengthToGreaterThan - Use 'PasswordSettingsSetLengthToGreaterThanParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetLengthToGreaterThan()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordlengthComboBox;
            HtmlEdit uIMinimumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIMinimumlengthEdit1;
            #endregion

            // Select 'Password must be greater than' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetLengthToGreaterThanParams.UIPasswordlengthComboBoxSelectedItem;

            // Type '6' in 'Minimum length' text box
            uIMinimumlengthEdit1.Text = this.PasswordSettingsSetLengthToGreaterThanParams.UIMinimumlengthEdit1Text;
        }
        
        /// <summary>
        /// PasswordSettingsSetLengthToLessThan - Use 'PasswordSettingsSetLengthToLessThanParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetLengthToLessThan()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordlengthComboBox;
            HtmlEdit uIMinimumlengthEdit = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIMinimumlengthEdit;
            #endregion

            // Select 'Password must be less than' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetLengthToLessThanParams.UIPasswordlengthComboBoxSelectedItem;

            // Type '6' in 'Minimum length' text box
            uIMinimumlengthEdit.Text = this.PasswordSettingsSetLengthToLessThanParams.UIMinimumlengthEditText;
        }
        
        /// <summary>
        /// PasswordSettingsSetLengthToBetween - Use 'PasswordSettingsSetLengthToBetweenParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetLengthToBetween()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordlengthComboBox;
            HtmlEdit uIMinimumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIMinimumlengthEdit1;
            HtmlEdit uIMaximumlengthEdit = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIMaximumlengthEdit;
            #endregion

            // Select 'Password must be between' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetLengthToBetweenParams.UIPasswordlengthComboBoxSelectedItem;

            // Type '6' in 'Minimum length' text box
            uIMinimumlengthEdit1.Text = this.PasswordSettingsSetLengthToBetweenParams.UIMinimumlengthEdit1Text;

            // Type '10' in 'Maximum length' text box
            uIMaximumlengthEdit.Text = this.PasswordSettingsSetLengthToBetweenParams.UIMaximumlengthEditText;
        }
        
        /// <summary>
        /// ValidatePasswordSettingsLengthToBetween - Use 'ValidatePasswordSettingsLengthToBetweenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsLengthToBetween()
        {
            #region Variable Declarations
            HtmlEdit uIMinimumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIMinimumlengthEdit1;
            HtmlEdit uIMaximumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIMaximumlengthEdit1;
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            #endregion

            // Verify that 'Minimum length' text box's property 'Text' equals '6'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToBetweenExpectedValues.UIMinimumlengthEdit1Text, uIMinimumlengthEdit1.Text);

            // Verify that 'Maximum length' text box's property 'Text' equals '10'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToBetweenExpectedValues.UIMaximumlengthEdit1Text, uIMaximumlengthEdit1.Text);

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be between'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToBetweenExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);
        }
        
        /// <summary>
        /// ValidatePasswordSettingsLengthToEqualTo - Use 'ValidatePasswordSettingsLengthToEqualToExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsLengthToEqualTo()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlEdit uIMinimumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIMinimumlengthEdit1;
            #endregion

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be equal to'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToEqualToExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);

            // Verify that 'Minimum length' text box's property 'Text' equals '6'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToEqualToExpectedValues.UIMinimumlengthEdit1Text, uIMinimumlengthEdit1.Text);
        }
        
        /// <summary>
        /// ValidatePasswordSettingsLengthToGreaterThan - Use 'ValidatePasswordSettingsLengthToGreaterThanExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsLengthToGreaterThan()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlEdit uIMinimumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIMinimumlengthEdit1;
            #endregion

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be greater than'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToGreaterThanExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);

            // Verify that 'Minimum length' text box's property 'Text' equals '6'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToGreaterThanExpectedValues.UIMinimumlengthEdit1Text, uIMinimumlengthEdit1.Text);
        }
        
        /// <summary>
        /// ValidatePasswordSettingsLengthToLessThan - Use 'ValidatePasswordSettingsLengthToLessThanExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsLengthToLessThan()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            HtmlEdit uIMinimumlengthEdit1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIMinimumlengthEdit1;
            #endregion

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be less than'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToLessThanExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);

            // Verify that 'Minimum length' text box's property 'Text' equals '6'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToLessThanExpectedValues.UIMinimumlengthEdit1Text, uIMinimumlengthEdit1.Text);
        }
        
        /// <summary>
        /// PasswordSettingsSetLengthToAny - Use 'PasswordSettingsSetLengthToAnyParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetLengthToAny()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            #endregion

            // Select 'Password can be any length' in 'Password length' combo box
            uIPasswordlengthComboBox.SelectedItem = this.PasswordSettingsSetLengthToAnyParams.UIPasswordlengthComboBoxSelectedItem;
        }
        
        /// <summary>
        /// ValidatePasswordSettingsLengthToAny - Use 'ValidatePasswordSettingsLengthToAnyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordSettingsLengthToAny()
        {
            #region Variable Declarations
            HtmlComboBox uIPasswordlengthComboBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordlengthComboBox;
            #endregion

            // Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
            Assert.AreEqual(this.ValidatePasswordSettingsLengthToAnyExpectedValues.UIPasswordlengthComboBoxSelectedItem, uIPasswordlengthComboBox.SelectedItem);
        }
        
        /// <summary>
        /// PasswordSettingsSetComplexityToNone - Use 'PasswordSettingsSetComplexityToNoneParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSetComplexityToNone()
        {
            #region Variable Declarations
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainaCheckBox;
            HtmlCheckBox uIPasswordmustcontainnCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIPasswordmustcontainnCheckBox;
            #endregion

            // Clear 'Password must contain upper case letters' check box
            uIPasswordmustcontainuCheckBox.Checked = this.PasswordSettingsSetComplexityToNoneParams.UIPasswordmustcontainuCheckBoxChecked;

            // Clear 'Password must contain a symbol character' check box
            uIPasswordmustcontainaCheckBox.Checked = this.PasswordSettingsSetComplexityToNoneParams.UIPasswordmustcontainaCheckBoxChecked;

            // Clear 'Password must contain numbers' check box
            uIPasswordmustcontainnCheckBox.Checked = this.PasswordSettingsSetComplexityToNoneParams.UIPasswordmustcontainnCheckBoxChecked;
        }
        
        /// <summary>
        /// PasswordSettingsSelectAllComplexity - Use 'PasswordSettingsSelectAllComplexityParams' to pass parameters into this method.
        /// </summary>
        public void PasswordSettingsSelectAllComplexity()
        {
            #region Variable Declarations
            HtmlCheckBox uIPasswordmustcontainuCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainuCheckBox;
            HtmlCheckBox uIPasswordmustcontainaCheckBox1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainaCheckBox1;
            HtmlCheckBox uIPasswordmustcontainnCheckBox1 = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument1.UIPasswordmustcontainnCheckBox1;
            #endregion

            // Select 'Password must contain upper case letters' check box
            uIPasswordmustcontainuCheckBox.Checked = this.PasswordSettingsSelectAllComplexityParams.UIPasswordmustcontainuCheckBoxChecked;

            // Select 'Password must contain a symbol character' check box
            uIPasswordmustcontainaCheckBox1.Checked = this.PasswordSettingsSelectAllComplexityParams.UIPasswordmustcontainaCheckBox1Checked;

            // Select 'Password must contain numbers' check box
            uIPasswordmustcontainnCheckBox1.Checked = this.PasswordSettingsSelectAllComplexityParams.UIPasswordmustcontainnCheckBox1Checked;
        }
        
        /// <summary>
        /// ValidateLengthPolicyInMyDetails - Use 'ValidateLengthPolicyInMyDetailsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateLengthPolicyInMyDetails()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustbCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument1.UIMaindivPane.UIYournewpasswordmustbCustom;
            #endregion

            // Verify that 'Your new password must be 6 characters i' custom control's property 'InnerText' equals 'Your new password must be 6 characters in length.'
            Assert.AreEqual(this.ValidateLengthPolicyInMyDetailsExpectedValues.UIYournewpasswordmustbCustomInnerText, uIYournewpasswordmustbCustom.InnerText);
        }
        
        /// <summary>
        /// ValidateLengthPolicyInAdminEmployee - Use 'ValidateLengthPolicyInAdminEmployeeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateLengthPolicyInAdminEmployee()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustbCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument3.UIMaindivPane.UIYournewpasswordmustbCustom;
            #endregion

            // Verify that 'Your new password must be 6 characters i' custom control's property 'InnerText' equals 'Your new password must be 6 characters in length.'
            Assert.AreEqual(this.ValidateLengthPolicyInAdminEmployeeExpectedValues.UIYournewpasswordmustbCustomInnerText, uIYournewpasswordmustbCustom.InnerText);
        }
        
        /// <summary>
        /// NavigateToHomePage
        /// </summary>
        public void NavigateToHomePage()
        {
            #region Variable Declarations
            HtmlHyperlink uIHomePageHyperlink = this.UIWelcometoframework20Window.UITailoringOptionsDocument1.UICtl00_SiteMapPath1Pane.UIHomePageHyperlink;
            #endregion

            // Click 'Home Page' link
            Mouse.Click(uIHomePageHyperlink, new Point(35, 8));
        }
        
        /// <summary>
        /// ValidatePreviousPasswordPolicy - Use 'ValidatePreviousPasswordPolicyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePreviousPasswordPolicy()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordcannoCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument1.UIMaindivPane.UIYournewpasswordcannoCustom;
            #endregion

            // Verify that 'Your new password cannot be any of the p' custom control's property 'InnerText' equals 'Your new password cannot be any of the previous 2 passwords you have used.'
            Assert.AreEqual(this.ValidatePreviousPasswordPolicyExpectedValues.UIYournewpasswordcannoCustomInnerText, uIYournewpasswordcannoCustom.InnerText);
        }
        
        /// <summary>
        /// NavigateToGeneralOptionsFromEmployeeHomePage
        /// </summary>
        public void NavigateToGeneralOptionsFromEmployeeHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIChangeAdministrativePane = this.UIWelcometoexpensesWinWindow.UIWelcometoexpensesDocument.UIChangeAdministrativePane;
            HtmlSpan uITailoringPane = this.UIWelcometoexpensesWinWindow.UIChangeAdministrativeDocument.UITailoringPane;
            HtmlSpan uIGeneralOptionsPane = this.UIWelcometoexpensesWinWindow.UITailoringDocument.UIGeneralOptionsPane;
            #endregion

            // Click 'Change Administrative Settings' pane
            Mouse.Click(uIChangeAdministrativePane, new Point(126, 18));

            // Click 'Tailoring' pane
            Mouse.Click(uITailoringPane, new Point(31, 17));

            // Click 'General Options' pane
            Mouse.Click(uIGeneralOptionsPane, new Point(45, 19));
        }
        
        /// <summary>
        /// NavigateToGeneralOptionsFromExpensesTailoringPage
        /// </summary>
        public void NavigateToGeneralOptionsFromExpensesTailoringPage()
        {
            #region Variable Declarations
            HtmlSpan uIGeneralOptionsPane = this.UIWelcometoexpensesWinWindow.UITailoringDocument.UIGeneralOptionsPane;
            #endregion

            // Click 'General Options' pane
            Mouse.Click(uIGeneralOptionsPane, new Point(79, 8));
        }
        
        /// <summary>
        /// NavigateToExpensesHomePage
        /// </summary>
        public void NavigateToExpensesHomePage()
        {
            #region Variable Declarations
            HtmlHyperlink uIHomeHyperlink = this.UIWelcometoexpensesWinWindow.UITailoringDocument.UICtl00_SiteMapPath1Pane.UIHomeHyperlink;
            #endregion

            // Click 'Home' link
            Mouse.Click(uIHomeHyperlink, new Point(16, 11));
        }
        
        /// <summary>
        /// NavigateToAdminEmployeeChangePasswordFromExpensesHomePage - Use 'NavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams' to pass parameters into this method.
        /// </summary>
        public void NavigateToAdminEmployeeChangePasswordFromExpensesHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIManagebasicinformatiPane = this.UIWelcometoexpensesWinWindow.UIWelcometoexpensesDocument.UIMenuitem8Table.UIManagebasicinformatiPane;
            HtmlCell uIChangeAdministrativeCell = this.UIWelcometoexpensesWinWindow.UIWelcometoexpensesDocument.UIMenuitem8Table.UIChangeAdministrativeCell;
            HtmlSpan uIChangeAdministrativePane = this.UIWelcometoexpensesWinWindow.UIWelcometoexpensesDocument.UIChangeAdministrativePane;
            HtmlImage uIIcons48shadowuser1_pImage = this.UIWelcometoexpensesWinWindow.UIChangeAdministrativeDocument.UIIcons48shadowuser1_pImage;
            HtmlSpan uIUserManagementPane = this.UIWelcometoexpensesWinWindow.UIChangeAdministrativeDocument.UIUserManagementPane;
            HtmlCell uISignoffGroupsAGroupdCell = this.UIWelcometoexpensesWinWindow1.UIUserManagementDocument.UIMenuitem2Table.UISignoffGroupsAGroupdCell;
            HtmlSpan uIAGroupdeterminesthesPane = this.UIWelcometoexpensesWinWindow1.UIUserManagementDocument.UIMenuitem2Table.UIAGroupdeterminesthesPane;
            HtmlCell uIEmployeesAddeditordeCell = this.UIWelcometoexpensesWinWindow1.UIUserManagementDocument.UIMenuitem3Table.UIEmployeesAddeditordeCell;
            HtmlSpan uIEmployeesPane = this.UIWelcometoexpensesWinWindow1.UIUserManagementDocument.UIEmployeesPane;
            HtmlEdit uIUsernameEdit = this.UIWelcometoexpensesWinWindow2.UIHttpstestingselexpenDocument.UIUsernameEdit;
            HtmlInputButton uICtl00contentmaincmdoButton = this.UIWelcometoexpensesWinWindow2.UIHttpstestingselexpenDocument.UICtl00contentmaincmdoButton;
            HtmlImage uIChangePasswordImage = this.UIWelcometoexpensesWinWindow3.UIEmployeesDocument.UITbl_gridEmployees_53Row.UIChangePasswordImage;
            #endregion

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'Manage basic information such as Expense' pane at (286, 31)
            Mouse.Hover(uIManagebasicinformatiPane, new Point(286, 31));

            // Mouse hover 'Change Administrative Settings  Manage' cell at (134, 2)
            Mouse.Hover(uIChangeAdministrativeCell, new Point(134, 2));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Change Administrative Settings' pane
            Mouse.Click(uIChangeAdministrativePane, new Point(134, 13));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover '/icons/48/shadow/user1_preferences.gif' image at (43, 27)
            Mouse.Hover(uIIcons48shadowuser1_pImage, new Point(43, 27));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'User Management' pane
            Mouse.Click(uIUserManagementPane, new Point(20, 8));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'Signoff Groups  A Group determines the' cell at (417, 15)
            Mouse.Hover(uISignoffGroupsAGroupdCell, new Point(417, 15));

            // Mouse hover 'A Group determines the stages a claim ha' pane at (443, 2)
            Mouse.Hover(uIAGroupdeterminesthesPane, new Point(443, 2));

            // Mouse hover 'Employees  Add, edit or delete employe' cell at (22, 29)
            Mouse.Hover(uIEmployeesAddeditordeCell, new Point(22, 29));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Employees' pane
            Mouse.Click(uIEmployeesPane, new Point(33, 21));

            // Type 'james' in 'Username' text box
            uIUsernameEdit.Text = this.NavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams.UIUsernameEditText;

            // Click 'ctl00$contentmain$cmdok' button
            Mouse.Click(uICtl00contentmaincmdoButton, new Point(21, 19));

            // Click 'Change Password' image
            Mouse.Click(uIChangePasswordImage, new Point(7, 5));
        }
        
        /// <summary>
        /// NavigateToMyDetailsChangePasswordFromExpensesHomePage
        /// </summary>
        public void NavigateToMyDetailsChangePasswordFromExpensesHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIMyDetailsPane = this.UIWelcometoexpensesWinWindow.UIWelcometoexpensesDocument.UIMyDetailsPane;
            HtmlSpan uIChangeMyDetailsPane = this.UIWelcometoexpensesWinWindow4.UIMyDetailsDocument.UIChangeMyDetailsPane;
            HtmlHyperlink uIChangePasswordHyperlink = this.UIWelcometoexpensesWinWindow5.UIMyDetailsDocument1.UIChangePasswordHyperlink;
            #endregion

            // Click 'My Details' pane
            Mouse.Click(uIMyDetailsPane, new Point(43, 19));

            // Click 'Change My Details' pane
            Mouse.Click(uIChangeMyDetailsPane, new Point(92, 21));

            // Click 'Change Password' link
            Mouse.Click(uIChangePasswordHyperlink, new Point(29, 11));
        }
        
        /// <summary>
        /// NavigateToSelectEmployeeFromExpensesHomePage
        /// </summary>
        public void NavigateToSelectEmployeeFromExpensesHomePage()
        {
            #region Variable Declarations
            HtmlSpan uIChangeAdministrativePane = this.UIWelcometoexpensesWinWindow.UIWelcometoexpensesDocument.UIChangeAdministrativePane;
            HtmlSpan uIUserManagementPane1 = this.UIWelcometoexpensesWinWindow.UIChangeAdministrativeDocument.UIUserManagementPane1;
            HtmlCell uIEmployeesAddeditordeCell = this.UIWelcometoexpensesWinWindow1.UIUserManagementDocument.UIMenuitem3Table.UIEmployeesAddeditordeCell;
            #endregion

            // Click 'Change Administrative Settings' pane
            Mouse.Click(uIChangeAdministrativePane, new Point(178, 15));

            // Click 'User Management' pane
            Mouse.Click(uIUserManagementPane1, new Point(49, 9));

            // Click 'Employees  Add, edit or delete employe' cell
            Mouse.Click(uIEmployeesAddeditordeCell, new Point(53, 25));
        }
        
        /// <summary>
        /// ValidateExpensesLogonAfterPasswordChange - Use 'ValidateExpensesLogonAfterPasswordChangeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateExpensesLogonAfterPasswordChange()
        {
            #region Variable Declarations
            HtmlSpan uIHomePane1 = this.UIWelcometoexpensesWinWindow.UIWelcometoexpensesDocument.UIHomePane.UIHomePane1;
            #endregion

            // Verify that 'Home' pane's property 'InnerText' equals 'Home'
            Assert.AreEqual(this.ValidateExpensesLogonAfterPasswordChangeExpectedValues.UIHomePane1InnerText, uIHomePane1.InnerText);
        }
        
        /// <summary>
        /// ValidateLengthPolicyInLogon - Use 'ValidateLengthPolicyInLogonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateLengthPolicyInLogon()
        {
            #region Variable Declarations
            HtmlCustom uIYournewpasswordmustbCustom = this.UIChangePasswordWindowWindow.UIChangePasswordDocument6.UIMaindivPane.UIYournewpasswordmustbCustom;
            #endregion

            // Verify that 'Your new password must be greater than 6' custom control's property 'InnerText' equals 'Your new password must be greater than 6 characters in length.'
            Assert.AreEqual(this.ValidateLengthPolicyInLogonExpectedValues.UIYournewpasswordmustbCustomInnerText, uIYournewpasswordmustbCustom.InnerText);
        }
        
        /// <summary>
        /// ValidateChangePasswordPageFromLogon - Use 'ValidateChangePasswordPageFromLogonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateChangePasswordPageFromLogon()
        {
            #region Variable Declarations
            HtmlDiv uIChangePasswordPane = this.UIChangePasswordWindowWindow.UIChangePasswordDocument4.UIChangePasswordPane;
            #endregion

            // Verify that 'Change Password' pane's property 'InnerText' equals 'Change Password'
            Assert.AreEqual(this.ValidateChangePasswordPageFromLogonExpectedValues.UIChangePasswordPaneInnerText, uIChangePasswordPane.InnerText);
        }
        
        /// <summary>
        /// ClickOnChangePasswordFromMyDetails
        /// </summary>
        public void ClickOnChangePasswordFromMyDetails()
        {
            #region Variable Declarations
            HtmlHyperlink uIChangePasswordHyperlink = this.UIWelcometoframework20Window.UIMyDetailsDocument.UIChangePasswordHyperlink;
            #endregion

            // Click 'Change Password' link
            Mouse.Click(uIChangePasswordHyperlink, new Point(57, 6));
        }
        
        /// <summary>
        /// ClickOnChangePasswordFromAdminEmployee - Use 'ClickOnChangePasswordFromAdminEmployeeParams' to pass parameters into this method.
        /// </summary>
        public void ClickOnChangePasswordFromAdminEmployee()
        {
            #region Variable Declarations
            HtmlEdit uIUsernameEdit = this.UIWelcometoframework20Window.UIHttpsfwtestselexpensDocument.UIUsernameEdit;
            HtmlInputButton uICtl00contentmaincmdoButton = this.UIWelcometoframework20Window.UIHttpsfwtestselexpensDocument.UICtl00contentmaincmdoButton;
            HtmlImage uIChangePasswordImage = this.UIEmployeesWindowsInteWindow.UIEmployeesDocument.UITbl_gridEmployees_14Row.UIChangePasswordImage;
            #endregion

            // Type 'CodedUIAdmin' in 'Username' text box
            uIUsernameEdit.Text = this.ClickOnChangePasswordFromAdminEmployeeParams.UIUsernameEditText;

            // Click 'ctl00$contentmain$cmdok' button
            Mouse.Click(uICtl00contentmaincmdoButton, new Point(23, 13));

            // Click 'Change Password' image
            Mouse.Click(uIChangePasswordImage, new Point(7, 5));
        }
        
        /// <summary>
        /// ValidateLogonAfterPasswordChange - Use 'ValidateLogonAfterPasswordChangeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateLogonAfterPasswordChange()
        {
            #region Variable Declarations
            HtmlSpan uIHomePane1 = this.UIFrameworkfromSoftwarWindow.UIFrameworkfromSoftwarDocument.UIHomePane.UIHomePane1;
            #endregion

            // Verify that 'Home' pane's property 'InnerText' equals 'Home'
            Assert.AreEqual(this.ValidateLogonAfterPasswordChangeExpectedValues.UIHomePane1InnerText, uIHomePane1.InnerText);
        }
        
        /// <summary>
        /// ValidatePasswordDoesNotConformInMyDetails - Use 'ValidatePasswordDoesNotConformInMyDetailsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePasswordDoesNotConformInMyDetails()
        {
            #region Variable Declarations
            HtmlSpan uICtl00_contentmain_lbPane = this.UIChangePasswordWindowWindow.UIChangePasswordDocument7.UICtl00_contentmain_lbPane;
            #endregion

            // Verify that 'ctl00_contentmain_lblmsg' pane's property 'InnerText' contains 'The password could not be changed as it does not conform to the password policy.'
            StringAssert.Contains(uICtl00_contentmain_lbPane.InnerText, this.ValidatePasswordDoesNotConformInMyDetailsExpectedValues.UICtl00_contentmain_lbPaneInnerText);
        }
        
        #region Properties
        public virtual PasswordSettingsSetComplexityToOnlyMustContainSymbolParams PasswordSettingsSetComplexityToOnlyMustContainSymbolParams
        {
            get
            {
                if ((this.mPasswordSettingsSetComplexityToOnlyMustContainSymbolParams == null))
                {
                    this.mPasswordSettingsSetComplexityToOnlyMustContainSymbolParams = new PasswordSettingsSetComplexityToOnlyMustContainSymbolParams();
                }
                return this.mPasswordSettingsSetComplexityToOnlyMustContainSymbolParams;
            }
        }
        
        public virtual ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues == null))
                {
                    this.mValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues = new ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues();
                }
                return this.mValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues;
            }
        }
        
        public virtual ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues == null))
                {
                    this.mValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues = new ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues();
                }
                return this.mValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues;
            }
        }
        
        public virtual ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues == null))
                {
                    this.mValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues = new ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues();
                }
                return this.mValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues;
            }
        }
        
        public virtual PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams
        {
            get
            {
                if ((this.mPasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams == null))
                {
                    this.mPasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams = new PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams();
                }
                return this.mPasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams;
            }
        }
        
        public virtual PasswordSettingsSetComplexityToOnlyMustContainNumbersParams PasswordSettingsSetComplexityToOnlyMustContainNumbersParams
        {
            get
            {
                if ((this.mPasswordSettingsSetComplexityToOnlyMustContainNumbersParams == null))
                {
                    this.mPasswordSettingsSetComplexityToOnlyMustContainNumbersParams = new PasswordSettingsSetComplexityToOnlyMustContainNumbersParams();
                }
                return this.mPasswordSettingsSetComplexityToOnlyMustContainNumbersParams;
            }
        }
        
        public virtual PasswordSettingsSetNumberOfAttemptsParams PasswordSettingsSetNumberOfAttemptsParams
        {
            get
            {
                if ((this.mPasswordSettingsSetNumberOfAttemptsParams == null))
                {
                    this.mPasswordSettingsSetNumberOfAttemptsParams = new PasswordSettingsSetNumberOfAttemptsParams();
                }
                return this.mPasswordSettingsSetNumberOfAttemptsParams;
            }
        }
        
        public virtual PasswordSettingsSetExpiryPeriodParams PasswordSettingsSetExpiryPeriodParams
        {
            get
            {
                if ((this.mPasswordSettingsSetExpiryPeriodParams == null))
                {
                    this.mPasswordSettingsSetExpiryPeriodParams = new PasswordSettingsSetExpiryPeriodParams();
                }
                return this.mPasswordSettingsSetExpiryPeriodParams;
            }
        }
        
        public virtual PasswordSettingsSetPreviousNotPermittedPasswordsParams PasswordSettingsSetPreviousNotPermittedPasswordsParams
        {
            get
            {
                if ((this.mPasswordSettingsSetPreviousNotPermittedPasswordsParams == null))
                {
                    this.mPasswordSettingsSetPreviousNotPermittedPasswordsParams = new PasswordSettingsSetPreviousNotPermittedPasswordsParams();
                }
                return this.mPasswordSettingsSetPreviousNotPermittedPasswordsParams;
            }
        }
        
        public virtual ChangePasswordFromMyDetailsWithSymbolParams ChangePasswordFromMyDetailsWithSymbolParams
        {
            get
            {
                if ((this.mChangePasswordFromMyDetailsWithSymbolParams == null))
                {
                    this.mChangePasswordFromMyDetailsWithSymbolParams = new ChangePasswordFromMyDetailsWithSymbolParams();
                }
                return this.mChangePasswordFromMyDetailsWithSymbolParams;
            }
        }
        
        public virtual NavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams NavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams
        {
            get
            {
                if ((this.mNavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams == null))
                {
                    this.mNavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams = new NavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams();
                }
                return this.mNavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams;
            }
        }
        
        public virtual ChangePasswordFromAdminEmployeeWithSymbolParams ChangePasswordFromAdminEmployeeWithSymbolParams
        {
            get
            {
                if ((this.mChangePasswordFromAdminEmployeeWithSymbolParams == null))
                {
                    this.mChangePasswordFromAdminEmployeeWithSymbolParams = new ChangePasswordFromAdminEmployeeWithSymbolParams();
                }
                return this.mChangePasswordFromAdminEmployeeWithSymbolParams;
            }
        }
        
        public virtual ValidateSymbolPolicyInMyDetailsExpectedValues ValidateSymbolPolicyInMyDetailsExpectedValues
        {
            get
            {
                if ((this.mValidateSymbolPolicyInMyDetailsExpectedValues == null))
                {
                    this.mValidateSymbolPolicyInMyDetailsExpectedValues = new ValidateSymbolPolicyInMyDetailsExpectedValues();
                }
                return this.mValidateSymbolPolicyInMyDetailsExpectedValues;
            }
        }
        
        public virtual ValidateSymbolPolicyInAdminEmployeeExpectedValues ValidateSymbolPolicyInAdminEmployeeExpectedValues
        {
            get
            {
                if ((this.mValidateSymbolPolicyInAdminEmployeeExpectedValues == null))
                {
                    this.mValidateSymbolPolicyInAdminEmployeeExpectedValues = new ValidateSymbolPolicyInAdminEmployeeExpectedValues();
                }
                return this.mValidateSymbolPolicyInAdminEmployeeExpectedValues;
            }
        }
        
        public virtual ValidatePasswordDoesNotConformInAdminEmployeeExpectedValues ValidatePasswordDoesNotConformInAdminEmployeeExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordDoesNotConformInAdminEmployeeExpectedValues == null))
                {
                    this.mValidatePasswordDoesNotConformInAdminEmployeeExpectedValues = new ValidatePasswordDoesNotConformInAdminEmployeeExpectedValues();
                }
                return this.mValidatePasswordDoesNotConformInAdminEmployeeExpectedValues;
            }
        }
        
        public virtual ValidateSymbolPolicyInLogonScreenExpectedValues ValidateSymbolPolicyInLogonScreenExpectedValues
        {
            get
            {
                if ((this.mValidateSymbolPolicyInLogonScreenExpectedValues == null))
                {
                    this.mValidateSymbolPolicyInLogonScreenExpectedValues = new ValidateSymbolPolicyInLogonScreenExpectedValues();
                }
                return this.mValidateSymbolPolicyInLogonScreenExpectedValues;
            }
        }
        
        public virtual ChangePasswordFromLogonPageWithSymbolParams ChangePasswordFromLogonPageWithSymbolParams
        {
            get
            {
                if ((this.mChangePasswordFromLogonPageWithSymbolParams == null))
                {
                    this.mChangePasswordFromLogonPageWithSymbolParams = new ChangePasswordFromLogonPageWithSymbolParams();
                }
                return this.mChangePasswordFromLogonPageWithSymbolParams;
            }
        }
        
        public virtual ValidatePasswordDoesNotConformInLogonPageExpectedValues ValidatePasswordDoesNotConformInLogonPageExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordDoesNotConformInLogonPageExpectedValues == null))
                {
                    this.mValidatePasswordDoesNotConformInLogonPageExpectedValues = new ValidatePasswordDoesNotConformInLogonPageExpectedValues();
                }
                return this.mValidatePasswordDoesNotConformInLogonPageExpectedValues;
            }
        }
        
        public virtual ValidateNumbersPolicyInMyDetailsExpectedValues ValidateNumbersPolicyInMyDetailsExpectedValues
        {
            get
            {
                if ((this.mValidateNumbersPolicyInMyDetailsExpectedValues == null))
                {
                    this.mValidateNumbersPolicyInMyDetailsExpectedValues = new ValidateNumbersPolicyInMyDetailsExpectedValues();
                }
                return this.mValidateNumbersPolicyInMyDetailsExpectedValues;
            }
        }
        
        public virtual ValidateNumbersPolicyInAdminEmployeeExpectedValues ValidateNumbersPolicyInAdminEmployeeExpectedValues
        {
            get
            {
                if ((this.mValidateNumbersPolicyInAdminEmployeeExpectedValues == null))
                {
                    this.mValidateNumbersPolicyInAdminEmployeeExpectedValues = new ValidateNumbersPolicyInAdminEmployeeExpectedValues();
                }
                return this.mValidateNumbersPolicyInAdminEmployeeExpectedValues;
            }
        }
        
        public virtual ValidateNumbersPolicyInLogonPageExpectedValues ValidateNumbersPolicyInLogonPageExpectedValues
        {
            get
            {
                if ((this.mValidateNumbersPolicyInLogonPageExpectedValues == null))
                {
                    this.mValidateNumbersPolicyInLogonPageExpectedValues = new ValidateNumbersPolicyInLogonPageExpectedValues();
                }
                return this.mValidateNumbersPolicyInLogonPageExpectedValues;
            }
        }
        
        public virtual ValidateUpperCasePolicyInMyDetailsExpectedValues ValidateUpperCasePolicyInMyDetailsExpectedValues
        {
            get
            {
                if ((this.mValidateUpperCasePolicyInMyDetailsExpectedValues == null))
                {
                    this.mValidateUpperCasePolicyInMyDetailsExpectedValues = new ValidateUpperCasePolicyInMyDetailsExpectedValues();
                }
                return this.mValidateUpperCasePolicyInMyDetailsExpectedValues;
            }
        }
        
        public virtual ValidateUpperCasePolicyInAdminEmployeeExpectedValues ValidateUpperCasePolicyInAdminEmployeeExpectedValues
        {
            get
            {
                if ((this.mValidateUpperCasePolicyInAdminEmployeeExpectedValues == null))
                {
                    this.mValidateUpperCasePolicyInAdminEmployeeExpectedValues = new ValidateUpperCasePolicyInAdminEmployeeExpectedValues();
                }
                return this.mValidateUpperCasePolicyInAdminEmployeeExpectedValues;
            }
        }
        
        public virtual ValidateUpperCasePolicyInLogonPageExpectedValues ValidateUpperCasePolicyInLogonPageExpectedValues
        {
            get
            {
                if ((this.mValidateUpperCasePolicyInLogonPageExpectedValues == null))
                {
                    this.mValidateUpperCasePolicyInLogonPageExpectedValues = new ValidateUpperCasePolicyInLogonPageExpectedValues();
                }
                return this.mValidateUpperCasePolicyInLogonPageExpectedValues;
            }
        }
        
        public virtual PasswordSettingsSetComplexityToMustContainAllParams PasswordSettingsSetComplexityToMustContainAllParams
        {
            get
            {
                if ((this.mPasswordSettingsSetComplexityToMustContainAllParams == null))
                {
                    this.mPasswordSettingsSetComplexityToMustContainAllParams = new PasswordSettingsSetComplexityToMustContainAllParams();
                }
                return this.mPasswordSettingsSetComplexityToMustContainAllParams;
            }
        }
        
        public virtual ValidatePasswordSettingsComplexityContainsAllExpectedValues ValidatePasswordSettingsComplexityContainsAllExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsComplexityContainsAllExpectedValues == null))
                {
                    this.mValidatePasswordSettingsComplexityContainsAllExpectedValues = new ValidatePasswordSettingsComplexityContainsAllExpectedValues();
                }
                return this.mValidatePasswordSettingsComplexityContainsAllExpectedValues;
            }
        }
        
        public virtual PasswordSettingsSetLengthToEqualToParams PasswordSettingsSetLengthToEqualToParams
        {
            get
            {
                if ((this.mPasswordSettingsSetLengthToEqualToParams == null))
                {
                    this.mPasswordSettingsSetLengthToEqualToParams = new PasswordSettingsSetLengthToEqualToParams();
                }
                return this.mPasswordSettingsSetLengthToEqualToParams;
            }
        }
        
        public virtual PasswordSettingsSetLengthToGreaterThanParams PasswordSettingsSetLengthToGreaterThanParams
        {
            get
            {
                if ((this.mPasswordSettingsSetLengthToGreaterThanParams == null))
                {
                    this.mPasswordSettingsSetLengthToGreaterThanParams = new PasswordSettingsSetLengthToGreaterThanParams();
                }
                return this.mPasswordSettingsSetLengthToGreaterThanParams;
            }
        }
        
        public virtual PasswordSettingsSetLengthToLessThanParams PasswordSettingsSetLengthToLessThanParams
        {
            get
            {
                if ((this.mPasswordSettingsSetLengthToLessThanParams == null))
                {
                    this.mPasswordSettingsSetLengthToLessThanParams = new PasswordSettingsSetLengthToLessThanParams();
                }
                return this.mPasswordSettingsSetLengthToLessThanParams;
            }
        }
        
        public virtual PasswordSettingsSetLengthToBetweenParams PasswordSettingsSetLengthToBetweenParams
        {
            get
            {
                if ((this.mPasswordSettingsSetLengthToBetweenParams == null))
                {
                    this.mPasswordSettingsSetLengthToBetweenParams = new PasswordSettingsSetLengthToBetweenParams();
                }
                return this.mPasswordSettingsSetLengthToBetweenParams;
            }
        }
        
        public virtual ValidatePasswordSettingsLengthToBetweenExpectedValues ValidatePasswordSettingsLengthToBetweenExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsLengthToBetweenExpectedValues == null))
                {
                    this.mValidatePasswordSettingsLengthToBetweenExpectedValues = new ValidatePasswordSettingsLengthToBetweenExpectedValues();
                }
                return this.mValidatePasswordSettingsLengthToBetweenExpectedValues;
            }
        }
        
        public virtual ValidatePasswordSettingsLengthToEqualToExpectedValues ValidatePasswordSettingsLengthToEqualToExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsLengthToEqualToExpectedValues == null))
                {
                    this.mValidatePasswordSettingsLengthToEqualToExpectedValues = new ValidatePasswordSettingsLengthToEqualToExpectedValues();
                }
                return this.mValidatePasswordSettingsLengthToEqualToExpectedValues;
            }
        }
        
        public virtual ValidatePasswordSettingsLengthToGreaterThanExpectedValues ValidatePasswordSettingsLengthToGreaterThanExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsLengthToGreaterThanExpectedValues == null))
                {
                    this.mValidatePasswordSettingsLengthToGreaterThanExpectedValues = new ValidatePasswordSettingsLengthToGreaterThanExpectedValues();
                }
                return this.mValidatePasswordSettingsLengthToGreaterThanExpectedValues;
            }
        }
        
        public virtual ValidatePasswordSettingsLengthToLessThanExpectedValues ValidatePasswordSettingsLengthToLessThanExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsLengthToLessThanExpectedValues == null))
                {
                    this.mValidatePasswordSettingsLengthToLessThanExpectedValues = new ValidatePasswordSettingsLengthToLessThanExpectedValues();
                }
                return this.mValidatePasswordSettingsLengthToLessThanExpectedValues;
            }
        }
        
        public virtual PasswordSettingsSetLengthToAnyParams PasswordSettingsSetLengthToAnyParams
        {
            get
            {
                if ((this.mPasswordSettingsSetLengthToAnyParams == null))
                {
                    this.mPasswordSettingsSetLengthToAnyParams = new PasswordSettingsSetLengthToAnyParams();
                }
                return this.mPasswordSettingsSetLengthToAnyParams;
            }
        }
        
        public virtual ValidatePasswordSettingsLengthToAnyExpectedValues ValidatePasswordSettingsLengthToAnyExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordSettingsLengthToAnyExpectedValues == null))
                {
                    this.mValidatePasswordSettingsLengthToAnyExpectedValues = new ValidatePasswordSettingsLengthToAnyExpectedValues();
                }
                return this.mValidatePasswordSettingsLengthToAnyExpectedValues;
            }
        }
        
        public virtual PasswordSettingsSetComplexityToNoneParams PasswordSettingsSetComplexityToNoneParams
        {
            get
            {
                if ((this.mPasswordSettingsSetComplexityToNoneParams == null))
                {
                    this.mPasswordSettingsSetComplexityToNoneParams = new PasswordSettingsSetComplexityToNoneParams();
                }
                return this.mPasswordSettingsSetComplexityToNoneParams;
            }
        }
        
        public virtual PasswordSettingsSelectAllComplexityParams PasswordSettingsSelectAllComplexityParams
        {
            get
            {
                if ((this.mPasswordSettingsSelectAllComplexityParams == null))
                {
                    this.mPasswordSettingsSelectAllComplexityParams = new PasswordSettingsSelectAllComplexityParams();
                }
                return this.mPasswordSettingsSelectAllComplexityParams;
            }
        }
        
        public virtual ValidateLengthPolicyInMyDetailsExpectedValues ValidateLengthPolicyInMyDetailsExpectedValues
        {
            get
            {
                if ((this.mValidateLengthPolicyInMyDetailsExpectedValues == null))
                {
                    this.mValidateLengthPolicyInMyDetailsExpectedValues = new ValidateLengthPolicyInMyDetailsExpectedValues();
                }
                return this.mValidateLengthPolicyInMyDetailsExpectedValues;
            }
        }
        
        public virtual ValidateLengthPolicyInAdminEmployeeExpectedValues ValidateLengthPolicyInAdminEmployeeExpectedValues
        {
            get
            {
                if ((this.mValidateLengthPolicyInAdminEmployeeExpectedValues == null))
                {
                    this.mValidateLengthPolicyInAdminEmployeeExpectedValues = new ValidateLengthPolicyInAdminEmployeeExpectedValues();
                }
                return this.mValidateLengthPolicyInAdminEmployeeExpectedValues;
            }
        }
        
        public virtual ValidatePreviousPasswordPolicyExpectedValues ValidatePreviousPasswordPolicyExpectedValues
        {
            get
            {
                if ((this.mValidatePreviousPasswordPolicyExpectedValues == null))
                {
                    this.mValidatePreviousPasswordPolicyExpectedValues = new ValidatePreviousPasswordPolicyExpectedValues();
                }
                return this.mValidatePreviousPasswordPolicyExpectedValues;
            }
        }
        
        public virtual NavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams NavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams
        {
            get
            {
                if ((this.mNavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams == null))
                {
                    this.mNavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams = new NavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams();
                }
                return this.mNavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams;
            }
        }
        
        public virtual ValidateExpensesLogonAfterPasswordChangeExpectedValues ValidateExpensesLogonAfterPasswordChangeExpectedValues
        {
            get
            {
                if ((this.mValidateExpensesLogonAfterPasswordChangeExpectedValues == null))
                {
                    this.mValidateExpensesLogonAfterPasswordChangeExpectedValues = new ValidateExpensesLogonAfterPasswordChangeExpectedValues();
                }
                return this.mValidateExpensesLogonAfterPasswordChangeExpectedValues;
            }
        }
        
        public virtual ValidateLengthPolicyInLogonExpectedValues ValidateLengthPolicyInLogonExpectedValues
        {
            get
            {
                if ((this.mValidateLengthPolicyInLogonExpectedValues == null))
                {
                    this.mValidateLengthPolicyInLogonExpectedValues = new ValidateLengthPolicyInLogonExpectedValues();
                }
                return this.mValidateLengthPolicyInLogonExpectedValues;
            }
        }
        
        public virtual ValidateChangePasswordPageFromLogonExpectedValues ValidateChangePasswordPageFromLogonExpectedValues
        {
            get
            {
                if ((this.mValidateChangePasswordPageFromLogonExpectedValues == null))
                {
                    this.mValidateChangePasswordPageFromLogonExpectedValues = new ValidateChangePasswordPageFromLogonExpectedValues();
                }
                return this.mValidateChangePasswordPageFromLogonExpectedValues;
            }
        }
        
        public virtual ClickOnChangePasswordFromAdminEmployeeParams ClickOnChangePasswordFromAdminEmployeeParams
        {
            get
            {
                if ((this.mClickOnChangePasswordFromAdminEmployeeParams == null))
                {
                    this.mClickOnChangePasswordFromAdminEmployeeParams = new ClickOnChangePasswordFromAdminEmployeeParams();
                }
                return this.mClickOnChangePasswordFromAdminEmployeeParams;
            }
        }
        
        public virtual ValidateLogonAfterPasswordChangeExpectedValues ValidateLogonAfterPasswordChangeExpectedValues
        {
            get
            {
                if ((this.mValidateLogonAfterPasswordChangeExpectedValues == null))
                {
                    this.mValidateLogonAfterPasswordChangeExpectedValues = new ValidateLogonAfterPasswordChangeExpectedValues();
                }
                return this.mValidateLogonAfterPasswordChangeExpectedValues;
            }
        }
        
        public virtual ValidatePasswordDoesNotConformInMyDetailsExpectedValues ValidatePasswordDoesNotConformInMyDetailsExpectedValues
        {
            get
            {
                if ((this.mValidatePasswordDoesNotConformInMyDetailsExpectedValues == null))
                {
                    this.mValidatePasswordDoesNotConformInMyDetailsExpectedValues = new ValidatePasswordDoesNotConformInMyDetailsExpectedValues();
                }
                return this.mValidatePasswordDoesNotConformInMyDetailsExpectedValues;
            }
        }
        
        public UIWelcometoframework20Window UIWelcometoframework20Window
        {
            get
            {
                if ((this.mUIWelcometoframework20Window == null))
                {
                    this.mUIWelcometoframework20Window = new UIWelcometoframework20Window();
                }
                return this.mUIWelcometoframework20Window;
            }
        }
        
        public UIGeneralOptionsWindowWindow UIGeneralOptionsWindowWindow
        {
            get
            {
                if ((this.mUIGeneralOptionsWindowWindow == null))
                {
                    this.mUIGeneralOptionsWindowWindow = new UIGeneralOptionsWindowWindow();
                }
                return this.mUIGeneralOptionsWindowWindow;
            }
        }
        
        public UIChangePasswordWindowWindow UIChangePasswordWindowWindow
        {
            get
            {
                if ((this.mUIChangePasswordWindowWindow == null))
                {
                    this.mUIChangePasswordWindowWindow = new UIChangePasswordWindowWindow();
                }
                return this.mUIChangePasswordWindowWindow;
            }
        }
        
        public UIWelcometoexpensesWinWindow UIWelcometoexpensesWinWindow
        {
            get
            {
                if ((this.mUIWelcometoexpensesWinWindow == null))
                {
                    this.mUIWelcometoexpensesWinWindow = new UIWelcometoexpensesWinWindow();
                }
                return this.mUIWelcometoexpensesWinWindow;
            }
        }
        
        public UIWelcometoexpensesWinWindow1 UIWelcometoexpensesWinWindow1
        {
            get
            {
                if ((this.mUIWelcometoexpensesWinWindow1 == null))
                {
                    this.mUIWelcometoexpensesWinWindow1 = new UIWelcometoexpensesWinWindow1();
                }
                return this.mUIWelcometoexpensesWinWindow1;
            }
        }
        
        public UIWelcometoexpensesWinWindow2 UIWelcometoexpensesWinWindow2
        {
            get
            {
                if ((this.mUIWelcometoexpensesWinWindow2 == null))
                {
                    this.mUIWelcometoexpensesWinWindow2 = new UIWelcometoexpensesWinWindow2();
                }
                return this.mUIWelcometoexpensesWinWindow2;
            }
        }
        
        public UIWelcometoexpensesWinWindow3 UIWelcometoexpensesWinWindow3
        {
            get
            {
                if ((this.mUIWelcometoexpensesWinWindow3 == null))
                {
                    this.mUIWelcometoexpensesWinWindow3 = new UIWelcometoexpensesWinWindow3();
                }
                return this.mUIWelcometoexpensesWinWindow3;
            }
        }
        
        public UIWelcometoexpensesWinWindow4 UIWelcometoexpensesWinWindow4
        {
            get
            {
                if ((this.mUIWelcometoexpensesWinWindow4 == null))
                {
                    this.mUIWelcometoexpensesWinWindow4 = new UIWelcometoexpensesWinWindow4();
                }
                return this.mUIWelcometoexpensesWinWindow4;
            }
        }
        
        public UIWelcometoexpensesWinWindow5 UIWelcometoexpensesWinWindow5
        {
            get
            {
                if ((this.mUIWelcometoexpensesWinWindow5 == null))
                {
                    this.mUIWelcometoexpensesWinWindow5 = new UIWelcometoexpensesWinWindow5();
                }
                return this.mUIWelcometoexpensesWinWindow5;
            }
        }
        
        public UIHttpfwtestselexpenseWindow UIHttpfwtestselexpenseWindow
        {
            get
            {
                if ((this.mUIHttpfwtestselexpenseWindow == null))
                {
                    this.mUIHttpfwtestselexpenseWindow = new UIHttpfwtestselexpenseWindow();
                }
                return this.mUIHttpfwtestselexpenseWindow;
            }
        }
        
        public UIHttpfwtestselexpenseWindow1 UIHttpfwtestselexpenseWindow1
        {
            get
            {
                if ((this.mUIHttpfwtestselexpenseWindow1 == null))
                {
                    this.mUIHttpfwtestselexpenseWindow1 = new UIHttpfwtestselexpenseWindow1();
                }
                return this.mUIHttpfwtestselexpenseWindow1;
            }
        }
        
        public UIFrameworkfromSoftwarWindow UIFrameworkfromSoftwarWindow
        {
            get
            {
                if ((this.mUIFrameworkfromSoftwarWindow == null))
                {
                    this.mUIFrameworkfromSoftwarWindow = new UIFrameworkfromSoftwarWindow();
                }
                return this.mUIFrameworkfromSoftwarWindow;
            }
        }
        
        public UIEmployeesWindowsInteWindow UIEmployeesWindowsInteWindow
        {
            get
            {
                if ((this.mUIEmployeesWindowsInteWindow == null))
                {
                    this.mUIEmployeesWindowsInteWindow = new UIEmployeesWindowsInteWindow();
                }
                return this.mUIEmployeesWindowsInteWindow;
            }
        }
        #endregion
        
        #region Fields
        private PasswordSettingsSetComplexityToOnlyMustContainSymbolParams mPasswordSettingsSetComplexityToOnlyMustContainSymbolParams;
        
        private ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues mValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues;
        
        private ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues mValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues;
        
        private ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues mValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues;
        
        private PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams mPasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams;
        
        private PasswordSettingsSetComplexityToOnlyMustContainNumbersParams mPasswordSettingsSetComplexityToOnlyMustContainNumbersParams;
        
        private PasswordSettingsSetNumberOfAttemptsParams mPasswordSettingsSetNumberOfAttemptsParams;
        
        private PasswordSettingsSetExpiryPeriodParams mPasswordSettingsSetExpiryPeriodParams;
        
        private PasswordSettingsSetPreviousNotPermittedPasswordsParams mPasswordSettingsSetPreviousNotPermittedPasswordsParams;
        
        private ChangePasswordFromMyDetailsWithSymbolParams mChangePasswordFromMyDetailsWithSymbolParams;
        
        private NavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams mNavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams;
        
        private ChangePasswordFromAdminEmployeeWithSymbolParams mChangePasswordFromAdminEmployeeWithSymbolParams;
        
        private ValidateSymbolPolicyInMyDetailsExpectedValues mValidateSymbolPolicyInMyDetailsExpectedValues;
        
        private ValidateSymbolPolicyInAdminEmployeeExpectedValues mValidateSymbolPolicyInAdminEmployeeExpectedValues;
        
        private ValidatePasswordDoesNotConformInAdminEmployeeExpectedValues mValidatePasswordDoesNotConformInAdminEmployeeExpectedValues;
        
        private ValidateSymbolPolicyInLogonScreenExpectedValues mValidateSymbolPolicyInLogonScreenExpectedValues;
        
        private ChangePasswordFromLogonPageWithSymbolParams mChangePasswordFromLogonPageWithSymbolParams;
        
        private ValidatePasswordDoesNotConformInLogonPageExpectedValues mValidatePasswordDoesNotConformInLogonPageExpectedValues;
        
        private ValidateNumbersPolicyInMyDetailsExpectedValues mValidateNumbersPolicyInMyDetailsExpectedValues;
        
        private ValidateNumbersPolicyInAdminEmployeeExpectedValues mValidateNumbersPolicyInAdminEmployeeExpectedValues;
        
        private ValidateNumbersPolicyInLogonPageExpectedValues mValidateNumbersPolicyInLogonPageExpectedValues;
        
        private ValidateUpperCasePolicyInMyDetailsExpectedValues mValidateUpperCasePolicyInMyDetailsExpectedValues;
        
        private ValidateUpperCasePolicyInAdminEmployeeExpectedValues mValidateUpperCasePolicyInAdminEmployeeExpectedValues;
        
        private ValidateUpperCasePolicyInLogonPageExpectedValues mValidateUpperCasePolicyInLogonPageExpectedValues;
        
        private PasswordSettingsSetComplexityToMustContainAllParams mPasswordSettingsSetComplexityToMustContainAllParams;
        
        private ValidatePasswordSettingsComplexityContainsAllExpectedValues mValidatePasswordSettingsComplexityContainsAllExpectedValues;
        
        private PasswordSettingsSetLengthToEqualToParams mPasswordSettingsSetLengthToEqualToParams;
        
        private PasswordSettingsSetLengthToGreaterThanParams mPasswordSettingsSetLengthToGreaterThanParams;
        
        private PasswordSettingsSetLengthToLessThanParams mPasswordSettingsSetLengthToLessThanParams;
        
        private PasswordSettingsSetLengthToBetweenParams mPasswordSettingsSetLengthToBetweenParams;
        
        private ValidatePasswordSettingsLengthToBetweenExpectedValues mValidatePasswordSettingsLengthToBetweenExpectedValues;
        
        private ValidatePasswordSettingsLengthToEqualToExpectedValues mValidatePasswordSettingsLengthToEqualToExpectedValues;
        
        private ValidatePasswordSettingsLengthToGreaterThanExpectedValues mValidatePasswordSettingsLengthToGreaterThanExpectedValues;
        
        private ValidatePasswordSettingsLengthToLessThanExpectedValues mValidatePasswordSettingsLengthToLessThanExpectedValues;
        
        private PasswordSettingsSetLengthToAnyParams mPasswordSettingsSetLengthToAnyParams;
        
        private ValidatePasswordSettingsLengthToAnyExpectedValues mValidatePasswordSettingsLengthToAnyExpectedValues;
        
        private PasswordSettingsSetComplexityToNoneParams mPasswordSettingsSetComplexityToNoneParams;
        
        private PasswordSettingsSelectAllComplexityParams mPasswordSettingsSelectAllComplexityParams;
        
        private ValidateLengthPolicyInMyDetailsExpectedValues mValidateLengthPolicyInMyDetailsExpectedValues;
        
        private ValidateLengthPolicyInAdminEmployeeExpectedValues mValidateLengthPolicyInAdminEmployeeExpectedValues;
        
        private ValidatePreviousPasswordPolicyExpectedValues mValidatePreviousPasswordPolicyExpectedValues;
        
        private NavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams mNavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams;
        
        private ValidateExpensesLogonAfterPasswordChangeExpectedValues mValidateExpensesLogonAfterPasswordChangeExpectedValues;
        
        private ValidateLengthPolicyInLogonExpectedValues mValidateLengthPolicyInLogonExpectedValues;
        
        private ValidateChangePasswordPageFromLogonExpectedValues mValidateChangePasswordPageFromLogonExpectedValues;
        
        private ClickOnChangePasswordFromAdminEmployeeParams mClickOnChangePasswordFromAdminEmployeeParams;
        
        private ValidateLogonAfterPasswordChangeExpectedValues mValidateLogonAfterPasswordChangeExpectedValues;
        
        private ValidatePasswordDoesNotConformInMyDetailsExpectedValues mValidatePasswordDoesNotConformInMyDetailsExpectedValues;
        
        private UIWelcometoframework20Window mUIWelcometoframework20Window;
        
        private UIGeneralOptionsWindowWindow mUIGeneralOptionsWindowWindow;
        
        private UIChangePasswordWindowWindow mUIChangePasswordWindowWindow;
        
        private UIWelcometoexpensesWinWindow mUIWelcometoexpensesWinWindow;
        
        private UIWelcometoexpensesWinWindow1 mUIWelcometoexpensesWinWindow1;
        
        private UIWelcometoexpensesWinWindow2 mUIWelcometoexpensesWinWindow2;
        
        private UIWelcometoexpensesWinWindow3 mUIWelcometoexpensesWinWindow3;
        
        private UIWelcometoexpensesWinWindow4 mUIWelcometoexpensesWinWindow4;
        
        private UIWelcometoexpensesWinWindow5 mUIWelcometoexpensesWinWindow5;
        
        private UIHttpfwtestselexpenseWindow mUIHttpfwtestselexpenseWindow;
        
        private UIHttpfwtestselexpenseWindow1 mUIHttpfwtestselexpenseWindow1;
        
        private UIFrameworkfromSoftwarWindow mUIFrameworkfromSoftwarWindow;
        
        private UIEmployeesWindowsInteWindow mUIEmployeesWindowsInteWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetComplexityToOnlyMustContainSymbol'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetComplexityToOnlyMustContainSymbolParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password can be any length' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        
        /// <summary>
        /// Clear 'Password must contain upper case letters' check box
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Password must contain numbers' check box
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'Password must contain a symbol character' check box
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsComplexityContainsSymbolOnly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsComplexityContainsSymbolOnlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        
        /// <summary>
        /// Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that 'Password must contain numbers' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsComplexityContainsUpperOnly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsComplexityContainsUpperOnlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        
        /// <summary>
        /// Verify that 'Password must contain numbers' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsComplexityContainsNumbersOnly'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsComplexityContainsNumbersOnlyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        
        /// <summary>
        /// Verify that 'Password must contain numbers' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = false;
        
        /// <summary>
        /// Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'False'
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetComplexityToOnlyMustContainUpperCase'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetComplexityToOnlyMustContainUpperCaseParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password can be any length' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        
        /// <summary>
        /// Select 'Password must contain upper case letters' check box
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = true;
        
        /// <summary>
        /// Clear 'Password must contain numbers' check box
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Password must contain a symbol character' check box
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetComplexityToOnlyMustContainNumbers'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetComplexityToOnlyMustContainNumbersParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password can be any length' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        
        /// <summary>
        /// Clear 'Password must contain upper case letters' check box
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Password must contain a symbol character' check box
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = false;
        
        /// <summary>
        /// Select 'Password must contain numbers' check box
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetNumberOfAttempts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetNumberOfAttemptsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '4' in 'Number of attempts before lock-out' text box
        /// </summary>
        public string UINumberofattemptsbefoEditText = "4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetExpiryPeriod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetExpiryPeriodParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'Password expires after x days (0 = never)' text box
        /// </summary>
        public string UIPasswordexpiresafterEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetPreviousNotPermittedPasswords'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetPreviousNotPermittedPasswordsParams
    {
        
        #region Fields
        /// <summary>
        /// Type '3' in 'Previous passwords not permitted' text box
        /// </summary>
        public string UIPreviouspasswordsnotEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangePasswordFromMyDetailsWithSymbol'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ChangePasswordFromMyDetailsWithSymbolParams
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'Old Password' text box
        /// </summary>
        public string UIOldPasswordEditPassword = "mBQq9cL71wN/lLRjKUVagBsE3iJewBMd";
        
        /// <summary>
        /// Type '********' in 'New Password' text box
        /// </summary>
        public string UINewPasswordEditPassword = "QWwOodIXpSPTxKm3uoHSfkjCUozIqgxQ";
        
        /// <summary>
        /// Type '********' in 'Confirm New Password' text box
        /// </summary>
        public string UIConfirmNewPasswordEditPassword = "QWwOodIXpSPTxKm3uoHSfkjCUozIqgxQ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NavigateToAdminEmployeeChangePasswordFromFrameworkHomePage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class NavigateToAdminEmployeeChangePasswordFromFrameworkHomePageParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'james' in 'Username' text box
        /// </summary>
        public string UIUsernameEditText = "james";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangePasswordFromAdminEmployeeWithSymbol'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ChangePasswordFromAdminEmployeeWithSymbolParams
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'New Password' text box
        /// </summary>
        public string UINewPasswordEditPassword = "mBQq9cL71wOsVA2SZx/QFVleyyeKHazC";
        
        /// <summary>
        /// Type '********' in 'Confirm New Password' text box
        /// </summary>
        public string UIConfirmNewPasswordEditPassword = "mBQq9cL71wOsVA2SZx/QFVleyyeKHazC";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateSymbolPolicyInMyDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateSymbolPolicyInMyDetailsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain an approv' custom control's property 'InnerText' equals 'Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)'
        /// </summary>
        public string UIYournewpasswordmustcCustomInnerText = "Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateSymbolPolicyInAdminEmployee'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateSymbolPolicyInAdminEmployeeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain an approv' custom control's property 'InnerText' equals 'Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)'
        /// </summary>
        public string UIYournewpasswordmustcCustomInnerText = "Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordDoesNotConformInAdminEmployee'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordDoesNotConformInAdminEmployeeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'ctl00_contentmain_lblmsg' pane's property 'DisplayText' contains 'The password could not be changed as it does not conform to the password policy.'
        /// </summary>
        public string UICtl00_contentmain_lbPaneDisplayText = "The password could not be changed as it does not conform to the password policy.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateSymbolPolicyInLogonScreen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateSymbolPolicyInLogonScreenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain an approv' custom control's property 'InnerText' equals 'Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)'
        /// </summary>
        public string UIYournewpasswordmustcCustomInnerText = "Your new password must contain an approved symbol character (i.e. !¦£$%^&*€@#~?|)" +
            "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ChangePasswordFromLogonPageWithSymbol'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ChangePasswordFromLogonPageWithSymbolParams
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'New Password' text box
        /// </summary>
        public string UINewPasswordEditPassword = "mBQq9cL71wOsVA2SZx/QFVleyyeKHazC";
        
        /// <summary>
        /// Type '********' in 'Confirm New Password' text box
        /// </summary>
        public string UIConfirmNewPasswordEditPassword = "mBQq9cL71wOsVA2SZx/QFVleyyeKHazC";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordDoesNotConformInLogonPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordDoesNotConformInLogonPageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'ctl00_contentmain_lblmsg' pane's property 'DisplayText' contains 'The password could not be changed as it does not conform to the password policy.'
        /// </summary>
        public string UICtl00_contentmain_lbPaneDisplayText = "The password could not be changed as it does not conform to the password policy.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateNumbersPolicyInMyDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateNumbersPolicyInMyDetailsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain a number.' custom control's property 'InnerText' equals 'Your new password must contain a number.'
        /// </summary>
        public string UIYournewpasswordmustcCustom1InnerText = "Your new password must contain a number.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateNumbersPolicyInAdminEmployee'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateNumbersPolicyInAdminEmployeeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain a number.' custom control's property 'InnerText' equals 'Your new password must contain a number.'
        /// </summary>
        public string UIYournewpasswordmustcCustom1InnerText = "Your new password must contain a number.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateNumbersPolicyInLogonPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateNumbersPolicyInLogonPageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain a number.' custom control's property 'InnerText' equals 'Your new password must contain a number.'
        /// </summary>
        public string UIYournewpasswordmustcCustomInnerText = "Your new password must contain a number.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUpperCasePolicyInMyDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateUpperCasePolicyInMyDetailsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain an upper' custom control's property 'InnerText' equals 'Your new password must contain an upper case character.'
        /// </summary>
        public string UIYournewpasswordmustcCustom2InnerText = "Your new password must contain an upper case character.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUpperCasePolicyInAdminEmployee'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateUpperCasePolicyInAdminEmployeeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain an upper' custom control's property 'InnerText' equals 'Your new password must contain an upper case character.'
        /// </summary>
        public string UIYournewpasswordmustcCustom2InnerText = "Your new password must contain an upper case character.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUpperCasePolicyInLogonPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateUpperCasePolicyInLogonPageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must contain an upper' custom control's property 'InnerText' equals 'Your new password must contain an upper case character.'
        /// </summary>
        public string UIYournewpasswordmustcCustom1InnerText = "Your new password must contain an upper case character.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetComplexityToMustContainAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetComplexityToMustContainAllParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password can be any length' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        
        /// <summary>
        /// Select 'Password must contain upper case letters' check box
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Password must contain a symbol character' check box
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Password must contain numbers' check box
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsComplexityContainsAll'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsComplexityContainsAllExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password must contain upper case letters' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that 'Password must contain numbers' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that 'Password must contain a symbol character' check box's property 'Checked' equals 'True'
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = true;
        
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetLengthToEqualTo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetLengthToEqualToParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password must be equal to' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be equal to";
        
        /// <summary>
        /// Type '6' in 'Minimum length' text box
        /// </summary>
        public string UIMinimumlengthEdit1Text = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetLengthToGreaterThan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetLengthToGreaterThanParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password must be greater than' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be greater than";
        
        /// <summary>
        /// Type '6' in 'Minimum length' text box
        /// </summary>
        public string UIMinimumlengthEdit1Text = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetLengthToLessThan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetLengthToLessThanParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password must be less than' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be less than";
        
        /// <summary>
        /// Type '6' in 'Minimum length' text box
        /// </summary>
        public string UIMinimumlengthEditText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetLengthToBetween'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetLengthToBetweenParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password must be between' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be between";
        
        /// <summary>
        /// Type '6' in 'Minimum length' text box
        /// </summary>
        public string UIMinimumlengthEdit1Text = "6";
        
        /// <summary>
        /// Type '10' in 'Maximum length' text box
        /// </summary>
        public string UIMaximumlengthEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsLengthToBetween'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsLengthToBetweenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Minimum length' text box's property 'Text' equals '6'
        /// </summary>
        public string UIMinimumlengthEdit1Text = "6";
        
        /// <summary>
        /// Verify that 'Maximum length' text box's property 'Text' equals '10'
        /// </summary>
        public string UIMaximumlengthEdit1Text = "10";
        
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be between'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be between";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsLengthToEqualTo'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsLengthToEqualToExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be equal to'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be equal to";
        
        /// <summary>
        /// Verify that 'Minimum length' text box's property 'Text' equals '6'
        /// </summary>
        public string UIMinimumlengthEdit1Text = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsLengthToGreaterThan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsLengthToGreaterThanExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be greater than'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be greater than";
        
        /// <summary>
        /// Verify that 'Minimum length' text box's property 'Text' equals '6'
        /// </summary>
        public string UIMinimumlengthEdit1Text = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsLengthToLessThan'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsLengthToLessThanExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password must be less than'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password must be less than";
        
        /// <summary>
        /// Verify that 'Minimum length' text box's property 'Text' equals '6'
        /// </summary>
        public string UIMinimumlengthEdit1Text = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetLengthToAny'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetLengthToAnyParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password can be any length' in 'Password length' combo box
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordSettingsLengthToAny'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordSettingsLengthToAnyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Password length' combo box's property 'SelectedItem' equals 'Password can be any length'
        /// </summary>
        public string UIPasswordlengthComboBoxSelectedItem = "Password can be any length";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSetComplexityToNone'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSetComplexityToNoneParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Password must contain upper case letters' check box
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Password must contain a symbol character' check box
        /// </summary>
        public bool UIPasswordmustcontainaCheckBoxChecked = false;
        
        /// <summary>
        /// Clear 'Password must contain numbers' check box
        /// </summary>
        public bool UIPasswordmustcontainnCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PasswordSettingsSelectAllComplexity'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class PasswordSettingsSelectAllComplexityParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Password must contain upper case letters' check box
        /// </summary>
        public bool UIPasswordmustcontainuCheckBoxChecked = true;
        
        /// <summary>
        /// Select 'Password must contain a symbol character' check box
        /// </summary>
        public bool UIPasswordmustcontainaCheckBox1Checked = true;
        
        /// <summary>
        /// Select 'Password must contain numbers' check box
        /// </summary>
        public bool UIPasswordmustcontainnCheckBox1Checked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateLengthPolicyInMyDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateLengthPolicyInMyDetailsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must be 6 characters i' custom control's property 'InnerText' equals 'Your new password must be 6 characters in length.'
        /// </summary>
        public string UIYournewpasswordmustbCustomInnerText = "Your new password must be 6 characters in length.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateLengthPolicyInAdminEmployee'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateLengthPolicyInAdminEmployeeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must be 6 characters i' custom control's property 'InnerText' equals 'Your new password must be 6 characters in length.'
        /// </summary>
        public string UIYournewpasswordmustbCustomInnerText = "Your new password must be 6 characters in length.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePreviousPasswordPolicy'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePreviousPasswordPolicyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password cannot be any of the p' custom control's property 'InnerText' equals 'Your new password cannot be any of the previous 2 passwords you have used.'
        /// </summary>
        public string UIYournewpasswordcannoCustomInnerText = "Your new password cannot be any of the previous 2 passwords you have used.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NavigateToAdminEmployeeChangePasswordFromExpensesHomePage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class NavigateToAdminEmployeeChangePasswordFromExpensesHomePageParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'james' in 'Username' text box
        /// </summary>
        public string UIUsernameEditText = "james";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateExpensesLogonAfterPasswordChange'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateExpensesLogonAfterPasswordChangeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Home' pane's property 'InnerText' equals 'Home'
        /// </summary>
        public string UIHomePane1InnerText = "Home";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateLengthPolicyInLogon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateLengthPolicyInLogonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Your new password must be greater than 6' custom control's property 'InnerText' equals 'Your new password must be greater than 6 characters in length.'
        /// </summary>
        public string UIYournewpasswordmustbCustomInnerText = "Your new password must be greater than 6 characters in length.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateChangePasswordPageFromLogon'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateChangePasswordPageFromLogonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Change Password' pane's property 'InnerText' equals 'Change Password'
        /// </summary>
        public string UIChangePasswordPaneInnerText = "Change Password";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickOnChangePasswordFromAdminEmployee'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ClickOnChangePasswordFromAdminEmployeeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'CodedUIAdmin' in 'Username' text box
        /// </summary>
        public string UIUsernameEditText = "CodedUIAdmin";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateLogonAfterPasswordChange'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidateLogonAfterPasswordChangeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Home' pane's property 'InnerText' equals 'Home'
        /// </summary>
        public string UIHomePane1InnerText = "Home";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePasswordDoesNotConformInMyDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ValidatePasswordDoesNotConformInMyDetailsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'ctl00_contentmain_lblmsg' pane's property 'InnerText' contains 'The password could not be changed as it does not conform to the password policy.'
        /// </summary>
        public string UICtl00_contentmain_lbPaneInnerText = "The password could not be changed as it does not conform to the password policy.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoframework20Window : BrowserWindow
    {
        
        public UIWelcometoframework20Window()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to framework2009";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to framework2009");
            this.WindowTitles.Add("Administration");
            this.WindowTitles.Add("Tailoring Options");
            this.WindowTitles.Add("My Details");
            this.WindowTitles.Add("Employee Management");
            this.WindowTitles.Add("https://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIWelcometoframework20Document UIWelcometoframework20Document
        {
            get
            {
                if ((this.mUIWelcometoframework20Document == null))
                {
                    this.mUIWelcometoframework20Document = new UIWelcometoframework20Document(this);
                }
                return this.mUIWelcometoframework20Document;
            }
        }
        
        public UIAdministrationDocument UIAdministrationDocument
        {
            get
            {
                if ((this.mUIAdministrationDocument == null))
                {
                    this.mUIAdministrationDocument = new UIAdministrationDocument(this);
                }
                return this.mUIAdministrationDocument;
            }
        }
        
        public UITailoringOptionsDocument UITailoringOptionsDocument
        {
            get
            {
                if ((this.mUITailoringOptionsDocument == null))
                {
                    this.mUITailoringOptionsDocument = new UITailoringOptionsDocument(this);
                }
                return this.mUITailoringOptionsDocument;
            }
        }
        
        public UIMyDetailsDocument UIMyDetailsDocument
        {
            get
            {
                if ((this.mUIMyDetailsDocument == null))
                {
                    this.mUIMyDetailsDocument = new UIMyDetailsDocument(this);
                }
                return this.mUIMyDetailsDocument;
            }
        }
        
        public UIWelcometoframework20Document1 UIWelcometoframework20Document1
        {
            get
            {
                if ((this.mUIWelcometoframework20Document1 == null))
                {
                    this.mUIWelcometoframework20Document1 = new UIWelcometoframework20Document1(this);
                }
                return this.mUIWelcometoframework20Document1;
            }
        }
        
        public UIWelcometoframework20Document2 UIWelcometoframework20Document2
        {
            get
            {
                if ((this.mUIWelcometoframework20Document2 == null))
                {
                    this.mUIWelcometoframework20Document2 = new UIWelcometoframework20Document2(this);
                }
                return this.mUIWelcometoframework20Document2;
            }
        }
        
        public UIAdministrationDocument1 UIAdministrationDocument1
        {
            get
            {
                if ((this.mUIAdministrationDocument1 == null))
                {
                    this.mUIAdministrationDocument1 = new UIAdministrationDocument1(this);
                }
                return this.mUIAdministrationDocument1;
            }
        }
        
        public UIEmployeeManagementDocument UIEmployeeManagementDocument
        {
            get
            {
                if ((this.mUIEmployeeManagementDocument == null))
                {
                    this.mUIEmployeeManagementDocument = new UIEmployeeManagementDocument(this);
                }
                return this.mUIEmployeeManagementDocument;
            }
        }
        
        public UIHttpsfwtestselexpensDocument UIHttpsfwtestselexpensDocument
        {
            get
            {
                if ((this.mUIHttpsfwtestselexpensDocument == null))
                {
                    this.mUIHttpsfwtestselexpensDocument = new UIHttpsfwtestselexpensDocument(this);
                }
                return this.mUIHttpsfwtestselexpensDocument;
            }
        }
        
        public UIEmployeesDocument UIEmployeesDocument
        {
            get
            {
                if ((this.mUIEmployeesDocument == null))
                {
                    this.mUIEmployeesDocument = new UIEmployeesDocument(this);
                }
                return this.mUIEmployeesDocument;
            }
        }
        
        public UITailoringOptionsDocument1 UITailoringOptionsDocument1
        {
            get
            {
                if ((this.mUITailoringOptionsDocument1 == null))
                {
                    this.mUITailoringOptionsDocument1 = new UITailoringOptionsDocument1(this);
                }
                return this.mUITailoringOptionsDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIWelcometoframework20Document mUIWelcometoframework20Document;
        
        private UIAdministrationDocument mUIAdministrationDocument;
        
        private UITailoringOptionsDocument mUITailoringOptionsDocument;
        
        private UIMyDetailsDocument mUIMyDetailsDocument;
        
        private UIWelcometoframework20Document1 mUIWelcometoframework20Document1;
        
        private UIWelcometoframework20Document2 mUIWelcometoframework20Document2;
        
        private UIAdministrationDocument1 mUIAdministrationDocument1;
        
        private UIEmployeeManagementDocument mUIEmployeeManagementDocument;
        
        private UIHttpsfwtestselexpensDocument mUIHttpsfwtestselexpensDocument;
        
        private UIEmployeesDocument mUIEmployeesDocument;
        
        private UITailoringOptionsDocument1 mUITailoringOptionsDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoframework20Document : HtmlDocument
    {
        
        public UIWelcometoframework20Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Welcome to framework2009";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Home.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/Home.aspx";
            this.WindowTitles.Add("Welcome to framework2009");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIAdministrationPane
        {
            get
            {
                if ((this.mUIAdministrationPane == null))
                {
                    this.mUIAdministrationPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel2";
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Administration";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel2 class=menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUIAdministrationPane.WindowTitles.Add("Welcome to framework2009");
                    #endregion
                }
                return this.mUIAdministrationPane;
            }
        }
        
        public HtmlSpan UIMyDetailsPane
        {
            get
            {
                if ((this.mUIMyDetailsPane == null))
                {
                    this.mUIMyDetailsPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIMyDetailsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel4";
                    this.mUIMyDetailsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "My Details";
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel4 class=menuitemtitle";
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "15";
                    this.mUIMyDetailsPane.WindowTitles.Add("Welcome to framework2009");
                    #endregion
                }
                return this.mUIMyDetailsPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIAdministrationPane;
        
        private HtmlSpan mUIMyDetailsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdministrationDocument : HtmlDocument
    {
        
        public UIAdministrationDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Administration";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MenuMain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/MenuMain.aspx?menusection=admin";
            this.WindowTitles.Add("Administration");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UITailoringPane
        {
            get
            {
                if ((this.mUITailoringPane == null))
                {
                    this.mUITailoringPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUITailoringPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel3";
                    this.mUITailoringPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Tailoring";
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel3 class=menuitemtitle";
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "13";
                    this.mUITailoringPane.WindowTitles.Add("Administration");
                    #endregion
                }
                return this.mUITailoringPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUITailoringPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITailoringOptionsDocument : HtmlDocument
    {
        
        public UITailoringOptionsDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Tailoring Options";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MenuMain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/MenuMain.aspx?menusection=tailoring";
            this.WindowTitles.Add("Tailoring Options");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIGeneralOptionsPane
        {
            get
            {
                if ((this.mUIGeneralOptionsPane == null))
                {
                    this.mUIGeneralOptionsPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIGeneralOptionsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel8";
                    this.mUIGeneralOptionsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "General Options";
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel8 class=menuitemtitle";
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "25";
                    this.mUIGeneralOptionsPane.WindowTitles.Add("Tailoring Options");
                    #endregion
                }
                return this.mUIGeneralOptionsPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIGeneralOptionsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMyDetailsDocument : HtmlDocument
    {
        
        public UIMyDetailsDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "My Details";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/information/mydetails.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/information/mydetails.aspx";
            this.WindowTitles.Add("My Details");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIChangePasswordHyperlink
        {
            get
            {
                if ((this.mUIChangePasswordHyperlink == null))
                {
                    this.mUIChangePasswordHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "ctl00_contentmain_cmbchangep";
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Change Password";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "WebForm_DoPostBackWithOptions(new%20WebForm_PostBackOptions(%22ctl00$contentmain$" +
                        "cmbchangep%22,%20%22%22,%20true,%20%22%22,%20%22%22,%20false,%20true))";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(\"ctl00$conte" +
                        "ntmain$cmbchangep\", \"\", true, \"\", \"\", false, true))";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbchangep href=\'ja";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIChangePasswordHyperlink.WindowTitles.Add("My Details");
                    #endregion
                }
                return this.mUIChangePasswordHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIChangePasswordHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoframework20Document1 : HtmlDocument
    {
        
        public UIWelcometoframework20Document1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Welcome to framework2009";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/home.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/home.aspx";
            this.WindowTitles.Add("Welcome to framework2009");
            #endregion
        }
        
        #region Properties
        public UIHomePagePane UIHomePagePane
        {
            get
            {
                if ((this.mUIHomePagePane == null))
                {
                    this.mUIHomePagePane = new UIHomePagePane(this);
                }
                return this.mUIHomePagePane;
            }
        }
        
        public HtmlSpan UIAdministrationPane
        {
            get
            {
                if ((this.mUIAdministrationPane == null))
                {
                    this.mUIAdministrationPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel2";
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Administration";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel2 class=menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUIAdministrationPane.WindowTitles.Add("Welcome to framework2009");
                    #endregion
                }
                return this.mUIAdministrationPane;
            }
        }
        #endregion
        
        #region Fields
        private UIHomePagePane mUIHomePagePane;
        
        private HtmlSpan mUIAdministrationPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHomePagePane : HtmlSpan
    {
        
        public UIHomePagePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_SiteMapPath1";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home Page";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"FONT-FAMILY: Arial; TEXT-DECORATI";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Welcome to framework2009");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIHomePagePane1
        {
            get
            {
                if ((this.mUIHomePagePane1 == null))
                {
                    this.mUIHomePagePane1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIHomePagePane1.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIHomePagePane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIHomePagePane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home Page";
                    this.mUIHomePagePane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIHomePagePane1.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIHomePagePane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"TEXT-DECORATION: none\"";
                    this.mUIHomePagePane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
                    this.mUIHomePagePane1.WindowTitles.Add("Welcome to framework2009");
                    #endregion
                }
                return this.mUIHomePagePane1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIHomePagePane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoframework20Document2 : HtmlDocument
    {
        
        public UIWelcometoframework20Document2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Welcome to framework2009";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Home.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/Home.aspx";
            this.WindowTitles.Add("Welcome to framework2009");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIAdministrationPane
        {
            get
            {
                if ((this.mUIAdministrationPane == null))
                {
                    this.mUIAdministrationPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel2";
                    this.mUIAdministrationPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Administration";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel2 class=menuitemtitle";
                    this.mUIAdministrationPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUIAdministrationPane.WindowTitles.Add("Welcome to framework2009");
                    #endregion
                }
                return this.mUIAdministrationPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIAdministrationPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAdministrationDocument1 : HtmlDocument
    {
        
        public UIAdministrationDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Administration";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MenuMain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/MenuMain.aspx?menusection=admin";
            this.WindowTitles.Add("Administration");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIEmployeeManagementPane
        {
            get
            {
                if ((this.mUIEmployeeManagementPane == null))
                {
                    this.mUIEmployeeManagementPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIEmployeeManagementPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel1";
                    this.mUIEmployeeManagementPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIEmployeeManagementPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Employee Management";
                    this.mUIEmployeeManagementPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIEmployeeManagementPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIEmployeeManagementPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel1 class=menuitemtitle";
                    this.mUIEmployeeManagementPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "9";
                    this.mUIEmployeeManagementPane.WindowTitles.Add("Administration");
                    #endregion
                }
                return this.mUIEmployeeManagementPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIEmployeeManagementPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEmployeeManagementDocument : HtmlDocument
    {
        
        public UIEmployeeManagementDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Employee Management";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/MenuMain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/MenuMain.aspx?menusection=employee";
            this.WindowTitles.Add("Employee Management");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIEmployeesPane
        {
            get
            {
                if ((this.mUIEmployeesPane == null))
                {
                    this.mUIEmployeesPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIEmployeesPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel0";
                    this.mUIEmployeesPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Employees";
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel0 class=menuitemtitle";
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "9";
                    this.mUIEmployeesPane.WindowTitles.Add("Employee Management");
                    #endregion
                }
                return this.mUIEmployeesPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIEmployeesPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHttpsfwtestselexpensDocument : HtmlDocument
    {
        
        public UIHttpsfwtestselexpensDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/selectemployee.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx";
            this.WindowTitles.Add("https://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtusername";
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtusername";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Username";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fillspan";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtusername class=f";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIUsernameEdit.WindowTitles.Add("https://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdoButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdoButton == null))
                {
                    this.mUICtl00contentmaincmdoButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdok";
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdok";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdoButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/pagebutton_search.gif";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUICtl00contentmaincmdoButton.WindowTitles.Add("https://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
                    #endregion
                }
                return this.mUICtl00contentmaincmdoButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIUsernameEdit;
        
        private HtmlInputButton mUICtl00contentmaincmdoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEmployeesDocument : HtmlDocument
    {
        
        public UIEmployeesDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Employees";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/adminemployees.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/admin/adminemployees.aspx?surname=&roleid=" +
                "0&groupid=&costcodeid=0&departmentid=0&username=james";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public UITbl_gridEmployees_53Row UITbl_gridEmployees_53Row
        {
            get
            {
                if ((this.mUITbl_gridEmployees_53Row == null))
                {
                    this.mUITbl_gridEmployees_53Row = new UITbl_gridEmployees_53Row(this);
                }
                return this.mUITbl_gridEmployees_53Row;
            }
        }
        #endregion
        
        #region Fields
        private UITbl_gridEmployees_53Row mUITbl_gridEmployees_53Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_gridEmployees_53Row : HtmlRow
    {
        
        public UITbl_gridEmployees_53Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridEmployees_533";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "jamesMrJamesLloyd";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridEmployees_533";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIChangePasswordImage
        {
            get
            {
                if ((this.mUIChangePasswordImage == null))
                {
                    this.mUIChangePasswordImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Change Password";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Change Password\" src=\"../images/ico";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "4";
                    this.mUIChangePasswordImage.WindowTitles.Add("Employees");
                    #endregion
                }
                return this.mUIChangePasswordImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIChangePasswordImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITailoringOptionsDocument1 : HtmlDocument
    {
        
        public UITailoringOptionsDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Tailoring Options";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/menumain.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/menumain.aspx?menusection=tailoring";
            this.WindowTitles.Add("Tailoring Options");
            #endregion
        }
        
        #region Properties
        public UICtl00_SiteMapPath1Pane UICtl00_SiteMapPath1Pane
        {
            get
            {
                if ((this.mUICtl00_SiteMapPath1Pane == null))
                {
                    this.mUICtl00_SiteMapPath1Pane = new UICtl00_SiteMapPath1Pane(this);
                }
                return this.mUICtl00_SiteMapPath1Pane;
            }
        }
        #endregion
        
        #region Fields
        private UICtl00_SiteMapPath1Pane mUICtl00_SiteMapPath1Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICtl00_SiteMapPath1Pane : HtmlSpan
    {
        
        public UICtl00_SiteMapPath1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_SiteMapPath1";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home Page : Administration Menu : Tailor";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"FONT-FAMILY: Arial; TEXT-DECORATI";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Tailoring Options");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHomePageHyperlink
        {
            get
            {
                if ((this.mUIHomePageHyperlink == null))
                {
                    this.mUIHomePageHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHomePageHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHomePageHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHomePageHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHomePageHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Home Page";
                    this.mUIHomePageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Home.aspx";
                    this.mUIHomePageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Primary Menu options available as well as high level search options.";
                    this.mUIHomePageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://fwtest.sel-expenses.com/Home.aspx";
                    this.mUIHomePageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHomePageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"TEXT-DECORATION: none\" title=\"Pri";
                    this.mUIHomePageHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHomePageHyperlink.WindowTitles.Add("Tailoring Options");
                    #endregion
                }
                return this.mUIHomePageHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHomePageHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGeneralOptionsWindowWindow : BrowserWindow
    {
        
        public UIGeneralOptionsWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "General Options";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("General Options");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGeneralOptionsDocument UIGeneralOptionsDocument
        {
            get
            {
                if ((this.mUIGeneralOptionsDocument == null))
                {
                    this.mUIGeneralOptionsDocument = new UIGeneralOptionsDocument(this);
                }
                return this.mUIGeneralOptionsDocument;
            }
        }
        
        public UIGeneralOptionsDocument1 UIGeneralOptionsDocument1
        {
            get
            {
                if ((this.mUIGeneralOptionsDocument1 == null))
                {
                    this.mUIGeneralOptionsDocument1 = new UIGeneralOptionsDocument1(this);
                }
                return this.mUIGeneralOptionsDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIGeneralOptionsDocument mUIGeneralOptionsDocument;
        
        private UIGeneralOptionsDocument1 mUIGeneralOptionsDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGeneralOptionsDocument : HtmlDocument
    {
        
        public UIGeneralOptionsDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "General Options";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/accountOptions.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/admin/accountOptions.aspx";
            this.WindowTitles.Add("General Options");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIPasswordSettingsHyperlink
        {
            get
            {
                if ((this.mUIPasswordSettingsHyperlink == null))
                {
                    this.mUIPasswordSettingsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIPasswordSettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "lnkPasswordSettings";
                    this.mUIPasswordSettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIPasswordSettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIPasswordSettingsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Password Settings";
                    this.mUIPasswordSettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "changePage(\'PasswordSettings\');";
                    this.mUIPasswordSettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIPasswordSettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:changePage(\'PasswordSettings\');";
                    this.mUIPasswordSettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIPasswordSettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=lnkPasswordSettings href=\"javascript:";
                    this.mUIPasswordSettingsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIPasswordSettingsHyperlink.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordSettingsHyperlink;
            }
        }
        
        public HtmlComboBox UIPasswordlengthComboBox
        {
            get
            {
                if ((this.mUIPasswordlengthComboBox == null))
                {
                    this.mUIPasswordlengthComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIPasswordlengthComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmblength";
                    this.mUIPasswordlengthComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmblength";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Password length";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "5";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmblength onchange=";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "12";
                    this.mUIPasswordlengthComboBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordlengthComboBox;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainuCheckBox
        {
            get
            {
                if ((this.mUIPasswordmustcontainuCheckBox == null))
                {
                    this.mUIPasswordmustcontainuCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainuCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chkupper";
                    this.mUIPasswordmustcontainuCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chkupper";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain upper case letters";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chkupper CHECKED ty";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "105";
                    this.mUIPasswordmustcontainuCheckBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainuCheckBox;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainnCheckBox
        {
            get
            {
                if ((this.mUIPasswordmustcontainnCheckBox == null))
                {
                    this.mUIPasswordmustcontainnCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainnCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chknumbers";
                    this.mUIPasswordmustcontainnCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chknumbers";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain numbers";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chknumbers CHECKED ";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "106";
                    this.mUIPasswordmustcontainnCheckBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainnCheckBox;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainaCheckBox
        {
            get
            {
                if ((this.mUIPasswordmustcontainaCheckBox == null))
                {
                    this.mUIPasswordmustcontainaCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainaCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chksymbol";
                    this.mUIPasswordmustcontainaCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chksymbol";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain a symbol character";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chksymbol CHECKED t";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "107";
                    this.mUIPasswordmustcontainaCheckBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainaCheckBox;
            }
        }
        
        public HtmlInputButton UICtl00contentmainbtnSButton
        {
            get
            {
                if ((this.mUICtl00contentmainbtnSButton == null))
                {
                    this.mUICtl00contentmainbtnSButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmainbtnSButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnSave";
                    this.mUICtl00contentmainbtnSButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnSave";
                    this.mUICtl00contentmainbtnSButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmainbtnSButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmainbtnSButton.FilterProperties["Src"] = "http://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUICtl00contentmainbtnSButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmainbtnSButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmainbtnSButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmainbtnSButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "210";
                    this.mUICtl00contentmainbtnSButton.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUICtl00contentmainbtnSButton;
            }
        }
        
        public HtmlInputButton UICtl00contentmainbtnCButton
        {
            get
            {
                if ((this.mUICtl00contentmainbtnCButton == null))
                {
                    this.mUICtl00contentmainbtnCButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmainbtnCButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnCancel";
                    this.mUICtl00contentmainbtnCButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnCancel";
                    this.mUICtl00contentmainbtnCButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmainbtnCButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmainbtnCButton.FilterProperties["Src"] = "http://fwtest.sel-expenses.com/shared/images/buttons/cancel_up.gif";
                    this.mUICtl00contentmainbtnCButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmainbtnCButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmainbtnCButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmainbtnCButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "211";
                    this.mUICtl00contentmainbtnCButton.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUICtl00contentmainbtnCButton;
            }
        }
        
        public HtmlEdit UINumberofattemptsbefoEdit
        {
            get
            {
                if ((this.mUINumberofattemptsbefoEdit == null))
                {
                    this.mUINumberofattemptsbefoEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINumberofattemptsbefoEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtattempts";
                    this.mUINumberofattemptsbefoEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtattempts";
                    this.mUINumberofattemptsbefoEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Number of attempts before lock-out";
                    this.mUINumberofattemptsbefoEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINumberofattemptsbefoEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINumberofattemptsbefoEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINumberofattemptsbefoEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtattempts value=5";
                    this.mUINumberofattemptsbefoEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "101";
                    this.mUINumberofattemptsbefoEdit.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUINumberofattemptsbefoEdit;
            }
        }
        
        public HtmlEdit UIPasswordexpiresafterEdit
        {
            get
            {
                if ((this.mUIPasswordexpiresafterEdit == null))
                {
                    this.mUIPasswordexpiresafterEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordexpiresafterEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtexpires";
                    this.mUIPasswordexpiresafterEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtexpires";
                    this.mUIPasswordexpiresafterEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password expires after x days (0 = never)";
                    this.mUIPasswordexpiresafterEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPasswordexpiresafterEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordexpiresafterEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIPasswordexpiresafterEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtexpires value=0 ";
                    this.mUIPasswordexpiresafterEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "102";
                    this.mUIPasswordexpiresafterEdit.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordexpiresafterEdit;
            }
        }
        
        public HtmlEdit UIPreviouspasswordsnotEdit
        {
            get
            {
                if ((this.mUIPreviouspasswordsnotEdit == null))
                {
                    this.mUIPreviouspasswordsnotEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPreviouspasswordsnotEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtprevious";
                    this.mUIPreviouspasswordsnotEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtprevious";
                    this.mUIPreviouspasswordsnotEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Previous passwords not permitted";
                    this.mUIPreviouspasswordsnotEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPreviouspasswordsnotEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPreviouspasswordsnotEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIPreviouspasswordsnotEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtprevious value=4";
                    this.mUIPreviouspasswordsnotEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "108";
                    this.mUIPreviouspasswordsnotEdit.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPreviouspasswordsnotEdit;
            }
        }
        
        public HtmlEdit UIPasswordexpiresafterEdit1
        {
            get
            {
                if ((this.mUIPasswordexpiresafterEdit1 == null))
                {
                    this.mUIPasswordexpiresafterEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordexpiresafterEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtexpires";
                    this.mUIPasswordexpiresafterEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtexpires";
                    this.mUIPasswordexpiresafterEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password expires after x days (0 = never)";
                    this.mUIPasswordexpiresafterEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPasswordexpiresafterEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordexpiresafterEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIPasswordexpiresafterEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtexpires value=1 ";
                    this.mUIPasswordexpiresafterEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "102";
                    this.mUIPasswordexpiresafterEdit1.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordexpiresafterEdit1;
            }
        }
        
        public HtmlEdit UIMinimumlengthEdit
        {
            get
            {
                if ((this.mUIMinimumlengthEdit == null))
                {
                    this.mUIMinimumlengthEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMinimumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlength1";
                    this.mUIMinimumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlength1";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Minimum length";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtlength1 value=0 ";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "103";
                    this.mUIMinimumlengthEdit.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMinimumlengthEdit;
            }
        }
        
        public HtmlEdit UIPreviouspasswordsnotEdit1
        {
            get
            {
                if ((this.mUIPreviouspasswordsnotEdit1 == null))
                {
                    this.mUIPreviouspasswordsnotEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPreviouspasswordsnotEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtprevious";
                    this.mUIPreviouspasswordsnotEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtprevious";
                    this.mUIPreviouspasswordsnotEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Previous passwords not permitted";
                    this.mUIPreviouspasswordsnotEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPreviouspasswordsnotEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPreviouspasswordsnotEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIPreviouspasswordsnotEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtprevious value=0";
                    this.mUIPreviouspasswordsnotEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "108";
                    this.mUIPreviouspasswordsnotEdit1.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPreviouspasswordsnotEdit1;
            }
        }
        
        public HtmlEdit UIMinimumlengthEdit1
        {
            get
            {
                if ((this.mUIMinimumlengthEdit1 == null))
                {
                    this.mUIMinimumlengthEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMinimumlengthEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlength1";
                    this.mUIMinimumlengthEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlength1";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Minimum length";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtlength1 value=6 ";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "103";
                    this.mUIMinimumlengthEdit1.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMinimumlengthEdit1;
            }
        }
        
        public HtmlEdit UIMaximumlengthEdit
        {
            get
            {
                if ((this.mUIMaximumlengthEdit == null))
                {
                    this.mUIMaximumlengthEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMaximumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlength2";
                    this.mUIMaximumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlength2";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Maximum length";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtlength2 value=0 ";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "104";
                    this.mUIMaximumlengthEdit.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMaximumlengthEdit;
            }
        }
        
        public HtmlLabel UIMaximumlengthLabel
        {
            get
            {
                if ((this.mUIMaximumlengthLabel == null))
                {
                    this.mUIMaximumlengthLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIMaximumlengthLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblMaximumPasswordLength";
                    this.mUIMaximumlengthLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIMaximumlengthLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtlength2";
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Maximum length";
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblMaximumPasswordL";
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "112";
                    this.mUIMaximumlengthLabel.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMaximumlengthLabel;
            }
        }
        
        public HtmlEdit UIMaximumlengthEdit1
        {
            get
            {
                if ((this.mUIMaximumlengthEdit1 == null))
                {
                    this.mUIMaximumlengthEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMaximumlengthEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlength2";
                    this.mUIMaximumlengthEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlength2";
                    this.mUIMaximumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Maximum length";
                    this.mUIMaximumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMaximumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMaximumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMaximumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtlength2 value=10";
                    this.mUIMaximumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "104";
                    this.mUIMaximumlengthEdit1.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMaximumlengthEdit1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIPasswordSettingsHyperlink;
        
        private HtmlComboBox mUIPasswordlengthComboBox;
        
        private HtmlCheckBox mUIPasswordmustcontainuCheckBox;
        
        private HtmlCheckBox mUIPasswordmustcontainnCheckBox;
        
        private HtmlCheckBox mUIPasswordmustcontainaCheckBox;
        
        private HtmlInputButton mUICtl00contentmainbtnSButton;
        
        private HtmlInputButton mUICtl00contentmainbtnCButton;
        
        private HtmlEdit mUINumberofattemptsbefoEdit;
        
        private HtmlEdit mUIPasswordexpiresafterEdit;
        
        private HtmlEdit mUIPreviouspasswordsnotEdit;
        
        private HtmlEdit mUIPasswordexpiresafterEdit1;
        
        private HtmlEdit mUIMinimumlengthEdit;
        
        private HtmlEdit mUIPreviouspasswordsnotEdit1;
        
        private HtmlEdit mUIMinimumlengthEdit1;
        
        private HtmlEdit mUIMaximumlengthEdit;
        
        private HtmlLabel mUIMaximumlengthLabel;
        
        private HtmlEdit mUIMaximumlengthEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIGeneralOptionsDocument1 : HtmlDocument
    {
        
        public UIGeneralOptionsDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "General Options";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/accountOptions.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/admin/accountOptions.aspx";
            this.WindowTitles.Add("General Options");
            #endregion
        }
        
        #region Properties
        public HtmlComboBox UIPasswordlengthComboBox
        {
            get
            {
                if ((this.mUIPasswordlengthComboBox == null))
                {
                    this.mUIPasswordlengthComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIPasswordlengthComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmblength";
                    this.mUIPasswordlengthComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmblength";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Password length";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "5";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmblength onchange=";
                    this.mUIPasswordlengthComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "12";
                    this.mUIPasswordlengthComboBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordlengthComboBox;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainuCheckBox
        {
            get
            {
                if ((this.mUIPasswordmustcontainuCheckBox == null))
                {
                    this.mUIPasswordmustcontainuCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainuCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chkupper";
                    this.mUIPasswordmustcontainuCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chkupper";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain upper case letters";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chkupper CHECKED ty";
                    this.mUIPasswordmustcontainuCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "105";
                    this.mUIPasswordmustcontainuCheckBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainuCheckBox;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainaCheckBox
        {
            get
            {
                if ((this.mUIPasswordmustcontainaCheckBox == null))
                {
                    this.mUIPasswordmustcontainaCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainaCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chksymbol";
                    this.mUIPasswordmustcontainaCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chksymbol";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain a symbol character";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chksymbol type=chec";
                    this.mUIPasswordmustcontainaCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "107";
                    this.mUIPasswordmustcontainaCheckBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainaCheckBox;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainnCheckBox
        {
            get
            {
                if ((this.mUIPasswordmustcontainnCheckBox == null))
                {
                    this.mUIPasswordmustcontainnCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainnCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chknumbers";
                    this.mUIPasswordmustcontainnCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chknumbers";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain numbers";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chknumbers type=che";
                    this.mUIPasswordmustcontainnCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "106";
                    this.mUIPasswordmustcontainnCheckBox.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainnCheckBox;
            }
        }
        
        public HtmlEdit UIMinimumlengthEdit
        {
            get
            {
                if ((this.mUIMinimumlengthEdit == null))
                {
                    this.mUIMinimumlengthEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMinimumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlength1";
                    this.mUIMinimumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlength1";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Minimum length";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtlength1 value=0 ";
                    this.mUIMinimumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "103";
                    this.mUIMinimumlengthEdit.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMinimumlengthEdit;
            }
        }
        
        public HtmlEdit UIMinimumlengthEdit1
        {
            get
            {
                if ((this.mUIMinimumlengthEdit1 == null))
                {
                    this.mUIMinimumlengthEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMinimumlengthEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlength1";
                    this.mUIMinimumlengthEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlength1";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Minimum length";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtlength1 maxLengt";
                    this.mUIMinimumlengthEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "103";
                    this.mUIMinimumlengthEdit1.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMinimumlengthEdit1;
            }
        }
        
        public HtmlEdit UIMaximumlengthEdit
        {
            get
            {
                if ((this.mUIMaximumlengthEdit == null))
                {
                    this.mUIMaximumlengthEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMaximumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlength2";
                    this.mUIMaximumlengthEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlength2";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Maximum length";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtlength2 value=0 ";
                    this.mUIMaximumlengthEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "104";
                    this.mUIMaximumlengthEdit.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIMaximumlengthEdit;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainaCheckBox1
        {
            get
            {
                if ((this.mUIPasswordmustcontainaCheckBox1 == null))
                {
                    this.mUIPasswordmustcontainaCheckBox1 = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainaCheckBox1.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chksymbol";
                    this.mUIPasswordmustcontainaCheckBox1.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chksymbol";
                    this.mUIPasswordmustcontainaCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainaCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain a symbol character";
                    this.mUIPasswordmustcontainaCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainaCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainaCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chksymbol CHECKED t";
                    this.mUIPasswordmustcontainaCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "107";
                    this.mUIPasswordmustcontainaCheckBox1.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainaCheckBox1;
            }
        }
        
        public HtmlCheckBox UIPasswordmustcontainnCheckBox1
        {
            get
            {
                if ((this.mUIPasswordmustcontainnCheckBox1 == null))
                {
                    this.mUIPasswordmustcontainnCheckBox1 = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIPasswordmustcontainnCheckBox1.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chknumbers";
                    this.mUIPasswordmustcontainnCheckBox1.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chknumbers";
                    this.mUIPasswordmustcontainnCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIPasswordmustcontainnCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Password must contain numbers";
                    this.mUIPasswordmustcontainnCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIPasswordmustcontainnCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIPasswordmustcontainnCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_chknumbers CHECKED ";
                    this.mUIPasswordmustcontainnCheckBox1.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "106";
                    this.mUIPasswordmustcontainnCheckBox1.WindowTitles.Add("General Options");
                    #endregion
                }
                return this.mUIPasswordmustcontainnCheckBox1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlComboBox mUIPasswordlengthComboBox;
        
        private HtmlCheckBox mUIPasswordmustcontainuCheckBox;
        
        private HtmlCheckBox mUIPasswordmustcontainaCheckBox;
        
        private HtmlCheckBox mUIPasswordmustcontainnCheckBox;
        
        private HtmlEdit mUIMinimumlengthEdit;
        
        private HtmlEdit mUIMinimumlengthEdit1;
        
        private HtmlEdit mUIMaximumlengthEdit;
        
        private HtmlCheckBox mUIPasswordmustcontainaCheckBox1;
        
        private HtmlCheckBox mUIPasswordmustcontainnCheckBox1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordWindowWindow : BrowserWindow
    {
        
        public UIChangePasswordWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Change Password";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIChangePasswordDocument UIChangePasswordDocument
        {
            get
            {
                if ((this.mUIChangePasswordDocument == null))
                {
                    this.mUIChangePasswordDocument = new UIChangePasswordDocument(this);
                }
                return this.mUIChangePasswordDocument;
            }
        }
        
        public UIChangePasswordDocument1 UIChangePasswordDocument1
        {
            get
            {
                if ((this.mUIChangePasswordDocument1 == null))
                {
                    this.mUIChangePasswordDocument1 = new UIChangePasswordDocument1(this);
                }
                return this.mUIChangePasswordDocument1;
            }
        }
        
        public UIChangePasswordDocument2 UIChangePasswordDocument2
        {
            get
            {
                if ((this.mUIChangePasswordDocument2 == null))
                {
                    this.mUIChangePasswordDocument2 = new UIChangePasswordDocument2(this);
                }
                return this.mUIChangePasswordDocument2;
            }
        }
        
        public UIChangePasswordDocument3 UIChangePasswordDocument3
        {
            get
            {
                if ((this.mUIChangePasswordDocument3 == null))
                {
                    this.mUIChangePasswordDocument3 = new UIChangePasswordDocument3(this);
                }
                return this.mUIChangePasswordDocument3;
            }
        }
        
        public UIChangePasswordDocument4 UIChangePasswordDocument4
        {
            get
            {
                if ((this.mUIChangePasswordDocument4 == null))
                {
                    this.mUIChangePasswordDocument4 = new UIChangePasswordDocument4(this);
                }
                return this.mUIChangePasswordDocument4;
            }
        }
        
        public UIChangePasswordDocument5 UIChangePasswordDocument5
        {
            get
            {
                if ((this.mUIChangePasswordDocument5 == null))
                {
                    this.mUIChangePasswordDocument5 = new UIChangePasswordDocument5(this);
                }
                return this.mUIChangePasswordDocument5;
            }
        }
        
        public UIChangePasswordDocument6 UIChangePasswordDocument6
        {
            get
            {
                if ((this.mUIChangePasswordDocument6 == null))
                {
                    this.mUIChangePasswordDocument6 = new UIChangePasswordDocument6(this);
                }
                return this.mUIChangePasswordDocument6;
            }
        }
        
        public UIChangePasswordDocument7 UIChangePasswordDocument7
        {
            get
            {
                if ((this.mUIChangePasswordDocument7 == null))
                {
                    this.mUIChangePasswordDocument7 = new UIChangePasswordDocument7(this);
                }
                return this.mUIChangePasswordDocument7;
            }
        }
        #endregion
        
        #region Fields
        private UIChangePasswordDocument mUIChangePasswordDocument;
        
        private UIChangePasswordDocument1 mUIChangePasswordDocument1;
        
        private UIChangePasswordDocument2 mUIChangePasswordDocument2;
        
        private UIChangePasswordDocument3 mUIChangePasswordDocument3;
        
        private UIChangePasswordDocument4 mUIChangePasswordDocument4;
        
        private UIChangePasswordDocument5 mUIChangePasswordDocument5;
        
        private UIChangePasswordDocument6 mUIChangePasswordDocument6;
        
        private UIChangePasswordDocument7 mUIChangePasswordDocument7;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument : HtmlDocument
    {
        
        public UIChangePasswordDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=2&employeeid=5" +
                "33";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIOldPasswordEdit
        {
            get
            {
                if ((this.mUIOldPasswordEdit == null))
                {
                    this.mUIOldPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIOldPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtold";
                    this.mUIOldPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtold";
                    this.mUIOldPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Old Password";
                    this.mUIOldPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIOldPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIOldPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIOldPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtold value=\"\" typ";
                    this.mUIOldPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIOldPasswordEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIOldPasswordEdit;
            }
        }
        
        public HtmlEdit UINewPasswordEdit
        {
            get
            {
                if ((this.mUINewPasswordEdit == null))
                {
                    this.mUINewPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtnew";
                    this.mUINewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtnew";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "New Password";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtnew value=\"\" typ";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUINewPasswordEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUINewPasswordEdit;
            }
        }
        
        public HtmlEdit UIConfirmNewPasswordEdit
        {
            get
            {
                if ((this.mUIConfirmNewPasswordEdit == null))
                {
                    this.mUIConfirmNewPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIConfirmNewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtrenew";
                    this.mUIConfirmNewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtrenew";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Confirm New Password";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtrenew value=\"\" t";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUIConfirmNewPasswordEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIConfirmNewPasswordEdit;
            }
        }
        
        public HtmlSpan UICtl00_contentmain_lbPane
        {
            get
            {
                if ((this.mUICtl00_contentmain_lbPane == null))
                {
                    this.mUICtl00_contentmain_lbPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_lblmsg";
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "\r\n\r\nThe password could not be changed as";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: red\" id=ctl00_contentmain_";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUICtl00_contentmain_lbPane.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00_contentmain_lbPane;
            }
        }
        
        public UIMaindivPane UIMaindivPane
        {
            get
            {
                if ((this.mUIMaindivPane == null))
                {
                    this.mUIMaindivPane = new UIMaindivPane(this);
                }
                return this.mUIMaindivPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIOldPasswordEdit;
        
        private HtmlEdit mUINewPasswordEdit;
        
        private HtmlEdit mUIConfirmNewPasswordEdit;
        
        private HtmlSpan mUICtl00_contentmain_lbPane;
        
        private UIMaindivPane mUIMaindivPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMaindivPane : HtmlDiv
    {
        
        public UIMaindivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "maindiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Please enter your current password and t";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=maindiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIYournewpasswordmustcCustom
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom == null))
                {
                    this.mUIYournewpasswordmustcCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["InnerText"] = "Your new password must contain an approv";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom;
            }
        }
        
        public HtmlCustom UIYournewpasswordmustcCustom1
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom1 == null))
                {
                    this.mUIYournewpasswordmustcCustom1 = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom1.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom1.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom1.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["InnerText"] = "Your new password must contain a number.";
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom1.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom1;
            }
        }
        
        public HtmlCustom UIYournewpasswordmustcCustom2
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom2 == null))
                {
                    this.mUIYournewpasswordmustcCustom2 = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom2.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom2.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom2.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["InnerText"] = "Your new password must contain an upper ";
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom2.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIYournewpasswordmustcCustom;
        
        private HtmlCustom mUIYournewpasswordmustcCustom1;
        
        private HtmlCustom mUIYournewpasswordmustcCustom2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument1 : HtmlDocument
    {
        
        public UIChangePasswordDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=2&employeeid=" +
                "533";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UICtl00contentmaincmdoButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdoButton == null))
                {
                    this.mUICtl00contentmaincmdoButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdok";
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdok";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdoButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "8";
                    this.mUICtl00contentmaincmdoButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00contentmaincmdoButton;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdcButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdcButton == null))
                {
                    this.mUICtl00contentmaincmdcButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdcButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdcancel";
                    this.mUICtl00contentmaincmdcButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdcancel";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdcButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/cancel_up.gif";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "9";
                    this.mUICtl00contentmaincmdcButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00contentmaincmdcButton;
            }
        }
        
        public UIMaindivPane1 UIMaindivPane
        {
            get
            {
                if ((this.mUIMaindivPane == null))
                {
                    this.mUIMaindivPane = new UIMaindivPane1(this);
                }
                return this.mUIMaindivPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUICtl00contentmaincmdoButton;
        
        private HtmlInputButton mUICtl00contentmaincmdcButton;
        
        private UIMaindivPane1 mUIMaindivPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMaindivPane1 : HtmlDiv
    {
        
        public UIMaindivPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "maindiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Please enter your current password and t";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=maindiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIYournewpasswordmustbCustom
        {
            get
            {
                if ((this.mUIYournewpasswordmustbCustom == null))
                {
                    this.mUIYournewpasswordmustbCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustbCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustbCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustbCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustbCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustbCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustbCustom.FilterProperties["InnerText"] = "Your new password must be 6 characters i";
                    this.mUIYournewpasswordmustbCustom.FilterProperties["TagInstance"] = "4";
                    this.mUIYournewpasswordmustbCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustbCustom;
            }
        }
        
        public HtmlCustom UIYournewpasswordcannoCustom
        {
            get
            {
                if ((this.mUIYournewpasswordcannoCustom == null))
                {
                    this.mUIYournewpasswordcannoCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordcannoCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordcannoCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordcannoCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordcannoCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordcannoCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordcannoCustom.FilterProperties["InnerText"] = "Your new password cannot be any of the p";
                    this.mUIYournewpasswordcannoCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordcannoCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordcannoCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIYournewpasswordmustbCustom;
        
        private HtmlCustom mUIYournewpasswordcannoCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument2 : HtmlDocument
    {
        
        public UIChangePasswordDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=1&employeeid=" +
                "533";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UINewPasswordEdit
        {
            get
            {
                if ((this.mUINewPasswordEdit == null))
                {
                    this.mUINewPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtnew";
                    this.mUINewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtnew";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "New Password";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtnew value=\"\" typ";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUINewPasswordEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUINewPasswordEdit;
            }
        }
        
        public HtmlEdit UIConfirmNewPasswordEdit
        {
            get
            {
                if ((this.mUIConfirmNewPasswordEdit == null))
                {
                    this.mUIConfirmNewPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIConfirmNewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtrenew";
                    this.mUIConfirmNewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtrenew";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Confirm New Password";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtrenew value=\"\" t";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIConfirmNewPasswordEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIConfirmNewPasswordEdit;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdoButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdoButton == null))
                {
                    this.mUICtl00contentmaincmdoButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdok";
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdok";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdoButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUICtl00contentmaincmdoButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00contentmaincmdoButton;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdcButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdcButton == null))
                {
                    this.mUICtl00contentmaincmdcButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdcButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdcancel";
                    this.mUICtl00contentmaincmdcButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdcancel";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdcButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/cancel_up.gif";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "8";
                    this.mUICtl00contentmaincmdcButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00contentmaincmdcButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUINewPasswordEdit;
        
        private HtmlEdit mUIConfirmNewPasswordEdit;
        
        private HtmlInputButton mUICtl00contentmaincmdoButton;
        
        private HtmlInputButton mUICtl00contentmaincmdcButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument3 : HtmlDocument
    {
        
        public UIChangePasswordDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=1&employeeid=5" +
                "33";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public UIMaindivPane2 UIMaindivPane
        {
            get
            {
                if ((this.mUIMaindivPane == null))
                {
                    this.mUIMaindivPane = new UIMaindivPane2(this);
                }
                return this.mUIMaindivPane;
            }
        }
        
        public HtmlSpan UICtl00_contentmain_lbPane
        {
            get
            {
                if ((this.mUICtl00_contentmain_lbPane == null))
                {
                    this.mUICtl00_contentmain_lbPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_lblmsg";
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "\r\n\r\nThe password could not be changed as";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: red\" id=ctl00_contentmain_";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUICtl00_contentmain_lbPane.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00_contentmain_lbPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMaindivPane2 mUIMaindivPane;
        
        private HtmlSpan mUICtl00_contentmain_lbPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMaindivPane2 : HtmlDiv
    {
        
        public UIMaindivPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "maindiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Please enter a new password for the empl";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=maindiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIYournewpasswordmustcCustom
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom == null))
                {
                    this.mUIYournewpasswordmustcCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["InnerText"] = "Your new password must contain an approv";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom;
            }
        }
        
        public HtmlCustom UIYournewpasswordmustcCustom1
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom1 == null))
                {
                    this.mUIYournewpasswordmustcCustom1 = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom1.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom1.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom1.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["InnerText"] = "Your new password must contain a number.";
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom1.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom1;
            }
        }
        
        public HtmlCustom UIYournewpasswordmustcCustom2
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom2 == null))
                {
                    this.mUIYournewpasswordmustcCustom2 = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom2.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom2.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom2.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["InnerText"] = "Your new password must contain an upper ";
                    this.mUIYournewpasswordmustcCustom2.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom2.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom2;
            }
        }
        
        public HtmlCustom UIYournewpasswordmustbCustom
        {
            get
            {
                if ((this.mUIYournewpasswordmustbCustom == null))
                {
                    this.mUIYournewpasswordmustbCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustbCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustbCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustbCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustbCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustbCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustbCustom.FilterProperties["InnerText"] = "Your new password must be 6 characters i";
                    this.mUIYournewpasswordmustbCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustbCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustbCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIYournewpasswordmustcCustom;
        
        private HtmlCustom mUIYournewpasswordmustcCustom1;
        
        private HtmlCustom mUIYournewpasswordmustcCustom2;
        
        private HtmlCustom mUIYournewpasswordmustbCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument4 : HtmlDocument
    {
        
        public UIChangePasswordDocument4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=3&employeeid=" +
                "533";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public UIMaindivPane3 UIMaindivPane
        {
            get
            {
                if ((this.mUIMaindivPane == null))
                {
                    this.mUIMaindivPane = new UIMaindivPane3(this);
                }
                return this.mUIMaindivPane;
            }
        }
        
        public HtmlEdit UINewPasswordEdit
        {
            get
            {
                if ((this.mUINewPasswordEdit == null))
                {
                    this.mUINewPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtnew";
                    this.mUINewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtnew";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "New Password";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtnew value=\"\" typ";
                    this.mUINewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUINewPasswordEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUINewPasswordEdit;
            }
        }
        
        public HtmlEdit UIConfirmNewPasswordEdit
        {
            get
            {
                if ((this.mUIConfirmNewPasswordEdit == null))
                {
                    this.mUIConfirmNewPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIConfirmNewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtrenew";
                    this.mUIConfirmNewPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtrenew";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Confirm New Password";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtrenew value=\"\" t";
                    this.mUIConfirmNewPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIConfirmNewPasswordEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIConfirmNewPasswordEdit;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdoButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdoButton == null))
                {
                    this.mUICtl00contentmaincmdoButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdok";
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdok";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdoButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUICtl00contentmaincmdoButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00contentmaincmdoButton;
            }
        }
        
        public HtmlSpan UICtl00_contentmain_lbPane
        {
            get
            {
                if ((this.mUICtl00_contentmain_lbPane == null))
                {
                    this.mUICtl00_contentmain_lbPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_lblmsg";
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "\r\n\r\nThe password could not be changed as";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: red\" id=ctl00_contentmain_";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUICtl00_contentmain_lbPane.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00_contentmain_lbPane;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdcButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdcButton == null))
                {
                    this.mUICtl00contentmaincmdcButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdcButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdcancel";
                    this.mUICtl00contentmaincmdcButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdcancel";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdcButton.FilterProperties["Src"] = "https://fwtest.sel-expenses.com/shared/images/buttons/cancel_up.gif";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdcButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "8";
                    this.mUICtl00contentmaincmdcButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00contentmaincmdcButton;
            }
        }
        
        public HtmlDiv UIChangePasswordPane
        {
            get
            {
                if ((this.mUIChangePasswordPane == null))
                {
                    this.mUIChangePasswordPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIChangePasswordPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "subpagetitle";
                    this.mUIChangePasswordPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIChangePasswordPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Change Password";
                    this.mUIChangePasswordPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIChangePasswordPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIChangePasswordPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=subpagetitle";
                    this.mUIChangePasswordPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "22";
                    this.mUIChangePasswordPane.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIChangePasswordPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMaindivPane3 mUIMaindivPane;
        
        private HtmlEdit mUINewPasswordEdit;
        
        private HtmlEdit mUIConfirmNewPasswordEdit;
        
        private HtmlInputButton mUICtl00contentmaincmdoButton;
        
        private HtmlSpan mUICtl00_contentmain_lbPane;
        
        private HtmlInputButton mUICtl00contentmaincmdcButton;
        
        private HtmlDiv mUIChangePasswordPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMaindivPane3 : HtmlDiv
    {
        
        public UIMaindivPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "maindiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Please enter a new password for the empl";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=maindiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIYournewpasswordmustcCustom
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom == null))
                {
                    this.mUIYournewpasswordmustcCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["InnerText"] = "Your new password must contain an approv";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIYournewpasswordmustcCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument5 : HtmlDocument
    {
        
        public UIChangePasswordDocument5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=3&employeeid=5" +
                "33";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public UIMaindivPane4 UIMaindivPane
        {
            get
            {
                if ((this.mUIMaindivPane == null))
                {
                    this.mUIMaindivPane = new UIMaindivPane4(this);
                }
                return this.mUIMaindivPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMaindivPane4 mUIMaindivPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMaindivPane4 : HtmlDiv
    {
        
        public UIMaindivPane4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "maindiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Please enter a new password for the empl";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=maindiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIYournewpasswordmustcCustom
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom == null))
                {
                    this.mUIYournewpasswordmustcCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom.FilterProperties["InnerText"] = "Your new password must contain a number.";
                    this.mUIYournewpasswordmustcCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom;
            }
        }
        
        public HtmlCustom UIYournewpasswordmustcCustom1
        {
            get
            {
                if ((this.mUIYournewpasswordmustcCustom1 == null))
                {
                    this.mUIYournewpasswordmustcCustom1 = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustcCustom1.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustcCustom1.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustcCustom1.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["InnerText"] = "Your new password must contain an upper ";
                    this.mUIYournewpasswordmustcCustom1.FilterProperties["TagInstance"] = "1";
                    this.mUIYournewpasswordmustcCustom1.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustcCustom1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIYournewpasswordmustcCustom;
        
        private HtmlCustom mUIYournewpasswordmustcCustom1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument6 : HtmlDocument
    {
        
        public UIChangePasswordDocument6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/shared/changepassword.aspx?returnto=3&employeeid" +
                "=533";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public UIMaindivPane5 UIMaindivPane
        {
            get
            {
                if ((this.mUIMaindivPane == null))
                {
                    this.mUIMaindivPane = new UIMaindivPane5(this);
                }
                return this.mUIMaindivPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMaindivPane5 mUIMaindivPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMaindivPane5 : HtmlDiv
    {
        
        public UIMaindivPane5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "maindiv";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Please enter a new password for the empl";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=maindiv";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "23";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIYournewpasswordmustbCustom
        {
            get
            {
                if ((this.mUIYournewpasswordmustbCustom == null))
                {
                    this.mUIYournewpasswordmustbCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIYournewpasswordmustbCustom.SearchProperties["Id"] = null;
                    this.mUIYournewpasswordmustbCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIYournewpasswordmustbCustom.SearchProperties["TagName"] = "LI";
                    this.mUIYournewpasswordmustbCustom.FilterProperties["Class"] = null;
                    this.mUIYournewpasswordmustbCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIYournewpasswordmustbCustom.FilterProperties["InnerText"] = "Your new password must be greater than 6";
                    this.mUIYournewpasswordmustbCustom.FilterProperties["TagInstance"] = "4";
                    this.mUIYournewpasswordmustbCustom.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIYournewpasswordmustbCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIYournewpasswordmustbCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangePasswordDocument7 : HtmlDocument
    {
        
        public UIChangePasswordDocument7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Password";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/changepassword.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=2&employeeid=" +
                "68";
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UICtl00_contentmain_lbPane
        {
            get
            {
                if ((this.mUICtl00_contentmain_lbPane == null))
                {
                    this.mUICtl00_contentmain_lbPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_lblmsg";
                    this.mUICtl00_contentmain_lbPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "\r\n\r\nThe password could not be changed as";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: red\" id=ctl00_contentmain_";
                    this.mUICtl00_contentmain_lbPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    this.mUICtl00_contentmain_lbPane.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICtl00_contentmain_lbPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUICtl00_contentmain_lbPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoexpensesWinWindow : BrowserWindow
    {
        
        public UIWelcometoexpensesWinWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to expenses";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to expenses");
            this.WindowTitles.Add("Change Administrative Settings");
            this.WindowTitles.Add("Tailoring");
            this.WindowTitles.Add("User Management");
            this.WindowTitles.Add("https://testing.sel-expenses.com/shared/admin/selectemployee.aspx");
            this.WindowTitles.Add("Employees");
            this.WindowTitles.Add("My Details");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIWelcometoexpensesDocument UIWelcometoexpensesDocument
        {
            get
            {
                if ((this.mUIWelcometoexpensesDocument == null))
                {
                    this.mUIWelcometoexpensesDocument = new UIWelcometoexpensesDocument(this);
                }
                return this.mUIWelcometoexpensesDocument;
            }
        }
        
        public UIChangeAdministrativeDocument UIChangeAdministrativeDocument
        {
            get
            {
                if ((this.mUIChangeAdministrativeDocument == null))
                {
                    this.mUIChangeAdministrativeDocument = new UIChangeAdministrativeDocument(this);
                }
                return this.mUIChangeAdministrativeDocument;
            }
        }
        
        public UITailoringDocument UITailoringDocument
        {
            get
            {
                if ((this.mUITailoringDocument == null))
                {
                    this.mUITailoringDocument = new UITailoringDocument(this);
                }
                return this.mUITailoringDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIWelcometoexpensesDocument mUIWelcometoexpensesDocument;
        
        private UIChangeAdministrativeDocument mUIChangeAdministrativeDocument;
        
        private UITailoringDocument mUITailoringDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoexpensesDocument : HtmlDocument
    {
        
        public UIWelcometoexpensesDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Welcome to expenses";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/home.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/home.aspx";
            this.WindowTitles.Add("Welcome to expenses");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIChangeAdministrativePane
        {
            get
            {
                if ((this.mUIChangeAdministrativePane == null))
                {
                    this.mUIChangeAdministrativePane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIChangeAdministrativePane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel8";
                    this.mUIChangeAdministrativePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIChangeAdministrativePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Change Administrative Settings";
                    this.mUIChangeAdministrativePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIChangeAdministrativePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIChangeAdministrativePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: #6280a7\" id=menuitemlabel8";
                    this.mUIChangeAdministrativePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "20";
                    this.mUIChangeAdministrativePane.WindowTitles.Add("Welcome to expenses");
                    #endregion
                }
                return this.mUIChangeAdministrativePane;
            }
        }
        
        public UIMenuitem8Table UIMenuitem8Table
        {
            get
            {
                if ((this.mUIMenuitem8Table == null))
                {
                    this.mUIMenuitem8Table = new UIMenuitem8Table(this);
                }
                return this.mUIMenuitem8Table;
            }
        }
        
        public HtmlSpan UIMyDetailsPane
        {
            get
            {
                if ((this.mUIMyDetailsPane == null))
                {
                    this.mUIMyDetailsPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIMyDetailsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel3";
                    this.mUIMyDetailsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "My Details";
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: #6280a7\" id=menuitemlabel3";
                    this.mUIMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "10";
                    this.mUIMyDetailsPane.WindowTitles.Add("Welcome to expenses");
                    #endregion
                }
                return this.mUIMyDetailsPane;
            }
        }
        
        public UIHomePane UIHomePane
        {
            get
            {
                if ((this.mUIHomePane == null))
                {
                    this.mUIHomePane = new UIHomePane(this);
                }
                return this.mUIHomePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIChangeAdministrativePane;
        
        private UIMenuitem8Table mUIMenuitem8Table;
        
        private HtmlSpan mUIMyDetailsPane;
        
        private UIHomePane mUIHomePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuitem8Table : HtmlTable
    {
        
        public UIMenuitem8Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "menuitem8";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Change Administrative Settings\r\n\r\nManage";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=menuitem8 onmouseover=\"menuItemOver(8";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "1";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = null;
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "14";
            this.WindowTitles.Add("Welcome to expenses");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIManagebasicinformatiPane
        {
            get
            {
                if ((this.mUIManagebasicinformatiPane == null))
                {
                    this.mUIManagebasicinformatiPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIManagebasicinformatiPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIManagebasicinformatiPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIManagebasicinformatiPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Manage basic information such as Expense";
                    this.mUIManagebasicinformatiPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIManagebasicinformatiPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemdescription";
                    this.mUIManagebasicinformatiPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=menuitemdescription";
                    this.mUIManagebasicinformatiPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    this.mUIManagebasicinformatiPane.WindowTitles.Add("Welcome to expenses");
                    #endregion
                }
                return this.mUIManagebasicinformatiPane;
            }
        }
        
        public HtmlCell UIChangeAdministrativeCell
        {
            get
            {
                if ((this.mUIChangeAdministrativeCell == null))
                {
                    this.mUIChangeAdministrativeCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIChangeAdministrativeCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIChangeAdministrativeCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIChangeAdministrativeCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIChangeAdministrativeCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "Change Administrative Settings\r\n\r\nManage";
                    this.mUIChangeAdministrativeCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIChangeAdministrativeCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUIChangeAdministrativeCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIChangeAdministrativeCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIChangeAdministrativeCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
                    this.mUIChangeAdministrativeCell.WindowTitles.Add("Welcome to expenses");
                    #endregion
                }
                return this.mUIChangeAdministrativeCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIManagebasicinformatiPane;
        
        private HtmlCell mUIChangeAdministrativeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHomePane : HtmlSpan
    {
        
        public UIHomePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_SiteMapPath1";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"FONT-FAMILY: Arial; TEXT-DECORATI";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Welcome to expenses");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIHomePane1
        {
            get
            {
                if ((this.mUIHomePane1 == null))
                {
                    this.mUIHomePane1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIHomePane1.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIHomePane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home";
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"TEXT-DECORATION: none\"";
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
                    this.mUIHomePane1.WindowTitles.Add("Welcome to expenses");
                    #endregion
                }
                return this.mUIHomePane1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIHomePane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIChangeAdministrativeDocument : HtmlDocument
    {
        
        public UIChangeAdministrativeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Change Administrative Settings";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/adminmenu.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/adminmenu.aspx";
            this.WindowTitles.Add("Change Administrative Settings");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UITailoringPane
        {
            get
            {
                if ((this.mUITailoringPane == null))
                {
                    this.mUITailoringPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUITailoringPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel1";
                    this.mUITailoringPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Tailoring";
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel1 class=menuitemtitle";
                    this.mUITailoringPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "8";
                    this.mUITailoringPane.WindowTitles.Add("Change Administrative Settings");
                    #endregion
                }
                return this.mUITailoringPane;
            }
        }
        
        public HtmlImage UIIcons48shadowuser1_pImage
        {
            get
            {
                if ((this.mUIIcons48shadowuser1_pImage == null))
                {
                    this.mUIIcons48shadowuser1_pImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIIcons48shadowuser1_pImage.SearchProperties[HtmlImage.PropertyNames.Id] = "iconuser1_preferences";
                    this.mUIIcons48shadowuser1_pImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIIcons48shadowuser1_pImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUIIcons48shadowuser1_pImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/icons/48/plain/user1_preferences.gif";
                    this.mUIIcons48shadowuser1_pImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://testing.sel-expenses.com/icons/48/plain/user1_preferences.gif";
                    this.mUIIcons48shadowuser1_pImage.FilterProperties[HtmlImage.PropertyNames.Class] = "menuitemlogo";
                    this.mUIIcons48shadowuser1_pImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "id=iconuser1_preferences class=menuiteml";
                    this.mUIIcons48shadowuser1_pImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "5";
                    this.mUIIcons48shadowuser1_pImage.WindowTitles.Add("Change Administrative Settings");
                    #endregion
                }
                return this.mUIIcons48shadowuser1_pImage;
            }
        }
        
        public HtmlSpan UIUserManagementPane
        {
            get
            {
                if ((this.mUIUserManagementPane == null))
                {
                    this.mUIUserManagementPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIUserManagementPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel3";
                    this.mUIUserManagementPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIUserManagementPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "User Management";
                    this.mUIUserManagementPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIUserManagementPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIUserManagementPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: #6280a7\" id=menuitemlabel3";
                    this.mUIUserManagementPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "12";
                    this.mUIUserManagementPane.WindowTitles.Add("Change Administrative Settings");
                    #endregion
                }
                return this.mUIUserManagementPane;
            }
        }
        
        public HtmlSpan UIUserManagementPane1
        {
            get
            {
                if ((this.mUIUserManagementPane1 == null))
                {
                    this.mUIUserManagementPane1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIUserManagementPane1.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel3";
                    this.mUIUserManagementPane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIUserManagementPane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "User Management";
                    this.mUIUserManagementPane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIUserManagementPane1.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIUserManagementPane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel3 class=menuitemtitle";
                    this.mUIUserManagementPane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "12";
                    this.mUIUserManagementPane1.WindowTitles.Add("Change Administrative Settings");
                    #endregion
                }
                return this.mUIUserManagementPane1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUITailoringPane;
        
        private HtmlImage mUIIcons48shadowuser1_pImage;
        
        private HtmlSpan mUIUserManagementPane;
        
        private HtmlSpan mUIUserManagementPane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITailoringDocument : HtmlDocument
    {
        
        public UITailoringDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Tailoring";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/tailoringmenu.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/tailoringmenu.aspx";
            this.WindowTitles.Add("Tailoring");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIGeneralOptionsPane
        {
            get
            {
                if ((this.mUIGeneralOptionsPane == null))
                {
                    this.mUIGeneralOptionsPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIGeneralOptionsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel9";
                    this.mUIGeneralOptionsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "General Options";
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=menuitemlabel9 class=menuitemtitle";
                    this.mUIGeneralOptionsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "26";
                    this.mUIGeneralOptionsPane.WindowTitles.Add("Tailoring");
                    #endregion
                }
                return this.mUIGeneralOptionsPane;
            }
        }
        
        public UICtl00_SiteMapPath1Pane1 UICtl00_SiteMapPath1Pane
        {
            get
            {
                if ((this.mUICtl00_SiteMapPath1Pane == null))
                {
                    this.mUICtl00_SiteMapPath1Pane = new UICtl00_SiteMapPath1Pane1(this);
                }
                return this.mUICtl00_SiteMapPath1Pane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIGeneralOptionsPane;
        
        private UICtl00_SiteMapPath1Pane1 mUICtl00_SiteMapPath1Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICtl00_SiteMapPath1Pane1 : HtmlSpan
    {
        
        public UICtl00_SiteMapPath1Pane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_SiteMapPath1";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home : Change Administrative Settings : ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"FONT-FAMILY: Arial; TEXT-DECORATI";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Tailoring");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHomeHyperlink
        {
            get
            {
                if ((this.mUIHomeHyperlink == null))
                {
                    this.mUIHomeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Home";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/home.aspx";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://testing.sel-expenses.com/home.aspx";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "style=\"TEXT-DECORATION: none\" href=\"/hom";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHomeHyperlink.WindowTitles.Add("Tailoring");
                    #endregion
                }
                return this.mUIHomeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHomeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoexpensesWinWindow1 : BrowserWindow
    {
        
        public UIWelcometoexpensesWinWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to expenses";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to expenses");
            this.WindowTitles.Add("Change Administrative Settings");
            this.WindowTitles.Add("User Management");
            this.WindowTitles.Add("https://testing.sel-expenses.com/shared/admin/selectemployee.aspx");
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIUserManagementDocument UIUserManagementDocument
        {
            get
            {
                if ((this.mUIUserManagementDocument == null))
                {
                    this.mUIUserManagementDocument = new UIUserManagementDocument(this);
                }
                return this.mUIUserManagementDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIUserManagementDocument mUIUserManagementDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIUserManagementDocument : HtmlDocument
    {
        
        public UIUserManagementDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "User Management";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/usermanagementmenu.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/usermanagementmenu.aspx";
            this.WindowTitles.Add("User Management");
            #endregion
        }
        
        #region Properties
        public UIMenuitem2Table UIMenuitem2Table
        {
            get
            {
                if ((this.mUIMenuitem2Table == null))
                {
                    this.mUIMenuitem2Table = new UIMenuitem2Table(this);
                }
                return this.mUIMenuitem2Table;
            }
        }
        
        public UIMenuitem3Table UIMenuitem3Table
        {
            get
            {
                if ((this.mUIMenuitem3Table == null))
                {
                    this.mUIMenuitem3Table = new UIMenuitem3Table(this);
                }
                return this.mUIMenuitem3Table;
            }
        }
        
        public HtmlSpan UIEmployeesPane
        {
            get
            {
                if ((this.mUIEmployeesPane == null))
                {
                    this.mUIEmployeesPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIEmployeesPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel3";
                    this.mUIEmployeesPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Employees";
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: #6280a7\" id=menuitemlabel3";
                    this.mUIEmployeesPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "14";
                    this.mUIEmployeesPane.WindowTitles.Add("User Management");
                    #endregion
                }
                return this.mUIEmployeesPane;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuitem2Table mUIMenuitem2Table;
        
        private UIMenuitem3Table mUIMenuitem3Table;
        
        private HtmlSpan mUIEmployeesPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuitem2Table : HtmlTable
    {
        
        public UIMenuitem2Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "menuitem2";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Signoff Groups\r\n\r\nA Group determines the";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=menuitem2 onmouseover=\"menuItemOver(2";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "1";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = null;
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "5";
            this.WindowTitles.Add("User Management");
            #endregion
        }
        
        #region Properties
        public HtmlCell UISignoffGroupsAGroupdCell
        {
            get
            {
                if ((this.mUISignoffGroupsAGroupdCell == null))
                {
                    this.mUISignoffGroupsAGroupdCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUISignoffGroupsAGroupdCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUISignoffGroupsAGroupdCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUISignoffGroupsAGroupdCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUISignoffGroupsAGroupdCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "Signoff Groups\r\n\r\nA Group determines the";
                    this.mUISignoffGroupsAGroupdCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUISignoffGroupsAGroupdCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUISignoffGroupsAGroupdCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUISignoffGroupsAGroupdCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUISignoffGroupsAGroupdCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
                    this.mUISignoffGroupsAGroupdCell.WindowTitles.Add("User Management");
                    #endregion
                }
                return this.mUISignoffGroupsAGroupdCell;
            }
        }
        
        public HtmlSpan UIAGroupdeterminesthesPane
        {
            get
            {
                if ((this.mUIAGroupdeterminesthesPane == null))
                {
                    this.mUIAGroupdeterminesthesPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIAGroupdeterminesthesPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIAGroupdeterminesthesPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIAGroupdeterminesthesPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "A Group determines the stages a claim ha";
                    this.mUIAGroupdeterminesthesPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIAGroupdeterminesthesPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemdescription";
                    this.mUIAGroupdeterminesthesPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=menuitemdescription";
                    this.mUIAGroupdeterminesthesPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    this.mUIAGroupdeterminesthesPane.WindowTitles.Add("User Management");
                    #endregion
                }
                return this.mUIAGroupdeterminesthesPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUISignoffGroupsAGroupdCell;
        
        private HtmlSpan mUIAGroupdeterminesthesPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuitem3Table : HtmlTable
    {
        
        public UIMenuitem3Table(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "menuitem3";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Employees\r\n\r\nAdd, edit or delete employe";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=menuitem3 onmouseover=\"menuItemOver(3";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "1";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = null;
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("User Management");
            #endregion
        }
        
        #region Properties
        public HtmlCell UIEmployeesAddeditordeCell
        {
            get
            {
                if ((this.mUIEmployeesAddeditordeCell == null))
                {
                    this.mUIEmployeesAddeditordeCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIEmployeesAddeditordeCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIEmployeesAddeditordeCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIEmployeesAddeditordeCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIEmployeesAddeditordeCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "Employees\r\n\r\nAdd, edit or delete employe";
                    this.mUIEmployeesAddeditordeCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUIEmployeesAddeditordeCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUIEmployeesAddeditordeCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUIEmployeesAddeditordeCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUIEmployeesAddeditordeCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
                    this.mUIEmployeesAddeditordeCell.WindowTitles.Add("User Management");
                    #endregion
                }
                return this.mUIEmployeesAddeditordeCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIEmployeesAddeditordeCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoexpensesWinWindow2 : BrowserWindow
    {
        
        public UIWelcometoexpensesWinWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to expenses";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to expenses");
            this.WindowTitles.Add("Change Administrative Settings");
            this.WindowTitles.Add("User Management");
            this.WindowTitles.Add("https://testing.sel-expenses.com/shared/admin/selectemployee.aspx");
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHttpstestingselexpenDocument UIHttpstestingselexpenDocument
        {
            get
            {
                if ((this.mUIHttpstestingselexpenDocument == null))
                {
                    this.mUIHttpstestingselexpenDocument = new UIHttpstestingselexpenDocument(this);
                }
                return this.mUIHttpstestingselexpenDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHttpstestingselexpenDocument mUIHttpstestingselexpenDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHttpstestingselexpenDocument : HtmlDocument
    {
        
        public UIHttpstestingselexpenDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/selectemployee.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/shared/admin/selectemployee.aspx";
            this.WindowTitles.Add("https://testing.sel-expenses.com/shared/admin/selectemployee.aspx");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtusername";
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtusername";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Username";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fillspan";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtusername class=f";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIUsernameEdit.WindowTitles.Add("https://testing.sel-expenses.com/shared/admin/selectemployee.aspx");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdoButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdoButton == null))
                {
                    this.mUICtl00contentmaincmdoButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdok";
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdok";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdoButton.FilterProperties["Src"] = "https://testing.sel-expenses.com/shared/images/buttons/pagebutton_search.gif";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUICtl00contentmaincmdoButton.WindowTitles.Add("https://testing.sel-expenses.com/shared/admin/selectemployee.aspx");
                    #endregion
                }
                return this.mUICtl00contentmaincmdoButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIUsernameEdit;
        
        private HtmlInputButton mUICtl00contentmaincmdoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoexpensesWinWindow3 : BrowserWindow
    {
        
        public UIWelcometoexpensesWinWindow3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to expenses";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to expenses");
            this.WindowTitles.Add("Change Administrative Settings");
            this.WindowTitles.Add("User Management");
            this.WindowTitles.Add("https://testing.sel-expenses.com/shared/admin/selectemployee.aspx");
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIEmployeesDocument1 UIEmployeesDocument
        {
            get
            {
                if ((this.mUIEmployeesDocument == null))
                {
                    this.mUIEmployeesDocument = new UIEmployeesDocument1(this);
                }
                return this.mUIEmployeesDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeesDocument1 mUIEmployeesDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEmployeesDocument1 : HtmlDocument
    {
        
        public UIEmployeesDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Employees";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/adminemployees.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/shared/admin/adminemployees.aspx?surname=&roleid" +
                "=0&groupid=&costcodeid=0&departmentid=0&username=james";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public UITbl_gridEmployees_53Row1 UITbl_gridEmployees_53Row
        {
            get
            {
                if ((this.mUITbl_gridEmployees_53Row == null))
                {
                    this.mUITbl_gridEmployees_53Row = new UITbl_gridEmployees_53Row1(this);
                }
                return this.mUITbl_gridEmployees_53Row;
            }
        }
        #endregion
        
        #region Fields
        private UITbl_gridEmployees_53Row1 mUITbl_gridEmployees_53Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_gridEmployees_53Row1 : HtmlRow
    {
        
        public UITbl_gridEmployees_53Row1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridEmployees_533";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "jamesMrJamesLloydNormal";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridEmployees_533";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIChangePasswordImage
        {
            get
            {
                if ((this.mUIChangePasswordImage == null))
                {
                    this.mUIChangePasswordImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Change Password";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://testing.sel-expenses.com/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Change Password\" src=\"../images/ico";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "4";
                    this.mUIChangePasswordImage.WindowTitles.Add("Employees");
                    #endregion
                }
                return this.mUIChangePasswordImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIChangePasswordImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoexpensesWinWindow4 : BrowserWindow
    {
        
        public UIWelcometoexpensesWinWindow4()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to expenses";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to expenses");
            this.WindowTitles.Add("My Details");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIMyDetailsDocument1 UIMyDetailsDocument
        {
            get
            {
                if ((this.mUIMyDetailsDocument == null))
                {
                    this.mUIMyDetailsDocument = new UIMyDetailsDocument1(this);
                }
                return this.mUIMyDetailsDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIMyDetailsDocument1 mUIMyDetailsDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMyDetailsDocument1 : HtmlDocument
    {
        
        public UIMyDetailsDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "My Details";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/mydetailsmenu.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/mydetailsmenu.aspx";
            this.WindowTitles.Add("My Details");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIChangeMyDetailsPane
        {
            get
            {
                if ((this.mUIChangeMyDetailsPane == null))
                {
                    this.mUIChangeMyDetailsPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIChangeMyDetailsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "menuitemlabel0";
                    this.mUIChangeMyDetailsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIChangeMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Change My Details";
                    this.mUIChangeMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIChangeMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "menuitemtitle";
                    this.mUIChangeMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"COLOR: #6280a7\" id=menuitemlabel0";
                    this.mUIChangeMyDetailsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
                    this.mUIChangeMyDetailsPane.WindowTitles.Add("My Details");
                    #endregion
                }
                return this.mUIChangeMyDetailsPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIChangeMyDetailsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWelcometoexpensesWinWindow5 : BrowserWindow
    {
        
        public UIWelcometoexpensesWinWindow5()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Welcome to expenses";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Welcome to expenses");
            this.WindowTitles.Add("My Details");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIMyDetailsDocument11 UIMyDetailsDocument1
        {
            get
            {
                if ((this.mUIMyDetailsDocument1 == null))
                {
                    this.mUIMyDetailsDocument1 = new UIMyDetailsDocument11(this);
                }
                return this.mUIMyDetailsDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIMyDetailsDocument11 mUIMyDetailsDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMyDetailsDocument11 : HtmlDocument
    {
        
        public UIMyDetailsDocument11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "My Details";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/information/mydetails.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://testing.sel-expenses.com/shared/information/mydetails.aspx";
            this.WindowTitles.Add("My Details");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIChangePasswordHyperlink
        {
            get
            {
                if ((this.mUIChangePasswordHyperlink == null))
                {
                    this.mUIChangePasswordHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "ctl00_contentmain_cmbchangep";
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIChangePasswordHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Change Password";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "WebForm_DoPostBackWithOptions(new%20WebForm_PostBackOptions(%22ctl00$contentmain$" +
                        "cmbchangep%22,%20%22%22,%20true,%20%22%22,%20%22%22,%20false,%20true))";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(\"ctl00$conte" +
                        "ntmain$cmbchangep\", \"\", true, \"\", \"\", false, true))";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbchangep href=\'ja";
                    this.mUIChangePasswordHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "11";
                    this.mUIChangePasswordHyperlink.WindowTitles.Add("My Details");
                    #endregion
                }
                return this.mUIChangePasswordHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIChangePasswordHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHttpfwtestselexpenseWindow : BrowserWindow
    {
        
        public UIHttpfwtestselexpenseWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHttpfwtestselexpenseDocument UIHttpfwtestselexpenseDocument
        {
            get
            {
                if ((this.mUIHttpfwtestselexpenseDocument == null))
                {
                    this.mUIHttpfwtestselexpenseDocument = new UIHttpfwtestselexpenseDocument(this);
                }
                return this.mUIHttpfwtestselexpenseDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHttpfwtestselexpenseDocument mUIHttpfwtestselexpenseDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHttpfwtestselexpenseDocument : HtmlDocument
    {
        
        public UIHttpfwtestselexpenseDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/selectemployee.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx";
            this.WindowTitles.Add("http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtusername";
                    this.mUIUsernameEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtusername";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Username";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fillspan";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtusername class=f";
                    this.mUIUsernameEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIUsernameEdit.WindowTitles.Add("http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdoButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdoButton == null))
                {
                    this.mUICtl00contentmaincmdoButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdok";
                    this.mUICtl00contentmaincmdoButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdok";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdoButton.FilterProperties["Src"] = "http://fwtest.sel-expenses.com/shared/images/buttons/pagebutton_search.gif";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdoButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "7";
                    this.mUICtl00contentmaincmdoButton.WindowTitles.Add("http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
                    #endregion
                }
                return this.mUICtl00contentmaincmdoButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIUsernameEdit;
        
        private HtmlInputButton mUICtl00contentmaincmdoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHttpfwtestselexpenseWindow1 : BrowserWindow
    {
        
        public UIHttpfwtestselexpenseWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("http://fwtest.sel-expenses.com/shared/admin/selectemployee.aspx");
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIEmployeesDocument2 UIEmployeesDocument
        {
            get
            {
                if ((this.mUIEmployeesDocument == null))
                {
                    this.mUIEmployeesDocument = new UIEmployeesDocument2(this);
                }
                return this.mUIEmployeesDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeesDocument2 mUIEmployeesDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEmployeesDocument2 : HtmlDocument
    {
        
        public UIEmployeesDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Employees";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/adminemployees.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/admin/adminemployees.aspx?surname=&roleid=0" +
                "&groupid=&costcodeid=0&departmentid=0&username=james";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public UITbl_gridEmployees_53Row2 UITbl_gridEmployees_53Row
        {
            get
            {
                if ((this.mUITbl_gridEmployees_53Row == null))
                {
                    this.mUITbl_gridEmployees_53Row = new UITbl_gridEmployees_53Row2(this);
                }
                return this.mUITbl_gridEmployees_53Row;
            }
        }
        #endregion
        
        #region Fields
        private UITbl_gridEmployees_53Row2 mUITbl_gridEmployees_53Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_gridEmployees_53Row2 : HtmlRow
    {
        
        public UITbl_gridEmployees_53Row2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridEmployees_533";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "jamesMrJamesLloyd";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridEmployees_533";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIChangePasswordImage
        {
            get
            {
                if ((this.mUIChangePasswordImage == null))
                {
                    this.mUIChangePasswordImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Change Password";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://fwtest.sel-expenses.com/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "/shared/changepassword.aspx";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Href] = "http://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=1&employeeid=5" +
                        "33";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Change Password\" src=\"../images/ico";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "4";
                    this.mUIChangePasswordImage.WindowTitles.Add("Employees");
                    #endregion
                }
                return this.mUIChangePasswordImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIChangePasswordImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFrameworkfromSoftwarWindow : BrowserWindow
    {
        
        public UIFrameworkfromSoftwarWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Framework from Software (Europe) Ltd.";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Framework from Software (Europe) Ltd.");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIFrameworkfromSoftwarDocument UIFrameworkfromSoftwarDocument
        {
            get
            {
                if ((this.mUIFrameworkfromSoftwarDocument == null))
                {
                    this.mUIFrameworkfromSoftwarDocument = new UIFrameworkfromSoftwarDocument(this);
                }
                return this.mUIFrameworkfromSoftwarDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIFrameworkfromSoftwarDocument mUIFrameworkfromSoftwarDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFrameworkfromSoftwarDocument : HtmlDocument
    {
        
        public UIFrameworkfromSoftwarDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Framework from Software (Europe) Ltd.";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/home.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/home.aspx";
            this.WindowTitles.Add("Framework from Software (Europe) Ltd.");
            #endregion
        }
        
        #region Properties
        public UIHomePane2 UIHomePane
        {
            get
            {
                if ((this.mUIHomePane == null))
                {
                    this.mUIHomePane = new UIHomePane2(this);
                }
                return this.mUIHomePane;
            }
        }
        #endregion
        
        #region Fields
        private UIHomePane2 mUIHomePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHomePane2 : HtmlSpan
    {
        
        public UIHomePane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_SiteMapPath1";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"FONT-FAMILY: Arial; TEXT-DECORATI";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Framework from Software (Europe) Ltd.");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIHomePane1
        {
            get
            {
                if ((this.mUIHomePane1 == null))
                {
                    this.mUIHomePane1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIHomePane1.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIHomePane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Home";
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"TEXT-DECORATION: none\"";
                    this.mUIHomePane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
                    this.mUIHomePane1.WindowTitles.Add("Framework from Software (Europe) Ltd.");
                    #endregion
                }
                return this.mUIHomePane1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIHomePane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEmployeesWindowsInteWindow : BrowserWindow
    {
        
        public UIEmployeesWindowsInteWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Employees";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIEmployeesDocument3 UIEmployeesDocument
        {
            get
            {
                if ((this.mUIEmployeesDocument == null))
                {
                    this.mUIEmployeesDocument = new UIEmployeesDocument3(this);
                }
                return this.mUIEmployeesDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIEmployeesDocument3 mUIEmployeesDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEmployeesDocument3 : HtmlDocument
    {
        
        public UIEmployeesDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Employees";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/adminemployees.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/admin/adminemployees.aspx?surname=&roleid=" +
                "0&groupid=&costcodeid=0&departmentid=0&username=CodedUIAdmin";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public UITbl_gridEmployees_14Row UITbl_gridEmployees_14Row
        {
            get
            {
                if ((this.mUITbl_gridEmployees_14Row == null))
                {
                    this.mUITbl_gridEmployees_14Row = new UITbl_gridEmployees_14Row(this);
                }
                return this.mUITbl_gridEmployees_14Row;
            }
        }
        #endregion
        
        #region Fields
        private UITbl_gridEmployees_14Row mUITbl_gridEmployees_14Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITbl_gridEmployees_14Row : HtmlRow
    {
        
        public UITbl_gridEmployees_14Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridEmployees_148";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "CodedUIAdminMrCodedUIAdmin";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridEmployees_148";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Employees");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIChangePasswordImage
        {
            get
            {
                if ((this.mUIChangePasswordImage == null))
                {
                    this.mUIChangePasswordImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIChangePasswordImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Change Password";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/icons/replace2.gif";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "/shared/changepassword.aspx";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Href] = "https://fwtest.sel-expenses.com/shared/changepassword.aspx?returnto=1&employeeid=" +
                        "148";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Change Password\" src=\"../images/ico";
                    this.mUIChangePasswordImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "5";
                    this.mUIChangePasswordImage.WindowTitles.Add("Employees");
                    #endregion
                }
                return this.mUIChangePasswordImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIChangePasswordImage;
        #endregion
    }
}
