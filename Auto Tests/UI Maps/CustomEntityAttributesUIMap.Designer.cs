// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Auto_Tests.UIMaps.CustomEntityAttributesUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class CustomEntityAttributesUIMap
    {
        
        /// <summary>
        /// AssertAttributeTypeManadtoryAstrickIsShown - Use 'AssertAttributeTypeManadtoryAstrickIsShownExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAttributeTypeManadtoryAstrickIsShown()
        {
            #region Variable Declarations
            HtmlSpan uIItemPane2 = this.UINewCustomEntityWindoWindow.UINewCustomEntityDocument.UIItemPane2;
            #endregion

            // Verify that the 'InnerText' property of '*' pane equals '*'
            Assert.AreEqual(this.AssertAttributeTypeManadtoryAstrickIsShownExpectedValues.UIItemPane2InnerText, uIItemPane2.InnerText);

            // Verify that the 'ControlDefinition' property of '*' pane equals 'style="DISPLAY: inline; COLOR: red" id=ctl00_contentmain_reqAttributeType controltovalidate="ctl00_contentmain_cmbattributetype" display="Dynamic" validationGroup="vgAttribute" initialvalue errormessage="Please select a Type for the attribute." isvalid="false"'
            Assert.AreEqual(this.AssertAttributeTypeManadtoryAstrickIsShownExpectedValues.UIItemPane2ControlDefinition, uIItemPane2.ControlDefinition);

            // Verify that the 'ClassName' property of '*' pane equals 'HtmlPane'
            Assert.AreEqual(this.AssertAttributeTypeManadtoryAstrickIsShownExpectedValues.UIItemPane2ClassName, uIItemPane2.ClassName);
        }
        
        /// <summary>
        /// AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToList - Use 'AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToList()
        {
            #region Variable Declarations
            HtmlDiv uIDivMasterPopupPane = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument14.UIDivMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
            //
            //
            //Please add a List item.'
            Assert.AreEqual(this.AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues.UIDivMasterPopupPaneInnerText, uIDivMasterPopupPane.InnerText);
        }
        
        /// <summary>
        /// AssertEntityNameManadtoryAstrickIsShown - Use 'AssertEntityNameManadtoryAstrickIsShownExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertEntityNameManadtoryAstrickIsShown()
        {
            #region Variable Declarations
            HtmlDiv uIDisplaynamePane = this.UINewCustomEntityWindoWindow.UINewCustomEntityDocument.UICtl00_contentmain_pnPane.UIDisplaynamePane;
            HtmlSpan uIItemPane1 = this.UINewCustomEntityWindoWindow.UINewCustomEntityDocument.UIItemPane1;
            #endregion

            // Verify that the 'Class' property of 'Display name***' pane equals 'twocolumn'
            Assert.AreEqual(this.AssertEntityNameManadtoryAstrickIsShownExpectedValues.UIDisplaynamePaneClass, uIDisplaynamePane.Class);

            // Verify that the 'ControlType' property of '*' pane equals 'Pane'
            Assert.AreEqual(this.AssertEntityNameManadtoryAstrickIsShownExpectedValues.UIItemPane1ControlType, uIItemPane1.ControlType.ToString());

            // Verify that the 'InnerText' property of '*' pane equals '*'
            Assert.AreEqual(this.AssertEntityNameManadtoryAstrickIsShownExpectedValues.UIItemPane1InnerText, uIItemPane1.InnerText);

            // Verify that the 'ControlDefinition' property of '*' pane equals 'style="DISPLAY: inline; COLOR: red" id=ctl00_contentmain_reqdisplayname controltovalidate="ctl00_contentmain_txtattributename" display="Dynamic" validationGroup="vgAttribute" initialvalue errormessage="Please enter a Display name for this attribute." isvalid="false"'
            Assert.AreEqual(this.AssertEntityNameManadtoryAstrickIsShownExpectedValues.UIItemPane1ControlDefinition, uIItemPane1.ControlDefinition);
        }
        
        /// <summary>
        /// AssertListItemInUseOnGreenlightFilterViewModal - Use 'AssertListItemInUseOnGreenlightFilterViewModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertListItemInUseOnGreenlightFilterViewModal()
        {
            #region Variable Declarations
            HtmlDiv uIDivMasterPopupPane = this.UIGreenLightCustomEntiWindow.UIGreenLightCustomEntiDocument.UIDivMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
            //
            //
            //This list item cannot be removed as it is in use on a GreenLight View Filter.'
            Assert.AreEqual(this.AssertListItemInUseOnGreenlightFilterViewModalExpectedValues.UIDivMasterPopupPaneInnerText, uIDivMasterPopupPane.InnerText);
        }
        
        /// <summary>
        /// AssertListItemModalValueAlreadyExists - Use 'AssertListItemModalValueAlreadyExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertListItemModalValueAlreadyExists()
        {
            #region Variable Declarations
            HtmlDiv uIDivMasterPopupPane = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument16.UIDivMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
            //
            //
            //This value is already in the list.'
            Assert.AreEqual(this.AssertListItemModalValueAlreadyExistsExpectedValues.UIDivMasterPopupPaneInnerText, uIDivMasterPopupPane.InnerText);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            HtmlSpan formatValidator = this.UINewCustomEntityWindoWindow.UINewCustomEntityDocument.FormatValidator;
            #endregion

            // Verify that the 'InnerText' property of '*' pane equals '*'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.FormatValidatorInnerText, formatValidator.InnerText);

            // Verify that the 'ControlDefinition' property of '*' pane equals 'style="DISPLAY: inline; COLOR: red" id=ctl00_contentmain_reqTextFormat controltovalidate="ctl00_contentmain_cmbtextformat" display="Dynamic" validationGroup="vgAttribute" initialvalue errormessage="Please select a Format for this attribute." isvalid="false" enabled="true"'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.FormatValidatorControlDefinition, formatValidator.ControlDefinition);

            // Verify that the 'ClassName' property of '*' pane equals 'HtmlPane'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.FormatValidatorClassName, formatValidator.ClassName);
        }
        
        /// <summary>
        /// AssertNewListItemLabelIsMandatory - Use 'AssertNewListItemLabelIsMandatoryExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNewListItemLabelIsMandatory()
        {
            #region Variable Declarations
            HtmlLabel uIListitemLabel = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument15.UIListitemLabel;
            #endregion

            // Verify that the 'InnerText' property of 'List item*' label equals 'List item*'
            Assert.AreEqual(this.AssertNewListItemLabelIsMandatoryExpectedValues.UIListitemLabelInnerText, uIListitemLabel.InnerText);
        }
        
        /// <summary>
        /// ClickAddListItemIcon
        /// </summary>
        public void ClickAddListItemIcon()
        {
            #region Variable Declarations
            HtmlImage uINewListItemImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument6.UIListitemsPane.UINewListItemImage;
            #endregion

            // Click 'New List Item' image
            Mouse.Click(uINewListItemImage, new Point(8, 8));
        }
        
        /// <summary>
        /// ClickAttributesLink
        /// </summary>
        public void ClickAttributesLink()
        {
            #region Variable Declarations
            HtmlHyperlink uIAttributesHyperlink = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument5.UIAttributesHyperlink;
            #endregion

            // Click 'Attributes' link
            Mouse.Click(uIAttributesHyperlink, new Point(48, 9));
        }
        
        /// <summary>
        /// ClickCloseDuplicateValidationModal
        /// </summary>
        public void ClickCloseDuplicateValidationModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument10.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(17, 9));
        }
        
        /// <summary>
        /// ClickCloseOnBlankListItemValidationModal
        /// </summary>
        public void ClickCloseOnBlankListItemValidationModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument14.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(26, 7));
        }
        
        /// <summary>
        /// ClickCloseOnValueAlreadyExistsMessageModal
        /// </summary>
        public void ClickCloseOnValueAlreadyExistsMessageModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument16.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(18, 12));
        }
        
        /// <summary>
        /// ClickDeleteInListAttribute
        /// </summary>
        public void ClickDeleteInListAttribute()
        {
            #region Variable Declarations
            HtmlImage uIDeleteListItemImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument17.UIDivListOptionsPane.UIDeleteListItemImage;
            #endregion

            // Click 'Delete List Item' image
            Mouse.Click(uIDeleteListItemImage, new Point(9, 8));
        }
        
        /// <summary>
        /// ClickEditLinkforListItem
        /// </summary>
        public void ClickEditLinkforListItem()
        {
            #region Variable Declarations
            HtmlImage uIEditListItemImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument12.UIDivListOptionsPane.UIEditListItemImage;
            #endregion

            // Click 'Edit List Item' image
            Mouse.Click(uIEditListItemImage, new Point(6, 8));
        }
        
        /// <summary>
        /// ClickNewAttributesLink
        /// </summary>
        public void ClickNewAttributesLink()
        {
            #region Variable Declarations
            HtmlHyperlink uINewAttributeHyperlink = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument.UIPgOptAttributesPane.UINewAttributeHyperlink;
            #endregion

            // Click 'New Attribute' link
            Mouse.Click(uINewAttributeHyperlink, new Point(41, 4));
        }
        
        /// <summary>
        /// ClickOkToConfirmAuditIdentifier
        /// </summary>
        public void ClickOkToConfirmAuditIdentifier()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMessagefromwebpageWindow1.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 12));
        }
        
        /// <summary>
        /// PressCancelToCancelAttributeDeletion - Use 'PressCancelToCancelAttributeDeletionParams' to pass parameters into this method.
        /// </summary>
        public void PressCancelToCancelAttributeDeletion()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMessagefromwebpageWindow1.UIOKWindow.UIOKButton;
            WinButton uICancelButton = this.UIMessagefromwebpageWindow1.UICancelWindow.UICancelButton;
            #endregion

            // Type '{Tab}' in 'OK' button
            Keyboard.SendKeys(uIOKButton, this.PressCancelToCancelAttributeDeletionParams.UIOKButtonSendKeys, ModifierKeys.None);

            // Type '{Enter}' in 'Cancel' button
            Keyboard.SendKeys(uICancelButton, this.PressCancelToCancelAttributeDeletionParams.UICancelButtonSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// PressClose
        /// </summary>
        public void PressClose()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument9.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(28, 11));
        }
        
        /// <summary>
        /// PressCloseEntityCurrencyValidationModal
        /// </summary>
        public void PressCloseEntityCurrencyValidationModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument19.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(24, 16));
        }
        
        /// <summary>
        /// PressCloseMaximumLengthValidationModal
        /// </summary>
        public void PressCloseMaximumLengthValidationModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(22, 11));
        }
        
        /// <summary>
        /// PressClosePercisionModal
        /// </summary>
        public void PressClosePercisionModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(37, 13));
        }
        
        /// <summary>
        /// PressOKOnJSWindow
        /// </summary>
        public void PressOKOnJSWindow()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMessagefromwebpageWindow1.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(6, 13));
        }
        
        /// <summary>
        /// PressOKToConfirmAttributeDeletion
        /// </summary>
        public void PressOKToConfirmAttributeDeletion()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIMessagefromwebpageWindow1.UIOKWindow.UIOKButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(67, 16));
        }
        
        /// <summary>
        /// SaveListItem
        /// </summary>
        public void SaveListItem()
        {
            #region Variable Declarations
            HtmlInputButton uISaveButton = this.UIGreenLightSetupTestiWindow.UIGreenLightSetupTestiDocument.UISaveButton;
            #endregion

            // Click 'save' button
            Mouse.Click(uISaveButton, new Point(37, 15));
        }
        
        /// <summary>
        /// SelectSingleLineInFormatField - Use 'SelectSingleLineInFormatFieldParams' to pass parameters into this method.
        /// </summary>
        public void SelectSingleLineInFormatField()
        {
            #region Variable Declarations
            HtmlComboBox uIFormatComboBox = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIFormatComboBox;
            #endregion

            // Select 'Single Line' in 'Format*' combo box
            uIFormatComboBox.SelectedItem = this.SelectSingleLineInFormatFieldParams.UIFormatComboBoxSelectedItem;
        }
        
        /// <summary>
        /// SelectTextInTypeField - Use 'SelectTextInTypeFieldParams' to pass parameters into this method.
        /// </summary>
        public void SelectTextInTypeField()
        {
            #region Variable Declarations
            HtmlComboBox uITypeComboBox = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UITypeComboBox;
            #endregion

            // Select 'Text' in 'Type*' combo box
            uITypeComboBox.SelectedItem = this.SelectTextInTypeFieldParams.UITypeComboBoxSelectedItem;
        }
        
        /// <summary>
        /// ValidateCommentAdviceTextField - Use 'ValidateCommentAdviceTextFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateCommentAdviceTextField()
        {
            #region Variable Declarations
            HtmlLabel uICommentadvicetextLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UICommentadvicetextLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Comment advice text' label equals 'Comment advice text'
            Assert.AreEqual(this.ValidateCommentAdviceTextFieldExpectedValues.UICommentadvicetextLabelInnerText, uICommentadvicetextLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateDefaultValueDropdownList - Use 'ValidateDefaultValueDropdownListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDefaultValueDropdownList()
        {
            #region Variable Declarations
            HtmlComboBox uIDefaultvalueComboBox = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDefaultvalueComboBox;
            #endregion

            // Verify that the 'InnerText' property of 'Default value*' combo box equals ' [None] No Yes'
            Assert.AreEqual(this.ValidateDefaultValueDropdownListExpectedValues.UIDefaultvalueComboBoxInnerText, uIDefaultvalueComboBox.InnerText);
        }
        
        /// <summary>
        /// ValidateDefaultValueField - Use 'ValidateDefaultValueFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDefaultValueField()
        {
            #region Variable Declarations
            HtmlLabel uIDefaultvalueLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDefaultvalueLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Default value*' label equals 'Default value*'
            Assert.AreEqual(this.ValidateDefaultValueFieldExpectedValues.UIDefaultvalueLabelInnerText, uIDefaultvalueLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateDescriptionField - Use 'ValidateDescriptionFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDescriptionField()
        {
            #region Variable Declarations
            HtmlLabel uIDescriptionLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDescriptionLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Description' label equals 'Description'
            Assert.AreEqual(this.ValidateDescriptionFieldExpectedValues.UIDescriptionLabelInnerText, uIDescriptionLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateDisplayNameField - Use 'ValidateDisplayNameFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDisplayNameField()
        {
            #region Variable Declarations
            HtmlLabel uIDisplaynameLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDisplaynameLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Display name*' label equals 'Display name*'
            Assert.AreEqual(this.ValidateDisplayNameFieldExpectedValues.UIDisplaynameLabelInnerText, uIDisplaynameLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateDisplayWidthDropdownListInText - Use 'ValidateDisplayWidthDropdownListInTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDisplayWidthDropdownListInText()
        {
            #region Variable Declarations
            HtmlComboBox uIDisplaywidthComboBox = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDisplaywidthComboBox;
            #endregion

            // Verify that the 'InnerText' property of 'Display width*' combo box equals ' [None] Standard Wide'
            Assert.AreEqual(this.ValidateDisplayWidthDropdownListInTextExpectedValues.UIDisplaywidthComboBoxInnerText, uIDisplaywidthComboBox.InnerText);
        }
        
        /// <summary>
        /// ValidateDisplayWidthFieldInTypeList - Use 'ValidateDisplayWidthFieldInTypeListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDisplayWidthFieldInTypeList()
        {
            #region Variable Declarations
            HtmlLabel uIDisplaywidthLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDisplaywidthLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Display width*' label equals 'Display width*'
            Assert.AreEqual(this.ValidateDisplayWidthFieldInTypeListExpectedValues.UIDisplaywidthLabelInnerText, uIDisplaywidthLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateDisplayWidthFieldInTypeText - Use 'ValidateDisplayWidthFieldInTypeTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDisplayWidthFieldInTypeText()
        {
            #region Variable Declarations
            HtmlLabel uIDisplaywidthLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDisplaywidthLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Display width*' label equals 'Display width*'
            Assert.AreEqual(this.ValidateDisplayWidthFieldInTypeTextExpectedValues.UIDisplaywidthLabelInnerText, uIDisplaywidthLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateDuplicateDataModal - Use 'ValidateDuplicateDataModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDuplicateDataModal()
        {
            #region Variable Declarations
            HtmlDiv uIDivMasterPopupPane = this.UICustomEntitymyCEWindWindow.UICustomEntitymyCEDocument.UIDivMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
            //
            //
            //An attribute or relationship with this Display name already exists.'
            Assert.AreEqual(this.ValidateDuplicateDataModalExpectedValues.UIDivMasterPopupPaneInnerText, uIDivMasterPopupPane.InnerText);
        }
        
        /// <summary>
        /// ValidateFormatFieldDropdownList - Use 'ValidateFormatFieldDropdownListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateFormatFieldDropdownList()
        {
            #region Variable Declarations
            HtmlComboBox uIFormatComboBox = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIFormatComboBox;
            #endregion

            // Verify that the 'InnerText' property of 'Format*' combo box equals ' [None] Single Line Multiple Line'
            Assert.AreEqual(this.ValidateFormatFieldDropdownListExpectedValues.UIFormatComboBoxInnerText, uIFormatComboBox.InnerText);
        }
        
        /// <summary>
        /// ValidateFormatFieldDropdownListInDate - Use 'ValidateFormatFieldDropdownListInDateExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateFormatFieldDropdownListInDate()
        {
            #region Variable Declarations
            HtmlComboBox uIFormatComboBox1 = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIFormatComboBox1;
            #endregion

            // Verify that the 'InnerText' property of 'Format*' combo box equals ' [None] Date Only Time Only Date and Time'
            Assert.AreEqual(this.ValidateFormatFieldDropdownListInDateExpectedValues.UIFormatComboBox1InnerText, uIFormatComboBox1.InnerText);
        }
        
        /// <summary>
        /// ValidateFormatFieldDropdownListInLargeText - Use 'ValidateFormatFieldDropdownListInLargeTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateFormatFieldDropdownListInLargeText()
        {
            #region Variable Declarations
            HtmlComboBox uIFormatComboBox2 = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIFormatComboBox2;
            #endregion

            // Verify that the 'InnerText' property of 'Format*' combo box equals ' [None] Multiple Line Formatted Text Box'
            Assert.AreEqual(this.ValidateFormatFieldDropdownListInLargeTextExpectedValues.UIFormatComboBox2InnerText, uIFormatComboBox2.InnerText);
        }
        
        /// <summary>
        /// ValidateFormatFieldInTypeDate - Use 'ValidateFormatFieldInTypeDateExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateFormatFieldInTypeDate()
        {
            #region Variable Declarations
            HtmlLabel uIFormatLabel1 = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIFormatLabel1;
            #endregion

            // Verify that the 'InnerText' property of 'Format*' label equals 'Format*'
            Assert.AreEqual(this.ValidateFormatFieldInTypeDateExpectedValues.UIFormatLabel1InnerText, uIFormatLabel1.InnerText);
        }
        
        /// <summary>
        /// ValidateFormatFieldInTypeLargeText - Use 'ValidateFormatFieldInTypeLargeTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateFormatFieldInTypeLargeText()
        {
            #region Variable Declarations
            HtmlLabel uIFormatLabel2 = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIFormatLabel2;
            #endregion

            // Verify that the 'InnerText' property of 'Format*' label equals 'Format*'
            Assert.AreEqual(this.ValidateFormatFieldInTypeLargeTextExpectedValues.UIFormatLabel2InnerText, uIFormatLabel2.InnerText);
        }
        
        /// <summary>
        /// ValidateFormatFieldInTypeText - Use 'ValidateFormatFieldInTypeTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateFormatFieldInTypeText()
        {
            #region Variable Declarations
            HtmlLabel uIFormatLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIFormatLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Format*' label equals 'Format*'
            Assert.AreEqual(this.ValidateFormatFieldInTypeTextExpectedValues.UIFormatLabelInnerText, uIFormatLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateListItemFieldLabel - Use 'ValidateListItemFieldLabelExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateListItemFieldLabel()
        {
            #region Variable Declarations
            HtmlLabel uIListitemLabel = this.UICustomEntitymyCEWindWindow.UICustomEntitymyCEDocument.UIListitemLabel;
            #endregion

            // Verify that the 'InnerText' property of 'List item*' label equals 'List item*'
            Assert.AreEqual(this.ValidateListItemFieldLabelExpectedValues.UIListitemLabelInnerText, uIListitemLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateListItemModal - Use 'ValidateListItemModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateListItemModal()
        {
            #region Variable Declarations
            HtmlDiv uINewListItemPane = this.UICustomEntitytyWindowWindow.UICustomEntitytyDocument.UINewListItemPane;
            #endregion

            // Verify that the 'InnerText' property of 'New List Item' pane equals 'New List Item'
            Assert.AreEqual(this.ValidateListItemModalExpectedValues.UINewListItemPaneInnerText, uINewListItemPane.InnerText);
        }
        
        /// <summary>
        /// ValidateListItemModalHeader - Use 'ValidateListItemModalHeaderExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateListItemModalHeader()
        {
            #region Variable Declarations
            HtmlDiv uINewListItemPane = this.UICustomEntitymyCEWindWindow.UICustomEntitymyCEDocument.UINewListItemPane;
            #endregion

            // Verify that the 'InnerText' property of 'New List Item' pane equals 'New List Item'
            Assert.AreEqual(this.ValidateListItemModalHeaderExpectedValues.UINewListItemPaneInnerText, uINewListItemPane.InnerText);
        }
        
        /// <summary>
        /// ValidateListItemsField - Use 'ValidateListItemsFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateListItemsField()
        {
            #region Variable Declarations
            HtmlLabel uIListitemsLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIListitemsLabel;
            #endregion

            // Verify that the 'InnerText' property of 'List items*' label equals 'List items*'
            Assert.AreEqual(this.ValidateListItemsFieldExpectedValues.UIListitemsLabelInnerText, uIListitemsLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateMandatoryField - Use 'ValidateMandatoryFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMandatoryField()
        {
            #region Variable Declarations
            HtmlLabel uIMandatoryLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIMandatoryLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Mandatory' label equals 'Mandatory'
            Assert.AreEqual(this.ValidateMandatoryFieldExpectedValues.UIMandatoryLabelInnerText, uIMandatoryLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateMandatoryPropertiesOfAttributes - Use 'ValidateMandatoryPropertiesOfAttributesExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMandatoryPropertiesOfAttributes()
        {
            #region Variable Declarations
            HtmlDiv uICtl00_pnlMasterPopupPane = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument8.UICtl00_pnlMasterPopupPane;
            #endregion

            // Verify that the 'DisplayText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
            //
            //
            //Please enter a Display name for this attribute.
            //Please select a Type for the attribute.'
            Assert.AreEqual(this.ValidateMandatoryPropertiesOfAttributesExpectedValues.UICtl00_pnlMasterPopupPaneDisplayText, uICtl00_pnlMasterPopupPane.DisplayText);
        }
        
        /// <summary>
        /// ValidateMaximumLengthFieldInTypeLargeText - Use 'ValidateMaximumLengthFieldInTypeLargeTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMaximumLengthFieldInTypeLargeText()
        {
            #region Variable Declarations
            HtmlLabel uIMaximumlengthLabel1 = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIMaximumlengthLabel1;
            #endregion

            // Verify that the 'InnerText' property of 'Maximum length' label equals 'Maximum length'
            Assert.AreEqual(this.ValidateMaximumLengthFieldInTypeLargeTextExpectedValues.UIMaximumlengthLabel1InnerText, uIMaximumlengthLabel1.InnerText);
        }
        
        /// <summary>
        /// ValidateMaximumLengthFieldInTypeText - Use 'ValidateMaximumLengthFieldInTypeTextExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMaximumLengthFieldInTypeText()
        {
            #region Variable Declarations
            HtmlLabel uIMaximumlengthLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIMaximumlengthLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Maximum length' label equals 'Maximum length'
            Assert.AreEqual(this.ValidateMaximumLengthFieldInTypeTextExpectedValues.UIMaximumlengthLabelInnerText, uIMaximumlengthLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateMaximumLengthModal - Use 'ValidateMaximumLengthModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMaximumLengthModal()
        {
            #region Variable Declarations
            HtmlDiv uIDivMasterPopupPane = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDivMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
            //
            //
            //Please select a number greater than or equal to 0 for Maximum length.
            //Please select a number less than or equal to 500 for Maximum length.'
            Assert.AreEqual(this.ValidateMaximumLengthModalExpectedValues.UIDivMasterPopupPaneInnerText, uIDivMasterPopupPane.InnerText);
        }
        
        /// <summary>
        /// ValidateNewAttributeModalHeader - Use 'ValidateNewAttributeModalHeaderExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateNewAttributeModalHeader()
        {
            #region Variable Declarations
            HtmlLabel uIDisplaynameLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDisplaynameLabel;
            HtmlDiv uINewAttributePane = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UINewAttributePane;
            #endregion

            // Verify that the 'InnerText' property of 'Display name*' label equals 'Display name*'
            Assert.AreEqual(this.ValidateNewAttributeModalHeaderExpectedValues.UIDisplaynameLabelInnerText, uIDisplaynameLabel.InnerText);

            // Verify that the 'DisplayText' property of 'New Attribute' pane equals 'New Attribute'
            Assert.AreEqual(this.ValidateNewAttributeModalHeaderExpectedValues.UINewAttributePaneDisplayText, uINewAttributePane.DisplayText);
        }
        
        /// <summary>
        /// ValidatePrecisionField - Use 'ValidatePrecisionFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePrecisionField()
        {
            #region Variable Declarations
            HtmlLabel uIPrecisionLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIPrecisionLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Precision*' label equals 'Precision*'
            Assert.AreEqual(this.ValidatePrecisionFieldExpectedValues.UIPrecisionLabelInnerText, uIPrecisionLabel.InnerText);
        }
        
        /// <summary>
        /// ValidatePrecisionModal - Use 'ValidatePrecisionModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePrecisionModal()
        {
            #region Variable Declarations
            HtmlDiv uIDivMasterPopupPane = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIDivMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
            //
            //
            //Please select a Precision value greater than 0.
            //Please select a Precision value less than 6.'
            Assert.AreEqual(this.ValidatePrecisionModalExpectedValues.UIDivMasterPopupPaneInnerText, uIDivMasterPopupPane.InnerText);
        }
        
        /// <summary>
        /// ValidateTooltipField - Use 'ValidateTooltipFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateTooltipField()
        {
            #region Variable Declarations
            HtmlLabel uITooltipLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UITooltipLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Tooltip' label equals 'Tooltip'
            Assert.AreEqual(this.ValidateTooltipFieldExpectedValues.UITooltipLabelInnerText, uITooltipLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateTypeField - Use 'ValidateTypeFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateTypeField()
        {
            #region Variable Declarations
            HtmlLabel uITypeLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UITypeLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Type*' label equals 'Type*'
            Assert.AreEqual(this.ValidateTypeFieldExpectedValues.UITypeLabelInnerText, uITypeLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateTypeFieldDropdownList - Use 'ValidateTypeFieldDropdownListExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateTypeFieldDropdownList()
        {
            #region Variable Declarations
            HtmlComboBox uITypeComboBox = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UITypeComboBox;
            #endregion

            // Verify that the 'InnerText' property of 'Type*' combo box equals ' [None] Text Integer Decimal Currency Yes/No List Date Large Text Comment Attachment Contact'
            Assert.AreEqual(this.ValidateTypeFieldDropdownListExpectedValues.UITypeComboBoxInnerText, uITypeComboBox.InnerText);
        }
        
        /// <summary>
        /// ValidateUniqueField - Use 'ValidateUniqueFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUniqueField()
        {
            #region Variable Declarations
            HtmlLabel uIUniqueLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIUniqueLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Unique' label equals 'Unique'
            Assert.AreEqual(this.ValidateUniqueFieldExpectedValues.UIUniqueLabelInnerText, uIUniqueLabel.InnerText);
        }
        
        /// <summary>
        /// ValidateUpdateDefaultValuesForNoAttribute - Use 'ValidateUpdateDefaultValuesForNoAttributeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUpdateDefaultValuesForNoAttribute()
        {
            #region Variable Declarations
            WinText uIWouldyouliketopopulaText1 = this.UIMessagefromwebpageWindow.UIWouldyouliketopopulaWindow.UIWouldyouliketopopulaText1;
            #endregion

            // Verify that the 'DisplayText' property of 'Would you like to populate any existing records fo...' label equals 'Would you like to populate any existing records for this GreenLight with the default value of "No" for this new attribute?'
            Assert.AreEqual(this.ValidateUpdateDefaultValuesForNoAttributeExpectedValues.UIWouldyouliketopopulaText1DisplayText, uIWouldyouliketopopulaText1.DisplayText);
        }
        
        /// <summary>
        /// ValidateUpdateDefaultValuesForYesAttribute - Use 'ValidateUpdateDefaultValuesForYesAttributeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUpdateDefaultValuesForYesAttribute()
        {
            #region Variable Declarations
            WinText uIWouldyouliketopopulaText = this.UIMessagefromwebpageWindow.UIWouldyouliketopopulaWindow.UIWouldyouliketopopulaText;
            #endregion

            // Verify that the 'DisplayText' property of 'Would you like to populate any existing records fo...' label equals 'Would you like to populate any existing records for this GreenLight with the default value of "Yes" for this new attribute?'
            Assert.AreEqual(this.ValidateUpdateDefaultValuesForYesAttributeExpectedValues.UIWouldyouliketopopulaTextDisplayText, uIWouldyouliketopopulaText.DisplayText);
        }
        
        /// <summary>
        /// ValidateUpdateDefaultValuesForYesNoAttribute - Use 'ValidateUpdateDefaultValuesForYesNoAttributeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUpdateDefaultValuesForYesNoAttribute()
        {
            #region Variable Declarations
            WinText uIWouldyouliketopopulaText = this.UIMessagefromwebpageWindow.UIWouldyouliketopopulaWindow.UIWouldyouliketopopulaText;
            #endregion

            // Verify that the 'DisplayText' property of 'Would you like to populate any existing records fo...' label equals 'Would you like to populate any existing records for this GreenLight with the default value of "Yes" for this new attribute?'
            Assert.AreEqual(this.ValidateUpdateDefaultValuesForYesNoAttributeExpectedValues.UIWouldyouliketopopulaTextDisplayText, uIWouldyouliketopopulaText.DisplayText);
        }
        
        /// <summary>
        /// ValidateUsedForAuditField - Use 'ValidateUsedForAuditFieldExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateUsedForAuditField()
        {
            #region Variable Declarations
            HtmlLabel uIUsedforauditLabel = this.UICustomEntitymyCustomWindow.UICustomEntitymyCustomDocument.UIUsedforauditLabel;
            #endregion

            // Verify that the 'InnerText' property of 'Used for audit?' label equals 'Used for audit'
            Assert.AreEqual(this.ValidateUsedForAuditFieldExpectedValues.UIUsedforauditLabelInnerText, uIUsedforauditLabel.InnerText);
        }
        
        /// <summary>
        /// VerifyEntityCurrencyAsReservedWordModal - Use 'VerifyEntityCurrencyAsReservedWordModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyEntityCurrencyAsReservedWordModal()
        {
            #region Variable Declarations
            HtmlDiv uICtl00_pnlMasterPopupPane = this.UICustomEntityCustomEnWindow.UICustomEntityCustomEnDocument19.UICtl00_pnlMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
            //
            //
            //GreenLight Currency is not allowed as a Display name for this attribute (reserved keyword).
            //It is used as a predefined attribute by the system.'
            Assert.AreEqual(this.VerifyEntityCurrencyAsReservedWordModalExpectedValues.UICtl00_pnlMasterPopupPaneInnerText, uICtl00_pnlMasterPopupPane.InnerText);
        }
        
        #region Properties
        public virtual AssertAttributeTypeManadtoryAstrickIsShownExpectedValues AssertAttributeTypeManadtoryAstrickIsShownExpectedValues
        {
            get
            {
                if ((this.mAssertAttributeTypeManadtoryAstrickIsShownExpectedValues == null))
                {
                    this.mAssertAttributeTypeManadtoryAstrickIsShownExpectedValues = new AssertAttributeTypeManadtoryAstrickIsShownExpectedValues();
                }
                return this.mAssertAttributeTypeManadtoryAstrickIsShownExpectedValues;
            }
        }
        
        public virtual AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues
        {
            get
            {
                if ((this.mAssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues == null))
                {
                    this.mAssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues = new AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues();
                }
                return this.mAssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues;
            }
        }
        
        public virtual AssertEntityNameManadtoryAstrickIsShownExpectedValues AssertEntityNameManadtoryAstrickIsShownExpectedValues
        {
            get
            {
                if ((this.mAssertEntityNameManadtoryAstrickIsShownExpectedValues == null))
                {
                    this.mAssertEntityNameManadtoryAstrickIsShownExpectedValues = new AssertEntityNameManadtoryAstrickIsShownExpectedValues();
                }
                return this.mAssertEntityNameManadtoryAstrickIsShownExpectedValues;
            }
        }
        
        public virtual AssertListItemInUseOnGreenlightFilterViewModalExpectedValues AssertListItemInUseOnGreenlightFilterViewModalExpectedValues
        {
            get
            {
                if ((this.mAssertListItemInUseOnGreenlightFilterViewModalExpectedValues == null))
                {
                    this.mAssertListItemInUseOnGreenlightFilterViewModalExpectedValues = new AssertListItemInUseOnGreenlightFilterViewModalExpectedValues();
                }
                return this.mAssertListItemInUseOnGreenlightFilterViewModalExpectedValues;
            }
        }
        
        public virtual AssertListItemModalValueAlreadyExistsExpectedValues AssertListItemModalValueAlreadyExistsExpectedValues
        {
            get
            {
                if ((this.mAssertListItemModalValueAlreadyExistsExpectedValues == null))
                {
                    this.mAssertListItemModalValueAlreadyExistsExpectedValues = new AssertListItemModalValueAlreadyExistsExpectedValues();
                }
                return this.mAssertListItemModalValueAlreadyExistsExpectedValues;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertNewListItemLabelIsMandatoryExpectedValues AssertNewListItemLabelIsMandatoryExpectedValues
        {
            get
            {
                if ((this.mAssertNewListItemLabelIsMandatoryExpectedValues == null))
                {
                    this.mAssertNewListItemLabelIsMandatoryExpectedValues = new AssertNewListItemLabelIsMandatoryExpectedValues();
                }
                return this.mAssertNewListItemLabelIsMandatoryExpectedValues;
            }
        }
        
        public virtual PressCancelToCancelAttributeDeletionParams PressCancelToCancelAttributeDeletionParams
        {
            get
            {
                if ((this.mPressCancelToCancelAttributeDeletionParams == null))
                {
                    this.mPressCancelToCancelAttributeDeletionParams = new PressCancelToCancelAttributeDeletionParams();
                }
                return this.mPressCancelToCancelAttributeDeletionParams;
            }
        }
        
        public virtual SelectSingleLineInFormatFieldParams SelectSingleLineInFormatFieldParams
        {
            get
            {
                if ((this.mSelectSingleLineInFormatFieldParams == null))
                {
                    this.mSelectSingleLineInFormatFieldParams = new SelectSingleLineInFormatFieldParams();
                }
                return this.mSelectSingleLineInFormatFieldParams;
            }
        }
        
        public virtual SelectTextInTypeFieldParams SelectTextInTypeFieldParams
        {
            get
            {
                if ((this.mSelectTextInTypeFieldParams == null))
                {
                    this.mSelectTextInTypeFieldParams = new SelectTextInTypeFieldParams();
                }
                return this.mSelectTextInTypeFieldParams;
            }
        }
        
        public virtual ValidateCommentAdviceTextFieldExpectedValues ValidateCommentAdviceTextFieldExpectedValues
        {
            get
            {
                if ((this.mValidateCommentAdviceTextFieldExpectedValues == null))
                {
                    this.mValidateCommentAdviceTextFieldExpectedValues = new ValidateCommentAdviceTextFieldExpectedValues();
                }
                return this.mValidateCommentAdviceTextFieldExpectedValues;
            }
        }
        
        public virtual ValidateDefaultValueDropdownListExpectedValues ValidateDefaultValueDropdownListExpectedValues
        {
            get
            {
                if ((this.mValidateDefaultValueDropdownListExpectedValues == null))
                {
                    this.mValidateDefaultValueDropdownListExpectedValues = new ValidateDefaultValueDropdownListExpectedValues();
                }
                return this.mValidateDefaultValueDropdownListExpectedValues;
            }
        }
        
        public virtual ValidateDefaultValueFieldExpectedValues ValidateDefaultValueFieldExpectedValues
        {
            get
            {
                if ((this.mValidateDefaultValueFieldExpectedValues == null))
                {
                    this.mValidateDefaultValueFieldExpectedValues = new ValidateDefaultValueFieldExpectedValues();
                }
                return this.mValidateDefaultValueFieldExpectedValues;
            }
        }
        
        public virtual ValidateDescriptionFieldExpectedValues ValidateDescriptionFieldExpectedValues
        {
            get
            {
                if ((this.mValidateDescriptionFieldExpectedValues == null))
                {
                    this.mValidateDescriptionFieldExpectedValues = new ValidateDescriptionFieldExpectedValues();
                }
                return this.mValidateDescriptionFieldExpectedValues;
            }
        }
        
        public virtual ValidateDisplayNameFieldExpectedValues ValidateDisplayNameFieldExpectedValues
        {
            get
            {
                if ((this.mValidateDisplayNameFieldExpectedValues == null))
                {
                    this.mValidateDisplayNameFieldExpectedValues = new ValidateDisplayNameFieldExpectedValues();
                }
                return this.mValidateDisplayNameFieldExpectedValues;
            }
        }
        
        public virtual ValidateDisplayWidthDropdownListInTextExpectedValues ValidateDisplayWidthDropdownListInTextExpectedValues
        {
            get
            {
                if ((this.mValidateDisplayWidthDropdownListInTextExpectedValues == null))
                {
                    this.mValidateDisplayWidthDropdownListInTextExpectedValues = new ValidateDisplayWidthDropdownListInTextExpectedValues();
                }
                return this.mValidateDisplayWidthDropdownListInTextExpectedValues;
            }
        }
        
        public virtual ValidateDisplayWidthFieldInTypeListExpectedValues ValidateDisplayWidthFieldInTypeListExpectedValues
        {
            get
            {
                if ((this.mValidateDisplayWidthFieldInTypeListExpectedValues == null))
                {
                    this.mValidateDisplayWidthFieldInTypeListExpectedValues = new ValidateDisplayWidthFieldInTypeListExpectedValues();
                }
                return this.mValidateDisplayWidthFieldInTypeListExpectedValues;
            }
        }
        
        public virtual ValidateDisplayWidthFieldInTypeTextExpectedValues ValidateDisplayWidthFieldInTypeTextExpectedValues
        {
            get
            {
                if ((this.mValidateDisplayWidthFieldInTypeTextExpectedValues == null))
                {
                    this.mValidateDisplayWidthFieldInTypeTextExpectedValues = new ValidateDisplayWidthFieldInTypeTextExpectedValues();
                }
                return this.mValidateDisplayWidthFieldInTypeTextExpectedValues;
            }
        }
        
        public virtual ValidateDuplicateDataModalExpectedValues ValidateDuplicateDataModalExpectedValues
        {
            get
            {
                if ((this.mValidateDuplicateDataModalExpectedValues == null))
                {
                    this.mValidateDuplicateDataModalExpectedValues = new ValidateDuplicateDataModalExpectedValues();
                }
                return this.mValidateDuplicateDataModalExpectedValues;
            }
        }
        
        public virtual ValidateFormatFieldDropdownListExpectedValues ValidateFormatFieldDropdownListExpectedValues
        {
            get
            {
                if ((this.mValidateFormatFieldDropdownListExpectedValues == null))
                {
                    this.mValidateFormatFieldDropdownListExpectedValues = new ValidateFormatFieldDropdownListExpectedValues();
                }
                return this.mValidateFormatFieldDropdownListExpectedValues;
            }
        }
        
        public virtual ValidateFormatFieldDropdownListInDateExpectedValues ValidateFormatFieldDropdownListInDateExpectedValues
        {
            get
            {
                if ((this.mValidateFormatFieldDropdownListInDateExpectedValues == null))
                {
                    this.mValidateFormatFieldDropdownListInDateExpectedValues = new ValidateFormatFieldDropdownListInDateExpectedValues();
                }
                return this.mValidateFormatFieldDropdownListInDateExpectedValues;
            }
        }
        
        public virtual ValidateFormatFieldDropdownListInLargeTextExpectedValues ValidateFormatFieldDropdownListInLargeTextExpectedValues
        {
            get
            {
                if ((this.mValidateFormatFieldDropdownListInLargeTextExpectedValues == null))
                {
                    this.mValidateFormatFieldDropdownListInLargeTextExpectedValues = new ValidateFormatFieldDropdownListInLargeTextExpectedValues();
                }
                return this.mValidateFormatFieldDropdownListInLargeTextExpectedValues;
            }
        }
        
        public virtual ValidateFormatFieldInTypeDateExpectedValues ValidateFormatFieldInTypeDateExpectedValues
        {
            get
            {
                if ((this.mValidateFormatFieldInTypeDateExpectedValues == null))
                {
                    this.mValidateFormatFieldInTypeDateExpectedValues = new ValidateFormatFieldInTypeDateExpectedValues();
                }
                return this.mValidateFormatFieldInTypeDateExpectedValues;
            }
        }
        
        public virtual ValidateFormatFieldInTypeLargeTextExpectedValues ValidateFormatFieldInTypeLargeTextExpectedValues
        {
            get
            {
                if ((this.mValidateFormatFieldInTypeLargeTextExpectedValues == null))
                {
                    this.mValidateFormatFieldInTypeLargeTextExpectedValues = new ValidateFormatFieldInTypeLargeTextExpectedValues();
                }
                return this.mValidateFormatFieldInTypeLargeTextExpectedValues;
            }
        }
        
        public virtual ValidateFormatFieldInTypeTextExpectedValues ValidateFormatFieldInTypeTextExpectedValues
        {
            get
            {
                if ((this.mValidateFormatFieldInTypeTextExpectedValues == null))
                {
                    this.mValidateFormatFieldInTypeTextExpectedValues = new ValidateFormatFieldInTypeTextExpectedValues();
                }
                return this.mValidateFormatFieldInTypeTextExpectedValues;
            }
        }
        
        public virtual ValidateListItemFieldLabelExpectedValues ValidateListItemFieldLabelExpectedValues
        {
            get
            {
                if ((this.mValidateListItemFieldLabelExpectedValues == null))
                {
                    this.mValidateListItemFieldLabelExpectedValues = new ValidateListItemFieldLabelExpectedValues();
                }
                return this.mValidateListItemFieldLabelExpectedValues;
            }
        }
        
        public virtual ValidateListItemModalExpectedValues ValidateListItemModalExpectedValues
        {
            get
            {
                if ((this.mValidateListItemModalExpectedValues == null))
                {
                    this.mValidateListItemModalExpectedValues = new ValidateListItemModalExpectedValues();
                }
                return this.mValidateListItemModalExpectedValues;
            }
        }
        
        public virtual ValidateListItemModalHeaderExpectedValues ValidateListItemModalHeaderExpectedValues
        {
            get
            {
                if ((this.mValidateListItemModalHeaderExpectedValues == null))
                {
                    this.mValidateListItemModalHeaderExpectedValues = new ValidateListItemModalHeaderExpectedValues();
                }
                return this.mValidateListItemModalHeaderExpectedValues;
            }
        }
        
        public virtual ValidateListItemsFieldExpectedValues ValidateListItemsFieldExpectedValues
        {
            get
            {
                if ((this.mValidateListItemsFieldExpectedValues == null))
                {
                    this.mValidateListItemsFieldExpectedValues = new ValidateListItemsFieldExpectedValues();
                }
                return this.mValidateListItemsFieldExpectedValues;
            }
        }
        
        public virtual ValidateMandatoryFieldExpectedValues ValidateMandatoryFieldExpectedValues
        {
            get
            {
                if ((this.mValidateMandatoryFieldExpectedValues == null))
                {
                    this.mValidateMandatoryFieldExpectedValues = new ValidateMandatoryFieldExpectedValues();
                }
                return this.mValidateMandatoryFieldExpectedValues;
            }
        }
        
        public virtual ValidateMandatoryPropertiesOfAttributesExpectedValues ValidateMandatoryPropertiesOfAttributesExpectedValues
        {
            get
            {
                if ((this.mValidateMandatoryPropertiesOfAttributesExpectedValues == null))
                {
                    this.mValidateMandatoryPropertiesOfAttributesExpectedValues = new ValidateMandatoryPropertiesOfAttributesExpectedValues();
                }
                return this.mValidateMandatoryPropertiesOfAttributesExpectedValues;
            }
        }
        
        public virtual ValidateMaximumLengthFieldInTypeLargeTextExpectedValues ValidateMaximumLengthFieldInTypeLargeTextExpectedValues
        {
            get
            {
                if ((this.mValidateMaximumLengthFieldInTypeLargeTextExpectedValues == null))
                {
                    this.mValidateMaximumLengthFieldInTypeLargeTextExpectedValues = new ValidateMaximumLengthFieldInTypeLargeTextExpectedValues();
                }
                return this.mValidateMaximumLengthFieldInTypeLargeTextExpectedValues;
            }
        }
        
        public virtual ValidateMaximumLengthFieldInTypeTextExpectedValues ValidateMaximumLengthFieldInTypeTextExpectedValues
        {
            get
            {
                if ((this.mValidateMaximumLengthFieldInTypeTextExpectedValues == null))
                {
                    this.mValidateMaximumLengthFieldInTypeTextExpectedValues = new ValidateMaximumLengthFieldInTypeTextExpectedValues();
                }
                return this.mValidateMaximumLengthFieldInTypeTextExpectedValues;
            }
        }
        
        public virtual ValidateMaximumLengthModalExpectedValues ValidateMaximumLengthModalExpectedValues
        {
            get
            {
                if ((this.mValidateMaximumLengthModalExpectedValues == null))
                {
                    this.mValidateMaximumLengthModalExpectedValues = new ValidateMaximumLengthModalExpectedValues();
                }
                return this.mValidateMaximumLengthModalExpectedValues;
            }
        }
        
        public virtual ValidateNewAttributeModalHeaderExpectedValues ValidateNewAttributeModalHeaderExpectedValues
        {
            get
            {
                if ((this.mValidateNewAttributeModalHeaderExpectedValues == null))
                {
                    this.mValidateNewAttributeModalHeaderExpectedValues = new ValidateNewAttributeModalHeaderExpectedValues();
                }
                return this.mValidateNewAttributeModalHeaderExpectedValues;
            }
        }
        
        public virtual ValidatePrecisionFieldExpectedValues ValidatePrecisionFieldExpectedValues
        {
            get
            {
                if ((this.mValidatePrecisionFieldExpectedValues == null))
                {
                    this.mValidatePrecisionFieldExpectedValues = new ValidatePrecisionFieldExpectedValues();
                }
                return this.mValidatePrecisionFieldExpectedValues;
            }
        }
        
        public virtual ValidatePrecisionModalExpectedValues ValidatePrecisionModalExpectedValues
        {
            get
            {
                if ((this.mValidatePrecisionModalExpectedValues == null))
                {
                    this.mValidatePrecisionModalExpectedValues = new ValidatePrecisionModalExpectedValues();
                }
                return this.mValidatePrecisionModalExpectedValues;
            }
        }
        
        public virtual ValidateTooltipFieldExpectedValues ValidateTooltipFieldExpectedValues
        {
            get
            {
                if ((this.mValidateTooltipFieldExpectedValues == null))
                {
                    this.mValidateTooltipFieldExpectedValues = new ValidateTooltipFieldExpectedValues();
                }
                return this.mValidateTooltipFieldExpectedValues;
            }
        }
        
        public virtual ValidateTypeFieldExpectedValues ValidateTypeFieldExpectedValues
        {
            get
            {
                if ((this.mValidateTypeFieldExpectedValues == null))
                {
                    this.mValidateTypeFieldExpectedValues = new ValidateTypeFieldExpectedValues();
                }
                return this.mValidateTypeFieldExpectedValues;
            }
        }
        
        public virtual ValidateTypeFieldDropdownListExpectedValues ValidateTypeFieldDropdownListExpectedValues
        {
            get
            {
                if ((this.mValidateTypeFieldDropdownListExpectedValues == null))
                {
                    this.mValidateTypeFieldDropdownListExpectedValues = new ValidateTypeFieldDropdownListExpectedValues();
                }
                return this.mValidateTypeFieldDropdownListExpectedValues;
            }
        }
        
        public virtual ValidateUniqueFieldExpectedValues ValidateUniqueFieldExpectedValues
        {
            get
            {
                if ((this.mValidateUniqueFieldExpectedValues == null))
                {
                    this.mValidateUniqueFieldExpectedValues = new ValidateUniqueFieldExpectedValues();
                }
                return this.mValidateUniqueFieldExpectedValues;
            }
        }
        
        public virtual ValidateUpdateDefaultValuesForNoAttributeExpectedValues ValidateUpdateDefaultValuesForNoAttributeExpectedValues
        {
            get
            {
                if ((this.mValidateUpdateDefaultValuesForNoAttributeExpectedValues == null))
                {
                    this.mValidateUpdateDefaultValuesForNoAttributeExpectedValues = new ValidateUpdateDefaultValuesForNoAttributeExpectedValues();
                }
                return this.mValidateUpdateDefaultValuesForNoAttributeExpectedValues;
            }
        }
        
        public virtual ValidateUpdateDefaultValuesForYesAttributeExpectedValues ValidateUpdateDefaultValuesForYesAttributeExpectedValues
        {
            get
            {
                if ((this.mValidateUpdateDefaultValuesForYesAttributeExpectedValues == null))
                {
                    this.mValidateUpdateDefaultValuesForYesAttributeExpectedValues = new ValidateUpdateDefaultValuesForYesAttributeExpectedValues();
                }
                return this.mValidateUpdateDefaultValuesForYesAttributeExpectedValues;
            }
        }
        
        public virtual ValidateUpdateDefaultValuesForYesNoAttributeExpectedValues ValidateUpdateDefaultValuesForYesNoAttributeExpectedValues
        {
            get
            {
                if ((this.mValidateUpdateDefaultValuesForYesNoAttributeExpectedValues == null))
                {
                    this.mValidateUpdateDefaultValuesForYesNoAttributeExpectedValues = new ValidateUpdateDefaultValuesForYesNoAttributeExpectedValues();
                }
                return this.mValidateUpdateDefaultValuesForYesNoAttributeExpectedValues;
            }
        }
        
        public virtual ValidateUsedForAuditFieldExpectedValues ValidateUsedForAuditFieldExpectedValues
        {
            get
            {
                if ((this.mValidateUsedForAuditFieldExpectedValues == null))
                {
                    this.mValidateUsedForAuditFieldExpectedValues = new ValidateUsedForAuditFieldExpectedValues();
                }
                return this.mValidateUsedForAuditFieldExpectedValues;
            }
        }
        
        public virtual VerifyEntityCurrencyAsReservedWordModalExpectedValues VerifyEntityCurrencyAsReservedWordModalExpectedValues
        {
            get
            {
                if ((this.mVerifyEntityCurrencyAsReservedWordModalExpectedValues == null))
                {
                    this.mVerifyEntityCurrencyAsReservedWordModalExpectedValues = new VerifyEntityCurrencyAsReservedWordModalExpectedValues();
                }
                return this.mVerifyEntityCurrencyAsReservedWordModalExpectedValues;
            }
        }
        
        public UICustomEntityCustomEnWindow UICustomEntityCustomEnWindow
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow == null))
                {
                    this.mUICustomEntityCustomEnWindow = new UICustomEntityCustomEnWindow();
                }
                return this.mUICustomEntityCustomEnWindow;
            }
        }
        
        public UIMessagefromwebpageWindow1 UIMessagefromwebpageWindow1
        {
            get
            {
                if ((this.mUIMessagefromwebpageWindow1 == null))
                {
                    this.mUIMessagefromwebpageWindow1 = new UIMessagefromwebpageWindow1();
                }
                return this.mUIMessagefromwebpageWindow1;
            }
        }
        
        public UICustomEntitymyCustomWindow UICustomEntitymyCustomWindow
        {
            get
            {
                if ((this.mUICustomEntitymyCustomWindow == null))
                {
                    this.mUICustomEntitymyCustomWindow = new UICustomEntitymyCustomWindow();
                }
                return this.mUICustomEntitymyCustomWindow;
            }
        }
        
        public UINewCustomEntityWindoWindow UINewCustomEntityWindoWindow
        {
            get
            {
                if ((this.mUINewCustomEntityWindoWindow == null))
                {
                    this.mUINewCustomEntityWindoWindow = new UINewCustomEntityWindoWindow();
                }
                return this.mUINewCustomEntityWindoWindow;
            }
        }
        
        public UICustomEntityCustomEnWindow1 UICustomEntityCustomEnWindow1
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow1 == null))
                {
                    this.mUICustomEntityCustomEnWindow1 = new UICustomEntityCustomEnWindow1();
                }
                return this.mUICustomEntityCustomEnWindow1;
            }
        }
        
        public UICustomEntityCustomEnWindow2 UICustomEntityCustomEnWindow2
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow2 == null))
                {
                    this.mUICustomEntityCustomEnWindow2 = new UICustomEntityCustomEnWindow2();
                }
                return this.mUICustomEntityCustomEnWindow2;
            }
        }
        
        public UICustomEntityCustomEnWindow3 UICustomEntityCustomEnWindow3
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow3 == null))
                {
                    this.mUICustomEntityCustomEnWindow3 = new UICustomEntityCustomEnWindow3();
                }
                return this.mUICustomEntityCustomEnWindow3;
            }
        }
        
        public UICustomEntityCustomEnWindow4 UICustomEntityCustomEnWindow4
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow4 == null))
                {
                    this.mUICustomEntityCustomEnWindow4 = new UICustomEntityCustomEnWindow4();
                }
                return this.mUICustomEntityCustomEnWindow4;
            }
        }
        
        public UICustomEntityCustomEnWindow5 UICustomEntityCustomEnWindow5
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow5 == null))
                {
                    this.mUICustomEntityCustomEnWindow5 = new UICustomEntityCustomEnWindow5();
                }
                return this.mUICustomEntityCustomEnWindow5;
            }
        }
        
        public UICustomEntityCustomEnWindow6 UICustomEntityCustomEnWindow6
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow6 == null))
                {
                    this.mUICustomEntityCustomEnWindow6 = new UICustomEntityCustomEnWindow6();
                }
                return this.mUICustomEntityCustomEnWindow6;
            }
        }
        
        public UICustomEntityCustomEnWindow7 UICustomEntityCustomEnWindow7
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow7 == null))
                {
                    this.mUICustomEntityCustomEnWindow7 = new UICustomEntityCustomEnWindow7();
                }
                return this.mUICustomEntityCustomEnWindow7;
            }
        }
        
        public UICustomEntityCustomEnWindow8 UICustomEntityCustomEnWindow8
        {
            get
            {
                if ((this.mUICustomEntityCustomEnWindow8 == null))
                {
                    this.mUICustomEntityCustomEnWindow8 = new UICustomEntityCustomEnWindow8();
                }
                return this.mUICustomEntityCustomEnWindow8;
            }
        }
        
        public UICustomEntitymyCEWindWindow UICustomEntitymyCEWindWindow
        {
            get
            {
                if ((this.mUICustomEntitymyCEWindWindow == null))
                {
                    this.mUICustomEntitymyCEWindWindow = new UICustomEntitymyCEWindWindow();
                }
                return this.mUICustomEntitymyCEWindWindow;
            }
        }
        
        public UICustomEntitytyWindowWindow UICustomEntitytyWindowWindow
        {
            get
            {
                if ((this.mUICustomEntitytyWindowWindow == null))
                {
                    this.mUICustomEntitytyWindowWindow = new UICustomEntitytyWindowWindow();
                }
                return this.mUICustomEntitytyWindowWindow;
            }
        }
        
        public UIGreenLightCustomEntiWindow UIGreenLightCustomEntiWindow
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiWindow == null))
                {
                    this.mUIGreenLightCustomEntiWindow = new UIGreenLightCustomEntiWindow();
                }
                return this.mUIGreenLightCustomEntiWindow;
            }
        }
        
        public UIMessagefromwebpageWindow UIMessagefromwebpageWindow
        {
            get
            {
                if ((this.mUIMessagefromwebpageWindow == null))
                {
                    this.mUIMessagefromwebpageWindow = new UIMessagefromwebpageWindow();
                }
                return this.mUIMessagefromwebpageWindow;
            }
        }
        
        public UIGreenLightSetupTestiWindow UIGreenLightSetupTestiWindow
        {
            get
            {
                if ((this.mUIGreenLightSetupTestiWindow == null))
                {
                    this.mUIGreenLightSetupTestiWindow = new UIGreenLightSetupTestiWindow();
                }
                return this.mUIGreenLightSetupTestiWindow;
            }
        }
        
        public GreenlightAttributeControlsWinow GreenlightAttributeControlsWinow
        {
            get
            {
                if ((this.mGreenlightAttributeControlsWinow == null))
                {
                    this.mGreenlightAttributeControlsWinow = new GreenlightAttributeControlsWinow();
                }
                return this.mGreenlightAttributeControlsWinow;
            }
        }
        #endregion
        
        #region Fields
        private AssertAttributeTypeManadtoryAstrickIsShownExpectedValues mAssertAttributeTypeManadtoryAstrickIsShownExpectedValues;
        
        private AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues mAssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues;
        
        private AssertEntityNameManadtoryAstrickIsShownExpectedValues mAssertEntityNameManadtoryAstrickIsShownExpectedValues;
        
        private AssertListItemInUseOnGreenlightFilterViewModalExpectedValues mAssertListItemInUseOnGreenlightFilterViewModalExpectedValues;
        
        private AssertListItemModalValueAlreadyExistsExpectedValues mAssertListItemModalValueAlreadyExistsExpectedValues;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertNewListItemLabelIsMandatoryExpectedValues mAssertNewListItemLabelIsMandatoryExpectedValues;
        
        private PressCancelToCancelAttributeDeletionParams mPressCancelToCancelAttributeDeletionParams;
        
        private SelectSingleLineInFormatFieldParams mSelectSingleLineInFormatFieldParams;
        
        private SelectTextInTypeFieldParams mSelectTextInTypeFieldParams;
        
        private ValidateCommentAdviceTextFieldExpectedValues mValidateCommentAdviceTextFieldExpectedValues;
        
        private ValidateDefaultValueDropdownListExpectedValues mValidateDefaultValueDropdownListExpectedValues;
        
        private ValidateDefaultValueFieldExpectedValues mValidateDefaultValueFieldExpectedValues;
        
        private ValidateDescriptionFieldExpectedValues mValidateDescriptionFieldExpectedValues;
        
        private ValidateDisplayNameFieldExpectedValues mValidateDisplayNameFieldExpectedValues;
        
        private ValidateDisplayWidthDropdownListInTextExpectedValues mValidateDisplayWidthDropdownListInTextExpectedValues;
        
        private ValidateDisplayWidthFieldInTypeListExpectedValues mValidateDisplayWidthFieldInTypeListExpectedValues;
        
        private ValidateDisplayWidthFieldInTypeTextExpectedValues mValidateDisplayWidthFieldInTypeTextExpectedValues;
        
        private ValidateDuplicateDataModalExpectedValues mValidateDuplicateDataModalExpectedValues;
        
        private ValidateFormatFieldDropdownListExpectedValues mValidateFormatFieldDropdownListExpectedValues;
        
        private ValidateFormatFieldDropdownListInDateExpectedValues mValidateFormatFieldDropdownListInDateExpectedValues;
        
        private ValidateFormatFieldDropdownListInLargeTextExpectedValues mValidateFormatFieldDropdownListInLargeTextExpectedValues;
        
        private ValidateFormatFieldInTypeDateExpectedValues mValidateFormatFieldInTypeDateExpectedValues;
        
        private ValidateFormatFieldInTypeLargeTextExpectedValues mValidateFormatFieldInTypeLargeTextExpectedValues;
        
        private ValidateFormatFieldInTypeTextExpectedValues mValidateFormatFieldInTypeTextExpectedValues;
        
        private ValidateListItemFieldLabelExpectedValues mValidateListItemFieldLabelExpectedValues;
        
        private ValidateListItemModalExpectedValues mValidateListItemModalExpectedValues;
        
        private ValidateListItemModalHeaderExpectedValues mValidateListItemModalHeaderExpectedValues;
        
        private ValidateListItemsFieldExpectedValues mValidateListItemsFieldExpectedValues;
        
        private ValidateMandatoryFieldExpectedValues mValidateMandatoryFieldExpectedValues;
        
        private ValidateMandatoryPropertiesOfAttributesExpectedValues mValidateMandatoryPropertiesOfAttributesExpectedValues;
        
        private ValidateMaximumLengthFieldInTypeLargeTextExpectedValues mValidateMaximumLengthFieldInTypeLargeTextExpectedValues;
        
        private ValidateMaximumLengthFieldInTypeTextExpectedValues mValidateMaximumLengthFieldInTypeTextExpectedValues;
        
        private ValidateMaximumLengthModalExpectedValues mValidateMaximumLengthModalExpectedValues;
        
        private ValidateNewAttributeModalHeaderExpectedValues mValidateNewAttributeModalHeaderExpectedValues;
        
        private ValidatePrecisionFieldExpectedValues mValidatePrecisionFieldExpectedValues;
        
        private ValidatePrecisionModalExpectedValues mValidatePrecisionModalExpectedValues;
        
        private ValidateTooltipFieldExpectedValues mValidateTooltipFieldExpectedValues;
        
        private ValidateTypeFieldExpectedValues mValidateTypeFieldExpectedValues;
        
        private ValidateTypeFieldDropdownListExpectedValues mValidateTypeFieldDropdownListExpectedValues;
        
        private ValidateUniqueFieldExpectedValues mValidateUniqueFieldExpectedValues;
        
        private ValidateUpdateDefaultValuesForNoAttributeExpectedValues mValidateUpdateDefaultValuesForNoAttributeExpectedValues;
        
        private ValidateUpdateDefaultValuesForYesAttributeExpectedValues mValidateUpdateDefaultValuesForYesAttributeExpectedValues;
        
        private ValidateUpdateDefaultValuesForYesNoAttributeExpectedValues mValidateUpdateDefaultValuesForYesNoAttributeExpectedValues;
        
        private ValidateUsedForAuditFieldExpectedValues mValidateUsedForAuditFieldExpectedValues;
        
        private VerifyEntityCurrencyAsReservedWordModalExpectedValues mVerifyEntityCurrencyAsReservedWordModalExpectedValues;
        
        private UICustomEntityCustomEnWindow mUICustomEntityCustomEnWindow;
        
        private UIMessagefromwebpageWindow1 mUIMessagefromwebpageWindow1;
        
        private UICustomEntitymyCustomWindow mUICustomEntitymyCustomWindow;
        
        private UINewCustomEntityWindoWindow mUINewCustomEntityWindoWindow;
        
        private UICustomEntityCustomEnWindow1 mUICustomEntityCustomEnWindow1;
        
        private UICustomEntityCustomEnWindow2 mUICustomEntityCustomEnWindow2;
        
        private UICustomEntityCustomEnWindow3 mUICustomEntityCustomEnWindow3;
        
        private UICustomEntityCustomEnWindow4 mUICustomEntityCustomEnWindow4;
        
        private UICustomEntityCustomEnWindow5 mUICustomEntityCustomEnWindow5;
        
        private UICustomEntityCustomEnWindow6 mUICustomEntityCustomEnWindow6;
        
        private UICustomEntityCustomEnWindow7 mUICustomEntityCustomEnWindow7;
        
        private UICustomEntityCustomEnWindow8 mUICustomEntityCustomEnWindow8;
        
        private UICustomEntitymyCEWindWindow mUICustomEntitymyCEWindWindow;
        
        private UICustomEntitytyWindowWindow mUICustomEntitytyWindowWindow;
        
        private UIGreenLightCustomEntiWindow mUIGreenLightCustomEntiWindow;
        
        private UIMessagefromwebpageWindow mUIMessagefromwebpageWindow;
        
        private UIGreenLightSetupTestiWindow mUIGreenLightSetupTestiWindow;
        
        private GreenlightAttributeControlsWinow mGreenlightAttributeControlsWinow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAttributeTypeManadtoryAstrickIsShown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertAttributeTypeManadtoryAstrickIsShownExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of '*' pane equals '*'
        /// </summary>
        public string UIItemPane2InnerText = "*";
        
        /// <summary>
        /// Verify that the 'ControlDefinition' property of '*' pane equals 'style="DISPLAY: inline; COLOR: red" id=ctl00_contentmain_reqAttributeType controltovalidate="ctl00_contentmain_cmbattributetype" display="Dynamic" validationGroup="vgAttribute" initialvalue errormessage="Please select a Type for the attribute." isvalid="false"'
        /// </summary>
        public string UIItemPane2ControlDefinition = @"style=""DISPLAY: inline; COLOR: red"" id=ctl00_contentmain_reqAttributeType controltovalidate=""ctl00_contentmain_cmbattributetype"" display=""Dynamic"" validationGroup=""vgAttribute"" initialvalue errormessage=""Please select a Type for the attribute."" isvalid=""false""";
        
        /// <summary>
        /// Verify that the 'ClassName' property of '*' pane equals 'HtmlPane'
        /// </summary>
        public string UIItemPane2ClassName = "HtmlPane";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertCorrectValidationMessageAppearsWhenAddingEmptyItemToListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///Please add a List item.'
        /// </summary>
        public string UIDivMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nPlease add a List item.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertEntityNameManadtoryAstrickIsShown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertEntityNameManadtoryAstrickIsShownExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Class' property of 'Display name***' pane equals 'twocolumn'
        /// </summary>
        public string UIDisplaynamePaneClass = "twocolumn";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '*' pane equals 'Pane'
        /// </summary>
        public string UIItemPane1ControlType = "Pane";
        
        /// <summary>
        /// Verify that the 'InnerText' property of '*' pane equals '*'
        /// </summary>
        public string UIItemPane1InnerText = "*";
        
        /// <summary>
        /// Verify that the 'ControlDefinition' property of '*' pane equals 'style="DISPLAY: inline; COLOR: red" id=ctl00_contentmain_reqdisplayname controltovalidate="ctl00_contentmain_txtattributename" display="Dynamic" validationGroup="vgAttribute" initialvalue errormessage="Please enter a Display name for this attribute." isvalid="false"'
        /// </summary>
        public string UIItemPane1ControlDefinition = @"style=""DISPLAY: inline; COLOR: red"" id=ctl00_contentmain_reqdisplayname controltovalidate=""ctl00_contentmain_txtattributename"" display=""Dynamic"" validationGroup=""vgAttribute"" initialvalue errormessage=""Please enter a Display name for this attribute."" isvalid=""false""";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertListItemInUseOnGreenlightFilterViewModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertListItemInUseOnGreenlightFilterViewModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///This list item cannot be removed as it is in use on a GreenLight View Filter.'
        /// </summary>
        public string UIDivMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nThis list item cannot be removed as it is in use on a " +
            "GreenLight View Filter.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertListItemModalValueAlreadyExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertListItemModalValueAlreadyExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///This value is already in the list.'
        /// </summary>
        public string UIDivMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nThis value is already in the list.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of '*' pane equals '*'
        /// </summary>
        public string FormatValidatorInnerText = "*";
        
        /// <summary>
        /// Verify that the 'ControlDefinition' property of '*' pane equals 'style="DISPLAY: inline; COLOR: red" id=ctl00_contentmain_reqTextFormat controltovalidate="ctl00_contentmain_cmbtextformat" display="Dynamic" validationGroup="vgAttribute" initialvalue errormessage="Please select a Format for this attribute." isvalid="false" enabled="true"'
        /// </summary>
        public string FormatValidatorControlDefinition = @"style=""DISPLAY: inline; COLOR: red"" id=ctl00_contentmain_reqTextFormat controltovalidate=""ctl00_contentmain_cmbtextformat"" display=""Dynamic"" validationGroup=""vgAttribute"" initialvalue errormessage=""Please select a Format for this attribute."" isvalid=""false"" enabled=""true""";
        
        /// <summary>
        /// Verify that the 'ClassName' property of '*' pane equals 'HtmlPane'
        /// </summary>
        public string FormatValidatorClassName = "HtmlPane";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNewListItemLabelIsMandatory'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertNewListItemLabelIsMandatoryExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'List item*' label equals 'List item*'
        /// </summary>
        public string UIListitemLabelInnerText = "List item*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'PressCancelToCancelAttributeDeletion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class PressCancelToCancelAttributeDeletionParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Tab}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Enter}' in 'Cancel' button
        /// </summary>
        public string UICancelButtonSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectSingleLineInFormatField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SelectSingleLineInFormatFieldParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Single Line' in 'Format*' combo box
        /// </summary>
        public string UIFormatComboBoxSelectedItem = "Single Line";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectTextInTypeField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SelectTextInTypeFieldParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Text' in 'Type*' combo box
        /// </summary>
        public string UITypeComboBoxSelectedItem = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateCommentAdviceTextField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateCommentAdviceTextFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Comment advice text' label equals 'Comment advice text'
        /// </summary>
        public string UICommentadvicetextLabelInnerText = "Comment advice text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDefaultValueDropdownList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDefaultValueDropdownListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Default value*' combo box equals ' [None] No Yes'
        /// </summary>
        public string UIDefaultvalueComboBoxInnerText = " [None] No Yes";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDefaultValueField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDefaultValueFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Default value*' label equals 'Default value*'
        /// </summary>
        public string UIDefaultvalueLabelInnerText = "Default value*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDescriptionField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDescriptionFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Description' label equals 'Description'
        /// </summary>
        public string UIDescriptionLabelInnerText = "Description";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDisplayNameField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDisplayNameFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Display name*' label equals 'Display name*'
        /// </summary>
        public string UIDisplaynameLabelInnerText = "Display name*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDisplayWidthDropdownListInText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDisplayWidthDropdownListInTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Display width*' combo box equals ' [None] Standard Wide'
        /// </summary>
        public string UIDisplaywidthComboBoxInnerText = " [None] Standard Wide";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDisplayWidthFieldInTypeList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDisplayWidthFieldInTypeListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Display width*' label equals 'Display width*'
        /// </summary>
        public string UIDisplaywidthLabelInnerText = "Display width*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDisplayWidthFieldInTypeText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDisplayWidthFieldInTypeTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Display width*' label equals 'Display width*'
        /// </summary>
        public string UIDisplaywidthLabelInnerText = "Display width*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDuplicateDataModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateDuplicateDataModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///An attribute or relationship with this Display name already exists.'
        /// </summary>
        public string UIDivMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nAn attribute or relationship with this Display name al" +
            "ready exists.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateFormatFieldDropdownList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateFormatFieldDropdownListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Format*' combo box equals ' [None] Single Line Multiple Line'
        /// </summary>
        public string UIFormatComboBoxInnerText = " [None] Single Line Multiple Line";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateFormatFieldDropdownListInDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateFormatFieldDropdownListInDateExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Format*' combo box equals ' [None] Date Only Time Only Date and Time'
        /// </summary>
        public string UIFormatComboBox1InnerText = " [None] Date Only Time Only Date and Time";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateFormatFieldDropdownListInLargeText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateFormatFieldDropdownListInLargeTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Format*' combo box equals ' [None] Multiple Line Formatted Text Box'
        /// </summary>
        public string UIFormatComboBox2InnerText = " [None] Multiple Line Formatted Text Box";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateFormatFieldInTypeDate'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateFormatFieldInTypeDateExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Format*' label equals 'Format*'
        /// </summary>
        public string UIFormatLabel1InnerText = "Format*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateFormatFieldInTypeLargeText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateFormatFieldInTypeLargeTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Format*' label equals 'Format*'
        /// </summary>
        public string UIFormatLabel2InnerText = "Format*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateFormatFieldInTypeText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateFormatFieldInTypeTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Format*' label equals 'Format*'
        /// </summary>
        public string UIFormatLabelInnerText = "Format*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateListItemFieldLabel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateListItemFieldLabelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'List item*' label equals 'List item*'
        /// </summary>
        public string UIListitemLabelInnerText = "List item*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateListItemModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateListItemModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'New List Item' pane equals 'New List Item'
        /// </summary>
        public string UINewListItemPaneInnerText = "New List Item";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateListItemModalHeader'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateListItemModalHeaderExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'New List Item' pane equals 'New List Item'
        /// </summary>
        public string UINewListItemPaneInnerText = "New List Item";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateListItemsField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateListItemsFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'List items*' label equals 'List items*'
        /// </summary>
        public string UIListitemsLabelInnerText = "List items*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMandatoryField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateMandatoryFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Mandatory' label equals 'Mandatory'
        /// </summary>
        public string UIMandatoryLabelInnerText = "Mandatory";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMandatoryPropertiesOfAttributes'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateMandatoryPropertiesOfAttributesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///Please enter a Display name for this attribute.
        ///Please select a Type for the attribute.'
        /// </summary>
        public string UICtl00_pnlMasterPopupPaneDisplayText = "Message from Expenses\r\n\r\n\r\nPlease enter a Display name for this attribute.\r\nPleas" +
            "e select a Type for the attribute.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMaximumLengthFieldInTypeLargeText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateMaximumLengthFieldInTypeLargeTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Maximum length' label equals 'Maximum length'
        /// </summary>
        public string UIMaximumlengthLabel1InnerText = "Maximum length";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMaximumLengthFieldInTypeText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateMaximumLengthFieldInTypeTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Maximum length' label equals 'Maximum length'
        /// </summary>
        public string UIMaximumlengthLabelInnerText = "Maximum length";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMaximumLengthModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateMaximumLengthModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///Please select a number greater than or equal to 0 for Maximum length.
        ///Please select a number less than or equal to 500 for Maximum length.'
        /// </summary>
        public string UIDivMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nPlease select a number greater than or equal to 0 for " +
            "Maximum length.\r\nPlease select a number less than or equal to 500 for Maximum le" +
            "ngth.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateNewAttributeModalHeader'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateNewAttributeModalHeaderExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Display name*' label equals 'Display name*'
        /// </summary>
        public string UIDisplaynameLabelInnerText = "Display name*";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'New Attribute' pane equals 'New Attribute'
        /// </summary>
        public string UINewAttributePaneDisplayText = "New Attribute";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePrecisionField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidatePrecisionFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Precision*' label equals 'Precision*'
        /// </summary>
        public string UIPrecisionLabelInnerText = "Precision*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePrecisionModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidatePrecisionModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'divMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///Please select a Precision value greater than 0.
        ///Please select a Precision value less than 6.'
        /// </summary>
        public string UIDivMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nPlease select a Precision value greater than 0.\r\nPleas" +
            "e select a Precision value less than 6.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateTooltipField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateTooltipFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Tooltip' label equals 'Tooltip'
        /// </summary>
        public string UITooltipLabelInnerText = "Tooltip";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateTypeField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateTypeFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Type*' label equals 'Type*'
        /// </summary>
        public string UITypeLabelInnerText = "Type*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateTypeFieldDropdownList'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateTypeFieldDropdownListExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Type*' combo box equals ' [None] Text Integer Decimal Currency Yes/No List Date Large Text Comment Attachment Contact'
        /// </summary>
        public string UITypeComboBoxInnerText = " [None] Text Integer Decimal Currency Yes/No List Date Large Text Comment Attachm" +
            "ent Contact";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUniqueField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateUniqueFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Unique' label equals 'Unique'
        /// </summary>
        public string UIUniqueLabelInnerText = "Unique";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUpdateDefaultValuesForNoAttribute'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateUpdateDefaultValuesForNoAttributeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Would you like to populate any existing records fo...' label equals 'Would you like to populate any existing records for this GreenLight with the default value of "No" for this new attribute?'
        /// </summary>
        public string UIWouldyouliketopopulaText1DisplayText = "Would you like to populate any existing records for this GreenLight with the defa" +
            "ult value of \"No\" for this new attribute?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUpdateDefaultValuesForYesAttribute'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateUpdateDefaultValuesForYesAttributeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Would you like to populate any existing records fo...' label equals 'Would you like to populate any existing records for this GreenLight with the default value of "Yes" for this new attribute?'
        /// </summary>
        public string UIWouldyouliketopopulaTextDisplayText = "Would you like to populate any existing records for this GreenLight with the defa" +
            "ult value of \"Yes\" for this new attribute?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUpdateDefaultValuesForYesNoAttribute'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateUpdateDefaultValuesForYesNoAttributeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Would you like to populate any existing records fo...' label equals 'Would you like to populate any existing records for this GreenLight with the default value of "Yes" for this new attribute?'
        /// </summary>
        public string UIWouldyouliketopopulaTextDisplayText = "Would you like to populate any existing records for this GreenLight with the defa" +
            "ult value of \"Yes\" for this new attribute?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateUsedForAuditField'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ValidateUsedForAuditFieldExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Used for audit?' label equals 'Used for audit'
        /// </summary>
        public string UIUsedforauditLabelInnerText = "Used for audit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyEntityCurrencyAsReservedWordModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class VerifyEntityCurrencyAsReservedWordModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///GreenLight Currency is not allowed as a Display name for this attribute (reserved keyword).
        ///It is used as a predefined attribute by the system.'
        /// </summary>
        public string UICtl00_pnlMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nGreenLight Currency is not allowed as a Display name f" +
            "or this attribute (reserved keyword).\r\nIt is used as a predefined attribute by t" +
            "he system.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        
        public UICustomEntityCustomEnDocument1 UICustomEntityCustomEnDocument1
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument1 == null))
                {
                    this.mUICustomEntityCustomEnDocument1 = new UICustomEntityCustomEnDocument1(this);
                }
                return this.mUICustomEntityCustomEnDocument1;
            }
        }
        
        public UICustomEntityCustomEnDocument2 UICustomEntityCustomEnDocument2
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument2 == null))
                {
                    this.mUICustomEntityCustomEnDocument2 = new UICustomEntityCustomEnDocument2(this);
                }
                return this.mUICustomEntityCustomEnDocument2;
            }
        }
        
        public UICustomEntityCustomEnDocument3 UICustomEntityCustomEnDocument3
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument3 == null))
                {
                    this.mUICustomEntityCustomEnDocument3 = new UICustomEntityCustomEnDocument3(this);
                }
                return this.mUICustomEntityCustomEnDocument3;
            }
        }
        
        public UICustomEntityCustomEnDocument4 UICustomEntityCustomEnDocument4
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument4 == null))
                {
                    this.mUICustomEntityCustomEnDocument4 = new UICustomEntityCustomEnDocument4(this);
                }
                return this.mUICustomEntityCustomEnDocument4;
            }
        }
        
        public UICustomEntityCustomEnDocument5 UICustomEntityCustomEnDocument5
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument5 == null))
                {
                    this.mUICustomEntityCustomEnDocument5 = new UICustomEntityCustomEnDocument5(this);
                }
                return this.mUICustomEntityCustomEnDocument5;
            }
        }
        
        public UICustomEntityCustomEnDocument6 UICustomEntityCustomEnDocument6
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument6 == null))
                {
                    this.mUICustomEntityCustomEnDocument6 = new UICustomEntityCustomEnDocument6(this);
                }
                return this.mUICustomEntityCustomEnDocument6;
            }
        }
        
        public UICustomEntityCustomEnDocument7 UICustomEntityCustomEnDocument7
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument7 == null))
                {
                    this.mUICustomEntityCustomEnDocument7 = new UICustomEntityCustomEnDocument7(this);
                }
                return this.mUICustomEntityCustomEnDocument7;
            }
        }
        
        public UICustomEntityCustomEnDocument8 UICustomEntityCustomEnDocument8
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument8 == null))
                {
                    this.mUICustomEntityCustomEnDocument8 = new UICustomEntityCustomEnDocument8(this);
                }
                return this.mUICustomEntityCustomEnDocument8;
            }
        }
        
        public UICustomEntityCustomEnDocument9 UICustomEntityCustomEnDocument9
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument9 == null))
                {
                    this.mUICustomEntityCustomEnDocument9 = new UICustomEntityCustomEnDocument9(this);
                }
                return this.mUICustomEntityCustomEnDocument9;
            }
        }
        
        public UICustomEntityCustomEnDocument10 UICustomEntityCustomEnDocument10
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument10 == null))
                {
                    this.mUICustomEntityCustomEnDocument10 = new UICustomEntityCustomEnDocument10(this);
                }
                return this.mUICustomEntityCustomEnDocument10;
            }
        }
        
        public UICustomEntityCustomEnDocument11 UICustomEntityCustomEnDocument11
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument11 == null))
                {
                    this.mUICustomEntityCustomEnDocument11 = new UICustomEntityCustomEnDocument11(this);
                }
                return this.mUICustomEntityCustomEnDocument11;
            }
        }
        
        public UICustomEntityCustomEnDocument12 UICustomEntityCustomEnDocument12
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument12 == null))
                {
                    this.mUICustomEntityCustomEnDocument12 = new UICustomEntityCustomEnDocument12(this);
                }
                return this.mUICustomEntityCustomEnDocument12;
            }
        }
        
        public UICustomEntityCustomEnDocument13 UICustomEntityCustomEnDocument13
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument13 == null))
                {
                    this.mUICustomEntityCustomEnDocument13 = new UICustomEntityCustomEnDocument13(this);
                }
                return this.mUICustomEntityCustomEnDocument13;
            }
        }
        
        public UICustomEntityCustomEnDocument14 UICustomEntityCustomEnDocument14
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument14 == null))
                {
                    this.mUICustomEntityCustomEnDocument14 = new UICustomEntityCustomEnDocument14(this);
                }
                return this.mUICustomEntityCustomEnDocument14;
            }
        }
        
        public UICustomEntityCustomEnDocument15 UICustomEntityCustomEnDocument15
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument15 == null))
                {
                    this.mUICustomEntityCustomEnDocument15 = new UICustomEntityCustomEnDocument15(this);
                }
                return this.mUICustomEntityCustomEnDocument15;
            }
        }
        
        public UICustomEntityCustomEnDocument16 UICustomEntityCustomEnDocument16
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument16 == null))
                {
                    this.mUICustomEntityCustomEnDocument16 = new UICustomEntityCustomEnDocument16(this);
                }
                return this.mUICustomEntityCustomEnDocument16;
            }
        }
        
        public UICustomEntityCustomEnDocument17 UICustomEntityCustomEnDocument17
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument17 == null))
                {
                    this.mUICustomEntityCustomEnDocument17 = new UICustomEntityCustomEnDocument17(this);
                }
                return this.mUICustomEntityCustomEnDocument17;
            }
        }
        
        public UICustomEntityCustomEnDocument18 UICustomEntityCustomEnDocument18
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument18 == null))
                {
                    this.mUICustomEntityCustomEnDocument18 = new UICustomEntityCustomEnDocument18(this);
                }
                return this.mUICustomEntityCustomEnDocument18;
            }
        }
        
        public UICustomEntityCustomEnDocument19 UICustomEntityCustomEnDocument19
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument19 == null))
                {
                    this.mUICustomEntityCustomEnDocument19 = new UICustomEntityCustomEnDocument19(this);
                }
                return this.mUICustomEntityCustomEnDocument19;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument mUICustomEntityCustomEnDocument;
        
        private UICustomEntityCustomEnDocument1 mUICustomEntityCustomEnDocument1;
        
        private UICustomEntityCustomEnDocument2 mUICustomEntityCustomEnDocument2;
        
        private UICustomEntityCustomEnDocument3 mUICustomEntityCustomEnDocument3;
        
        private UICustomEntityCustomEnDocument4 mUICustomEntityCustomEnDocument4;
        
        private UICustomEntityCustomEnDocument5 mUICustomEntityCustomEnDocument5;
        
        private UICustomEntityCustomEnDocument6 mUICustomEntityCustomEnDocument6;
        
        private UICustomEntityCustomEnDocument7 mUICustomEntityCustomEnDocument7;
        
        private UICustomEntityCustomEnDocument8 mUICustomEntityCustomEnDocument8;
        
        private UICustomEntityCustomEnDocument9 mUICustomEntityCustomEnDocument9;
        
        private UICustomEntityCustomEnDocument10 mUICustomEntityCustomEnDocument10;
        
        private UICustomEntityCustomEnDocument11 mUICustomEntityCustomEnDocument11;
        
        private UICustomEntityCustomEnDocument12 mUICustomEntityCustomEnDocument12;
        
        private UICustomEntityCustomEnDocument13 mUICustomEntityCustomEnDocument13;
        
        private UICustomEntityCustomEnDocument14 mUICustomEntityCustomEnDocument14;
        
        private UICustomEntityCustomEnDocument15 mUICustomEntityCustomEnDocument15;
        
        private UICustomEntityCustomEnDocument16 mUICustomEntityCustomEnDocument16;
        
        private UICustomEntityCustomEnDocument17 mUICustomEntityCustomEnDocument17;
        
        private UICustomEntityCustomEnDocument18 mUICustomEntityCustomEnDocument18;
        
        private UICustomEntityCustomEnDocument19 mUICustomEntityCustomEnDocument19;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAttributesHyperlink
        {
            get
            {
                if ((this.mUIAttributesHyperlink == null))
                {
                    this.mUIAttributesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "lnkAttributes";
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Attributes";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "changePage(\'Attributes\');";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:changePage(\'Attributes\');";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=lnk href=\"javascript:changePage(\'\');\"";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUIAttributesHyperlink;
            }
        }
        
        public UIPgOptAttributesPane UIPgOptAttributesPane
        {
            get
            {
                if ((this.mUIPgOptAttributesPane == null))
                {
                    this.mUIPgOptAttributesPane = new UIPgOptAttributesPane(this);
                }
                return this.mUIPgOptAttributesPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAttributesHyperlink;
        
        private UIPgOptAttributesPane mUIPgOptAttributesPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIPgOptAttributesPane : HtmlDiv
    {
        
        public UIPgOptAttributesPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "pgOptAttributes";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New Attribute New n:1 Relationship New 1";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=pgOptAttributes class";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UINewAttributeHyperlink
        {
            get
            {
                if ((this.mUINewAttributeHyperlink == null))
                {
                    this.mUINewAttributeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUINewAttributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUINewAttributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUINewAttributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUINewAttributeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "New Attribute";
                    this.mUINewAttributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "NewAttribute();";
                    this.mUINewAttributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUINewAttributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:NewAttribute();";
                    this.mUINewAttributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "submenuitem";
                    this.mUINewAttributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=submenuitem href=\"javascript:NewAt";
                    this.mUINewAttributeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUINewAttributeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUINewAttributeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument1 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UICtl00_contentmain_pnPane
        {
            get
            {
                if ((this.mUICtl00_contentmain_pnPane == null))
                {
                    this.mUICtl00_contentmain_pnPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_contentmain_pnPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_pnladdattribute";
                    this.mUICtl00_contentmain_pnPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "General Details\r\nDisplay name**Descripti";
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "modalpanel";
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 10004; POSITION: fixed; ";
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "53";
                    #endregion
                }
                return this.mUICtl00_contentmain_pnPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUICtl00_contentmain_pnPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument2 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "shared/admin/aecustomentity.aspx", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlTable UITbl_gridAttributesTable
        {
            get
            {
                if ((this.mUITbl_gridAttributesTable == null))
                {
                    this.mUITbl_gridAttributesTable = new HtmlTable(this);
                    #region Search Criteria
                    this.mUITbl_gridAttributesTable.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_gridAttributes";
                    this.mUITbl_gridAttributesTable.SearchProperties[HtmlTable.PropertyNames.Name] = null;
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Display NameDescription Field TypeUsed F";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_gridAttributes class=datatbl";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.RowCount] = "6";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "6";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.Class] = "datatbl";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUITbl_gridAttributesTable;
            }
        }
        #endregion
        
        #region Fields
        private HtmlTable mUITbl_gridAttributesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument3 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan UISavePane
        {
            get
            {
                if ((this.mUISavePane == null))
                {
                    this.mUISavePane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnSaveAttribute";
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "save";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnSaveAttribute cl";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "128";
                    #endregion
                }
                return this.mUISavePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUISavePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument4 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan UICancelPane
        {
            get
            {
                if ((this.mUICancelPane == null))
                {
                    this.mUICancelPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUICancelPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnCancelAttribute";
                    this.mUICancelPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "cancel";
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnCancelAttribute ";
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "136";
                    #endregion
                }
                return this.mUICancelPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUICancelPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument5 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAttributesHyperlink
        {
            get
            {
                if ((this.mUIAttributesHyperlink == null))
                {
                    this.mUIAttributesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "lnkAttributes";
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAttributesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Attributes";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "changePage(\'Attributes\');";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:changePage(\'Attributes\');";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "selectedPage";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=lnk class=selectedPage href=\"javascri";
                    this.mUIAttributesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUIAttributesHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAttributesHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument6 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIListitemsPane UIListitemsPane
        {
            get
            {
                if ((this.mUIListitemsPane == null))
                {
                    this.mUIListitemsPane = new UIListitemsPane(this);
                }
                return this.mUIListitemsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIListitemsPane mUIListitemsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIListitemsPane : HtmlDiv
    {
        
        public UIListitemsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListOptions";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "List items** ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListOptions class=onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "67";
            #endregion
        }
        
        #region Properties
        public HtmlImage UINewListItemImage
        {
            get
            {
                if ((this.mUINewListItemImage == null))
                {
                    this.mUINewListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "New List Item";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/GreenLight/expenses//shared/images/icons/16/plain/add2.png";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://localhost/GreenLight/expenses//shared/images/icons/16/plain/add2.png";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"New List Item\" src=\"../images/icons";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUINewListItemImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUINewListItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument7 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIAddEditListItemItemsPane UIAddEditListItemItemsPane
        {
            get
            {
                if ((this.mUIAddEditListItemItemsPane == null))
                {
                    this.mUIAddEditListItemItemsPane = new UIAddEditListItemItemsPane(this);
                }
                return this.mUIAddEditListItemItemsPane;
            }
        }
        
        public HtmlSpan UISavePane
        {
            get
            {
                if ((this.mUISavePane == null))
                {
                    this.mUISavePane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnSaveListItem";
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "save";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnSaveListItem cla";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "137";
                    #endregion
                }
                return this.mUISavePane;
            }
        }
        #endregion
        
        #region Fields
        private UIAddEditListItemItemsPane mUIAddEditListItemItemsPane;
        
        private HtmlSpan mUISavePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIAddEditListItemItemsPane : HtmlDiv
    {
        
        public UIAddEditListItemItemsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_pnllistitem";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Add/Edit List Item\r\nItem** \r\nsave cancel";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "modalpanel formpanel";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 11004; POSITION: fixed; ";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "71";
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Item** ";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "twocolumn";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=twocolumn";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument8 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UICtl00_pnlMasterPopupPane
        {
            get
            {
                if ((this.mUICtl00_pnlMasterPopupPane == null))
                {
                    this.mUICtl00_pnlMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_pnlMasterPopup";
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nPlease enter ";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "errorModal";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 11004; POSITION: fixed; ";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "203";
                    #endregion
                }
                return this.mUICtl00_pnlMasterPopupPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUICtl00_pnlMasterPopupPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument9 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight:", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/buttons/btn_close.png", PropertyExpressionOperator.Contains));
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "53";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIOKImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument10 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UICtl00_pnlMasterPopupPane
        {
            get
            {
                if ((this.mUICtl00_pnlMasterPopupPane == null))
                {
                    this.mUICtl00_pnlMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_pnlMasterPopup";
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nAn attribute/";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "errorModal";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 11004; POSITION: fixed; ";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "203";
                    #endregion
                }
                return this.mUICtl00_pnlMasterPopupPane;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "/shared/images/buttons/btn_close.png", PropertyExpressionOperator.Contains));
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "55";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUICtl00_pnlMasterPopupPane;
        
        private HtmlImage mUIOKImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument11 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Custom Entity: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDivListOptionsPane UIDivListOptionsPane
        {
            get
            {
                if ((this.mUIDivListOptionsPane == null))
                {
                    this.mUIDivListOptionsPane = new UIDivListOptionsPane(this);
                }
                return this.mUIDivListOptionsPane;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://testing3.sel-expenses.com/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "61";
                    this.mUIOKImage.WindowTitles.Add("Custom Entity: Custom Entity 1");
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        #endregion
        
        #region Fields
        private UIDivListOptionsPane mUIDivListOptionsPane;
        
        private HtmlImage mUIOKImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDivListOptionsPane : HtmlDiv
    {
        
        public UIDivListOptionsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListOptions";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "List items*standard list item 1standard ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListOptions class=onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "67";
            this.WindowTitles.Add("Custom Entity: Custom Entity 1");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIEditListItemImage
        {
            get
            {
                if ((this.mUIEditListItemImage == null))
                {
                    this.mUIEditListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Edit List Item";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/edit.gif";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://testing3.sel-expenses.com/shared/images/icons/edit.gif";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Edit List Item\" src=\"../images/icon";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "2";
                    this.mUIEditListItemImage.WindowTitles.Add("Custom Entity: Custom Entity 1");
                    #endregion
                }
                return this.mUIEditListItemImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIEditListItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument12 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDivListOptionsPane1 UIDivListOptionsPane
        {
            get
            {
                if ((this.mUIDivListOptionsPane == null))
                {
                    this.mUIDivListOptionsPane = new UIDivListOptionsPane1(this);
                }
                return this.mUIDivListOptionsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDivListOptionsPane1 mUIDivListOptionsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDivListOptionsPane1 : HtmlDiv
    {
        
        public UIDivListOptionsPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListOptions";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "List items*standard list item 1standard ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListOptions class=onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "67";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIEditListItemImage
        {
            get
            {
                if ((this.mUIEditListItemImage == null))
                {
                    this.mUIEditListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Edit List Item";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/edit.gif";
                    this.mUIEditListItemImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/icons/edit.gif", PropertyExpressionOperator.Contains));
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Edit List Item\" src=\"../images/icon";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUIEditListItemImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIEditListItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument13 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Custom Entity: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan UISavePane
        {
            get
            {
                if ((this.mUISavePane == null))
                {
                    this.mUISavePane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnSaveListItem";
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "save";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnSaveListItem cla";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "138";
                    #endregion
                }
                return this.mUISavePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUISavePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument14 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument14(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIDivMasterPopupPane
        {
            get
            {
                if ((this.mUIDivMasterPopupPane == null))
                {
                    this.mUIDivMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divMasterPopup";
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nPlease add a ";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divMasterPopup";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "205";
                    #endregion
                }
                return this.mUIDivMasterPopupPane;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/buttons/btn_close.png", PropertyExpressionOperator.Contains));
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "61";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIDivMasterPopupPane;
        
        private HtmlImage mUIOKImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument15 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument15(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlLabel UIListitemLabel
        {
            get
            {
                if ((this.mUIListitemLabel == null))
                {
                    this.mUIListitemLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIListitemLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lbllistitem";
                    this.mUIListitemLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIListitemLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtlistitem";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "List item*";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lbllistitem class=m";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "27";
                    #endregion
                }
                return this.mUIListitemLabel;
            }
        }
        #endregion
        
        #region Fields
        private HtmlLabel mUIListitemLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument16 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument16(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIDivMasterPopupPane
        {
            get
            {
                if ((this.mUIDivMasterPopupPane == null))
                {
                    this.mUIDivMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divMasterPopup";
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nThis value is";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divMasterPopup";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "205";
                    #endregion
                }
                return this.mUIDivMasterPopupPane;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/buttons/btn_close.png", PropertyExpressionOperator.Contains));
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "61";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIDivMasterPopupPane;
        
        private HtmlImage mUIOKImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument17 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument17(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIDivListOptionsPane2 UIDivListOptionsPane
        {
            get
            {
                if ((this.mUIDivListOptionsPane == null))
                {
                    this.mUIDivListOptionsPane = new UIDivListOptionsPane2(this);
                }
                return this.mUIDivListOptionsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDivListOptionsPane2 mUIDivListOptionsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDivListOptionsPane2 : HtmlDiv
    {
        
        public UIDivListOptionsPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListOptions";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "List items*standard list item 1standard ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListOptions class=onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "68";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIDeleteListItemImage
        {
            get
            {
                if ((this.mUIDeleteListItemImage == null))
                {
                    this.mUIDeleteListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete List Item";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/delete2.gif";
                    this.mUIDeleteListItemImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/icons/delete2.gif", PropertyExpressionOperator.Contains));
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "removeListItem();";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:removeListItem();";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Delete List Item\" src=\"../images/ic";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUIDeleteListItemImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIDeleteListItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument18 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument18(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_custAttDisplayName";
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "54";
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument19 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument19(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UICtl00_pnlMasterPopupPane
        {
            get
            {
                if ((this.mUICtl00_pnlMasterPopupPane == null))
                {
                    this.mUICtl00_pnlMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_pnlMasterPopup";
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nEntity Curren";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "errorModal";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 11004; POSITION: fixed; ";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "202";
                    #endregion
                }
                return this.mUICtl00_pnlMasterPopupPane;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/buttons/btn_close.png", PropertyExpressionOperator.Contains));
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "65";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUICtl00_pnlMasterPopupPane;
        
        private HtmlImage mUIOKImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMessagefromwebpageWindow1 : WinWindow
    {
        
        public UIMessagefromwebpageWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIWouldyouliketopopulaWindow UIWouldyouliketopopulaWindow
        {
            get
            {
                if ((this.mUIWouldyouliketopopulaWindow == null))
                {
                    this.mUIWouldyouliketopopulaWindow = new UIWouldyouliketopopulaWindow(this);
                }
                return this.mUIWouldyouliketopopulaWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIWouldyouliketopopulaWindow mUIWouldyouliketopopulaWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Message from webpage");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIWouldyouliketopopulaWindow : WinWindow
    {
        
        public UIWouldyouliketopopulaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            #endregion
        }
        
        #region Properties
        public WinText UIWouldyouliketopopulaText
        {
            get
            {
                if ((this.mUIWouldyouliketopopulaText == null))
                {
                    this.mUIWouldyouliketopopulaText = new WinText(this);
                    #region Search Criteria
                    this.mUIWouldyouliketopopulaText.SearchProperties[WinText.PropertyNames.Name] = "Would you like to populate any existing records for this GreenLight with the defa" +
                        "ult value of \"No\" for this new attribute?";
                    #endregion
                }
                return this.mUIWouldyouliketopopulaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWouldyouliketopopulaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntitymyCustomWindow : BrowserWindow
    {
        
        public UICustomEntitymyCustomWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "GreenLight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntitymyCustomDocument UICustomEntitymyCustomDocument
        {
            get
            {
                if ((this.mUICustomEntitymyCustomDocument == null))
                {
                    this.mUICustomEntitymyCustomDocument = new UICustomEntitymyCustomDocument(this);
                }
                return this.mUICustomEntitymyCustomDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntitymyCustomDocument mUICustomEntitymyCustomDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntitymyCustomDocument : HtmlDocument
    {
        
        public UICustomEntitymyCustomDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight:", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UITbl_gridAttributesTable UITbl_gridAttributesTable
        {
            get
            {
                if ((this.mUITbl_gridAttributesTable == null))
                {
                    this.mUITbl_gridAttributesTable = new UITbl_gridAttributesTable(this);
                }
                return this.mUITbl_gridAttributesTable;
            }
        }
        
        public HtmlSpan UISavePane
        {
            get
            {
                if ((this.mUISavePane == null))
                {
                    this.mUISavePane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnSaveEntity";
                    this.mUISavePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "save";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnSaveEntity class";
                    this.mUISavePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "45";
                    #endregion
                }
                return this.mUISavePane;
            }
        }
        
        public HtmlSpan UICancelPane
        {
            get
            {
                if ((this.mUICancelPane == null))
                {
                    this.mUICancelPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUICancelPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnCancelEntity";
                    this.mUICancelPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "cancel";
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnCancelEntity cla";
                    this.mUICancelPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "47";
                    #endregion
                }
                return this.mUICancelPane;
            }
        }
        
        public HtmlLabel UIDisplaynameLabel
        {
            get
            {
                if ((this.mUIDisplaynameLabel == null))
                {
                    this.mUIDisplaynameLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblattributename";
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtattributename";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Display name*";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblattributename cl";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "9";
                    #endregion
                }
                return this.mUIDisplaynameLabel;
            }
        }
        
        public HtmlDiv UINewAttributePane
        {
            get
            {
                if ((this.mUINewAttributePane == null))
                {
                    this.mUINewAttributePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUINewAttributePane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divAttributeSectionHeader";
                    this.mUINewAttributePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUINewAttributePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New Attribute";
                    this.mUINewAttributePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUINewAttributePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "sectiontitle";
                    this.mUINewAttributePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divAttributeSectionHeader class=secti";
                    this.mUINewAttributePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "55";
                    #endregion
                }
                return this.mUINewAttributePane;
            }
        }
        
        public HtmlLabel UIDescriptionLabel
        {
            get
            {
                if ((this.mUIDescriptionLabel == null))
                {
                    this.mUIDescriptionLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblattributedescription";
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtattributedescription";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Description";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblattributedescrip";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "10";
                    #endregion
                }
                return this.mUIDescriptionLabel;
            }
        }
        
        public HtmlLabel UITooltipLabel
        {
            get
            {
                if ((this.mUITooltipLabel == null))
                {
                    this.mUITooltipLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUITooltipLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblattributetooltip";
                    this.mUITooltipLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUITooltipLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtattributetooltip";
                    this.mUITooltipLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Tooltip";
                    this.mUITooltipLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUITooltipLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblattributetooltip";
                    this.mUITooltipLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "11";
                    #endregion
                }
                return this.mUITooltipLabel;
            }
        }
        
        public HtmlLabel UIMandatoryLabel
        {
            get
            {
                if ((this.mUIMandatoryLabel == null))
                {
                    this.mUIMandatoryLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIMandatoryLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblattributemandatory";
                    this.mUIMandatoryLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIMandatoryLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_chkattributemandatory";
                    this.mUIMandatoryLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Mandatory";
                    this.mUIMandatoryLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIMandatoryLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblattributemandato";
                    this.mUIMandatoryLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "12";
                    #endregion
                }
                return this.mUIMandatoryLabel;
            }
        }
        
        public HtmlLabel UITypeLabel
        {
            get
            {
                if ((this.mUITypeLabel == null))
                {
                    this.mUITypeLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUITypeLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblattributetype";
                    this.mUITypeLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUITypeLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbattributetype";
                    this.mUITypeLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Type*";
                    this.mUITypeLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUITypeLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblattributetype cl";
                    this.mUITypeLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "13";
                    #endregion
                }
                return this.mUITypeLabel;
            }
        }
        
        public HtmlLabel UIUsedforauditLabel
        {
            get
            {
                if ((this.mUIUsedforauditLabel == null))
                {
                    this.mUIUsedforauditLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIUsedforauditLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblAuditIdentifier";
                    this.mUIUsedforauditLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIUsedforauditLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_chkAuditIdentifier";
                    this.mUIUsedforauditLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Used for audit?";
                    this.mUIUsedforauditLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIUsedforauditLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblAuditIdentifier ";
                    this.mUIUsedforauditLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "14";
                    #endregion
                }
                return this.mUIUsedforauditLabel;
            }
        }
        
        public HtmlLabel UIUniqueLabel
        {
            get
            {
                if ((this.mUIUniqueLabel == null))
                {
                    this.mUIUniqueLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIUniqueLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblUnique";
                    this.mUIUniqueLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIUniqueLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_chkUnique";
                    this.mUIUniqueLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Unique";
                    this.mUIUniqueLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIUniqueLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lbl for=ctl00_conte";
                    this.mUIUniqueLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "15";
                    #endregion
                }
                return this.mUIUniqueLabel;
            }
        }
        
        public HtmlComboBox UITypeComboBox
        {
            get
            {
                if ((this.mUITypeComboBox == null))
                {
                    this.mUITypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUITypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbattributetype";
                    this.mUITypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbattributetype";
                    this.mUITypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUITypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Type*";
                    this.mUITypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUITypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "10";
                    this.mUITypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUITypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbattributetype na";
                    this.mUITypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUITypeComboBox;
            }
        }
        
        public HtmlLabel UIFormatLabel
        {
            get
            {
                if ((this.mUIFormatLabel == null))
                {
                    this.mUIFormatLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIFormatLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "lbltextformat";
                    this.mUIFormatLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIFormatLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbtextformat";
                    this.mUIFormatLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Format*";
                    this.mUIFormatLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIFormatLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lbltextformat class=mandatory for=ctl";
                    this.mUIFormatLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "16";
                    #endregion
                }
                return this.mUIFormatLabel;
            }
        }
        
        public HtmlLabel UIMaximumlengthLabel
        {
            get
            {
                if ((this.mUIMaximumlengthLabel == null))
                {
                    this.mUIMaximumlengthLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIMaximumlengthLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "lblmaximumlength";
                    this.mUIMaximumlengthLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIMaximumlengthLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtmaxlength";
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Maximum length";
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lblmaximumlength for=ctl00_contentmai";
                    this.mUIMaximumlengthLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "17";
                    #endregion
                }
                return this.mUIMaximumlengthLabel;
            }
        }
        
        public HtmlComboBox UIFormatComboBox
        {
            get
            {
                if ((this.mUIFormatComboBox == null))
                {
                    this.mUIFormatComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIFormatComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbtextformat";
                    this.mUIFormatComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbtextformat";
                    this.mUIFormatComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIFormatComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Format*";
                    this.mUIFormatComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIFormatComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "3";
                    this.mUIFormatComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = "fillspan";
                    this.mUIFormatComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbtextformat class";
                    this.mUIFormatComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUIFormatComboBox;
            }
        }
        
        public HtmlLabel UIDisplaywidthLabel
        {
            get
            {
                if ((this.mUIDisplaywidthLabel == null))
                {
                    this.mUIDisplaywidthLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDisplaywidthLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "lblDisplayWidth";
                    this.mUIDisplaywidthLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDisplaywidthLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbDisplayWidth";
                    this.mUIDisplaywidthLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Display width*";
                    this.mUIDisplaywidthLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIDisplaywidthLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lblDisplayWidth class=mandatory for=c";
                    this.mUIDisplaywidthLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "26";
                    #endregion
                }
                return this.mUIDisplaywidthLabel;
            }
        }
        
        public HtmlLabel UIPrecisionLabel
        {
            get
            {
                if ((this.mUIPrecisionLabel == null))
                {
                    this.mUIPrecisionLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIPrecisionLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "lblprecision";
                    this.mUIPrecisionLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIPrecisionLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtprecision";
                    this.mUIPrecisionLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Precision*";
                    this.mUIPrecisionLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIPrecisionLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lblprecision class=mandatory for=ctl0";
                    this.mUIPrecisionLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "20";
                    #endregion
                }
                return this.mUIPrecisionLabel;
            }
        }
        
        public HtmlLabel UIDefaultvalueLabel
        {
            get
            {
                if ((this.mUIDefaultvalueLabel == null))
                {
                    this.mUIDefaultvalueLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDefaultvalueLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "lbldefaultvalue";
                    this.mUIDefaultvalueLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDefaultvalueLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbdefaultvalue";
                    this.mUIDefaultvalueLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Default value*";
                    this.mUIDefaultvalueLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIDefaultvalueLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lbldefaultvalue class=mandatory for=c";
                    this.mUIDefaultvalueLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "22";
                    #endregion
                }
                return this.mUIDefaultvalueLabel;
            }
        }
        
        public HtmlLabel UIListitemsLabel
        {
            get
            {
                if ((this.mUIListitemsLabel == null))
                {
                    this.mUIListitemsLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIListitemsLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "lbllstitems";
                    this.mUIListitemsLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIListitemsLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_lstitems";
                    this.mUIListitemsLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "List items*";
                    this.mUIListitemsLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIListitemsLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lbllstitems class=mandatory for=ctl00";
                    this.mUIListitemsLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "23";
                    #endregion
                }
                return this.mUIListitemsLabel;
            }
        }
        
        public UIListitemsPane1 UIListitemsPane
        {
            get
            {
                if ((this.mUIListitemsPane == null))
                {
                    this.mUIListitemsPane = new UIListitemsPane1(this);
                }
                return this.mUIListitemsPane;
            }
        }
        
        public HtmlLabel UIFormatLabel1
        {
            get
            {
                if ((this.mUIFormatLabel1 == null))
                {
                    this.mUIFormatLabel1 = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIFormatLabel1.SearchProperties[HtmlLabel.PropertyNames.Id] = "lbldateformat";
                    this.mUIFormatLabel1.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIFormatLabel1.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbdateformat";
                    this.mUIFormatLabel1.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Format*";
                    this.mUIFormatLabel1.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIFormatLabel1.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lbldateformat class=mandatory for=ctl";
                    this.mUIFormatLabel1.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "21";
                    #endregion
                }
                return this.mUIFormatLabel1;
            }
        }
        
        public HtmlLabel UIFormatLabel2
        {
            get
            {
                if ((this.mUIFormatLabel2 == null))
                {
                    this.mUIFormatLabel2 = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIFormatLabel2.SearchProperties[HtmlLabel.PropertyNames.Id] = "lblformatlarge";
                    this.mUIFormatLabel2.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIFormatLabel2.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbtextformatlarge";
                    this.mUIFormatLabel2.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Format*";
                    this.mUIFormatLabel2.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIFormatLabel2.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lblformatlarge class=mandatory for=ct";
                    this.mUIFormatLabel2.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "18";
                    #endregion
                }
                return this.mUIFormatLabel2;
            }
        }
        
        public HtmlLabel UIMaximumlengthLabel1
        {
            get
            {
                if ((this.mUIMaximumlengthLabel1 == null))
                {
                    this.mUIMaximumlengthLabel1 = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIMaximumlengthLabel1.SearchProperties[HtmlLabel.PropertyNames.Id] = "lblmaxlengthlarge";
                    this.mUIMaximumlengthLabel1.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIMaximumlengthLabel1.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtmaxlengthlarge";
                    this.mUIMaximumlengthLabel1.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Maximum length";
                    this.mUIMaximumlengthLabel1.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIMaximumlengthLabel1.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lblmaxlengthlarge for=ctl00_contentma";
                    this.mUIMaximumlengthLabel1.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "19";
                    #endregion
                }
                return this.mUIMaximumlengthLabel1;
            }
        }
        
        public HtmlLabel UICommentadvicetextLabel
        {
            get
            {
                if ((this.mUICommentadvicetextLabel == null))
                {
                    this.mUICommentadvicetextLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUICommentadvicetextLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "lblAdviceText";
                    this.mUICommentadvicetextLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUICommentadvicetextLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtAdviceText";
                    this.mUICommentadvicetextLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Comment advice text";
                    this.mUICommentadvicetextLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUICommentadvicetextLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=lblAdviceText for=ctl00_contentmain_t";
                    this.mUICommentadvicetextLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "24";
                    #endregion
                }
                return this.mUICommentadvicetextLabel;
            }
        }
        
        public HtmlComboBox UIDisplaywidthComboBox
        {
            get
            {
                if ((this.mUIDisplaywidthComboBox == null))
                {
                    this.mUIDisplaywidthComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDisplaywidthComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbDisplayWidth";
                    this.mUIDisplaywidthComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbDisplayWidth";
                    this.mUIDisplaywidthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDisplaywidthComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Display width*";
                    this.mUIDisplaywidthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDisplaywidthComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "3";
                    this.mUIDisplaywidthComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDisplaywidthComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbDisplayWidth nam";
                    this.mUIDisplaywidthComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "9";
                    #endregion
                }
                return this.mUIDisplaywidthComboBox;
            }
        }
        
        public HtmlComboBox UIDefaultvalueComboBox
        {
            get
            {
                if ((this.mUIDefaultvalueComboBox == null))
                {
                    this.mUIDefaultvalueComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIDefaultvalueComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbdefaultvalue";
                    this.mUIDefaultvalueComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbdefaultvalue";
                    this.mUIDefaultvalueComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIDefaultvalueComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Default value*";
                    this.mUIDefaultvalueComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIDefaultvalueComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "3";
                    this.mUIDefaultvalueComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIDefaultvalueComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbdefaultvalue nam";
                    this.mUIDefaultvalueComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "6";
                    #endregion
                }
                return this.mUIDefaultvalueComboBox;
            }
        }
        
        public HtmlComboBox UIFormatComboBox1
        {
            get
            {
                if ((this.mUIFormatComboBox1 == null))
                {
                    this.mUIFormatComboBox1 = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIFormatComboBox1.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbdateformat";
                    this.mUIFormatComboBox1.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbdateformat";
                    this.mUIFormatComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIFormatComboBox1.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Format*";
                    this.mUIFormatComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIFormatComboBox1.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "4";
                    this.mUIFormatComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Class] = null;
                    this.mUIFormatComboBox1.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbdateformat name=";
                    this.mUIFormatComboBox1.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "5";
                    #endregion
                }
                return this.mUIFormatComboBox1;
            }
        }
        
        public HtmlComboBox UIFormatComboBox2
        {
            get
            {
                if ((this.mUIFormatComboBox2 == null))
                {
                    this.mUIFormatComboBox2 = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIFormatComboBox2.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbtextformatlarge";
                    this.mUIFormatComboBox2.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbtextformatlarge";
                    this.mUIFormatComboBox2.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIFormatComboBox2.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Format*";
                    this.mUIFormatComboBox2.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIFormatComboBox2.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "3";
                    this.mUIFormatComboBox2.FilterProperties[HtmlComboBox.PropertyNames.Class] = "fillspan";
                    this.mUIFormatComboBox2.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbtextformatlarge ";
                    this.mUIFormatComboBox2.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "4";
                    #endregion
                }
                return this.mUIFormatComboBox2;
            }
        }
        
        public HtmlSpan UISavePane1
        {
            get
            {
                if ((this.mUISavePane1 == null))
                {
                    this.mUISavePane1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUISavePane1.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnSaveAttribute";
                    this.mUISavePane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUISavePane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "save";
                    this.mUISavePane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUISavePane1.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUISavePane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnSaveAttribute cl";
                    this.mUISavePane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "141";
                    #endregion
                }
                return this.mUISavePane1;
            }
        }
        
        public HtmlSpan UICancelPane1
        {
            get
            {
                if ((this.mUICancelPane1 == null))
                {
                    this.mUICancelPane1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUICancelPane1.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_btnCancelAttribute";
                    this.mUICancelPane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICancelPane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "cancel";
                    this.mUICancelPane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICancelPane1.FilterProperties[HtmlDiv.PropertyNames.Class] = "buttonInner";
                    this.mUICancelPane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnCancelAttribute ";
                    this.mUICancelPane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "143";
                    #endregion
                }
                return this.mUICancelPane1;
            }
        }
        
        public HtmlSpan CommentAdviceTextAsterisk
        {
            get
            {
                if ((this.mCommentAdviceTextAsterisk == null))
                {
                    this.mCommentAdviceTextAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mCommentAdviceTextAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqComment";
                    this.mCommentAdviceTextAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mCommentAdviceTextAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mCommentAdviceTextAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mCommentAdviceTextAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mCommentAdviceTextAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mCommentAdviceTextAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "125";
                    #endregion
                }
                return this.mCommentAdviceTextAsterisk;
            }
        }
        
        public HtmlSpan MaximumLengthAsterisk
        {
            get
            {
                if ((this.mMaximumLengthAsterisk == null))
                {
                    this.mMaximumLengthAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mMaximumLengthAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_cmpMaxlength2";
                    this.mMaximumLengthAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mMaximumLengthAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mMaximumLengthAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mMaximumLengthAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mMaximumLengthAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mMaximumLengthAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "87";
                    #endregion
                }
                return this.mMaximumLengthAsterisk;
            }
        }
        
        public HtmlDiv UIDivMasterPopupPane
        {
            get
            {
                if ((this.mUIDivMasterPopupPane == null))
                {
                    this.mUIDivMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divMasterPopup";
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nPlease select";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divMasterPopup";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "203";
                    #endregion
                }
                return this.mUIDivMasterPopupPane;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://localhost/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "68";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        
        public HtmlSpan MaximumLengthAsterisk1
        {
            get
            {
                if ((this.mMaximumLengthAsterisk1 == null))
                {
                    this.mMaximumLengthAsterisk1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mMaximumLengthAsterisk1.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_cmpSingleLineMaxLength";
                    this.mMaximumLengthAsterisk1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mMaximumLengthAsterisk1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mMaximumLengthAsterisk1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mMaximumLengthAsterisk1.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mMaximumLengthAsterisk1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mMaximumLengthAsterisk1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "88";
                    #endregion
                }
                return this.mMaximumLengthAsterisk1;
            }
        }
        
        public UITbl_gridAttributesTable1 UITbl_gridAttributesTable1
        {
            get
            {
                if ((this.mUITbl_gridAttributesTable1 == null))
                {
                    this.mUITbl_gridAttributesTable1 = new UITbl_gridAttributesTable1(this);
                }
                return this.mUITbl_gridAttributesTable1;
            }
        }
        #endregion
        
        #region Fields
        private UITbl_gridAttributesTable mUITbl_gridAttributesTable;
        
        private HtmlSpan mUISavePane;
        
        private HtmlSpan mUICancelPane;
        
        private HtmlLabel mUIDisplaynameLabel;
        
        private HtmlDiv mUINewAttributePane;
        
        private HtmlLabel mUIDescriptionLabel;
        
        private HtmlLabel mUITooltipLabel;
        
        private HtmlLabel mUIMandatoryLabel;
        
        private HtmlLabel mUITypeLabel;
        
        private HtmlLabel mUIUsedforauditLabel;
        
        private HtmlLabel mUIUniqueLabel;
        
        private HtmlComboBox mUITypeComboBox;
        
        private HtmlLabel mUIFormatLabel;
        
        private HtmlLabel mUIMaximumlengthLabel;
        
        private HtmlComboBox mUIFormatComboBox;
        
        private HtmlLabel mUIDisplaywidthLabel;
        
        private HtmlLabel mUIPrecisionLabel;
        
        private HtmlLabel mUIDefaultvalueLabel;
        
        private HtmlLabel mUIListitemsLabel;
        
        private UIListitemsPane1 mUIListitemsPane;
        
        private HtmlLabel mUIFormatLabel1;
        
        private HtmlLabel mUIFormatLabel2;
        
        private HtmlLabel mUIMaximumlengthLabel1;
        
        private HtmlLabel mUICommentadvicetextLabel;
        
        private HtmlComboBox mUIDisplaywidthComboBox;
        
        private HtmlComboBox mUIDefaultvalueComboBox;
        
        private HtmlComboBox mUIFormatComboBox1;
        
        private HtmlComboBox mUIFormatComboBox2;
        
        private HtmlSpan mUISavePane1;
        
        private HtmlSpan mUICancelPane1;
        
        private HtmlSpan mCommentAdviceTextAsterisk;
        
        private HtmlSpan mMaximumLengthAsterisk;
        
        private HtmlDiv mUIDivMasterPopupPane;
        
        private HtmlImage mUIOKImage;
        
        private HtmlSpan mMaximumLengthAsterisk1;
        
        private UITbl_gridAttributesTable1 mUITbl_gridAttributesTable1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITbl_gridAttributesTable : HtmlTable
    {
        
        public UITbl_gridAttributesTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_gridAttributes";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Display Name DescriptionField TypeUsed F";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_gridAttributes class=datatbl";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "6";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "6";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "datatbl";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDisplayNameHyperlink
        {
            get
            {
                if ((this.mUIDisplayNameHyperlink == null))
                {
                    this.mUIDisplayNameHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDisplayNameHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDisplayNameHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDisplayNameHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDisplayNameHyperlink.SearchProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.InnerText, "Display Name", PropertyExpressionOperator.Contains));
                    this.mUIDisplayNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.Grid.sortGrid(\'gridAttributes\',\'display_name\',0);";
                    this.mUIDisplayNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDisplayNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.Grid.sortGrid(\'gridAttributes\',\'display_name\',0);";
                    this.mUIDisplayNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDisplayNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"javascript:SEL.Grid.sortGrid(\'grid";
                    this.mUIDisplayNameHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIDisplayNameHyperlink.WindowTitles.Add("Custom Entity: myCustomEntity");
                    #endregion
                }
                return this.mUIDisplayNameHyperlink;
            }
        }
        
        public HtmlHyperlink UIDescriptionHyperlink
        {
            get
            {
                if ((this.mUIDescriptionHyperlink == null))
                {
                    this.mUIDescriptionHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDescriptionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDescriptionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDescriptionHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDescriptionHyperlink.SearchProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.InnerText, "Description", PropertyExpressionOperator.Contains));
                    this.mUIDescriptionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.Grid.sortGrid(\'gridAttributes\',\'description\',0);";
                    this.mUIDescriptionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDescriptionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.Grid.sortGrid(\'gridAttributes\',\'description\',0);";
                    this.mUIDescriptionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDescriptionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"javascript:SEL.Grid.sortGrid(\'grid";
                    this.mUIDescriptionHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIDescriptionHyperlink.WindowTitles.Add("Custom Entity: myCustomEntity");
                    #endregion
                }
                return this.mUIDescriptionHyperlink;
            }
        }
        
        public HtmlHyperlink UIFieldTypeHyperlink
        {
            get
            {
                if ((this.mUIFieldTypeHyperlink == null))
                {
                    this.mUIFieldTypeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIFieldTypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIFieldTypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIFieldTypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIFieldTypeHyperlink.SearchProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.InnerText, "Type", PropertyExpressionOperator.Contains));
                    this.mUIFieldTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.Grid.sortGrid(\'gridAttributes\',\'fieldtype\',0);";
                    this.mUIFieldTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIFieldTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.Grid.sortGrid(\'gridAttributes\',\'fieldtype\',0);";
                    this.mUIFieldTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIFieldTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"javascript:SEL.Grid.sortGrid(\'grid";
                    this.mUIFieldTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUIFieldTypeHyperlink;
            }
        }
        
        public HtmlHyperlink UIUsedForAuditHyperlink
        {
            get
            {
                if ((this.mUIUsedForAuditHyperlink == null))
                {
                    this.mUIUsedForAuditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIUsedForAuditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIUsedForAuditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIUsedForAuditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIUsedForAuditHyperlink.SearchProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.InnerText, "Used For Audit", PropertyExpressionOperator.Contains));
                    this.mUIUsedForAuditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.Grid.sortGrid(\'gridAttributes\',\'is_audit_identity\',0);";
                    this.mUIUsedForAuditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIUsedForAuditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.Grid.sortGrid(\'gridAttributes\',\'is_audit_identity\',0);";
                    this.mUIUsedForAuditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIUsedForAuditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"javascript:SEL.Grid.sortGrid(\'grid";
                    this.mUIUsedForAuditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIUsedForAuditHyperlink.WindowTitles.Add("Custom Entity: myCustomEntity");
                    #endregion
                }
                return this.mUIUsedForAuditHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDisplayNameHyperlink;
        
        private HtmlHyperlink mUIDescriptionHyperlink;
        
        private HtmlHyperlink mUIFieldTypeHyperlink;
        
        private HtmlHyperlink mUIUsedForAuditHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIListitemsPane1 : HtmlDiv
    {
        
        public UIListitemsPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListOptions";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "List items** ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListOptions class=onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "67";
            #endregion
        }
        
        #region Properties
        public HtmlImage UINewListItemImage
        {
            get
            {
                if ((this.mUINewListItemImage == null))
                {
                    this.mUINewListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "New List Item";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/GreenLight/expenses/shared/images/icons/16/plain/add2.png";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://localhost/GreenLight/expenses/shared/images/icons/16/plain/add2.png";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "showListItemModal(false);";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:showListItemModal(false);";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"New List Item\" src=\"../images/icons";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUINewListItemImage;
            }
        }
        
        public HtmlImage UIEditListItemImage
        {
            get
            {
                if ((this.mUIEditListItemImage == null))
                {
                    this.mUIEditListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Edit List Item";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/GreenLight/expenses/shared/images/icons/edit.gif";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://localhost/GreenLight/expenses/shared/images/icons/edit.gif";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Edit List Item\" src=\"../images/icon";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUIEditListItemImage;
            }
        }
        
        public HtmlImage UIDeleteListItemImage
        {
            get
            {
                if ((this.mUIDeleteListItemImage == null))
                {
                    this.mUIDeleteListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete List Item";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/GreenLight/expenses/shared/images/icons/delete2.gif";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://localhost/GreenLight/expenses/shared/images/icons/delete2.gif";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "removeListItem();";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:removeListItem();";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Delete List Item\" src=\"../images/ic";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUIDeleteListItemImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUINewListItemImage;
        
        private HtmlImage mUIEditListItemImage;
        
        private HtmlImage mUIDeleteListItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITbl_gridAttributesTable1 : HtmlTable
    {
        
        public UITbl_gridAttributesTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_gridAttributes";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Display NameDescriptionTypeUsed for Audi";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_gridAttributes class=datatbl";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "7";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "6";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "datatbl";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UITypeHyperlink
        {
            get
            {
                if ((this.mUITypeHyperlink == null))
                {
                    this.mUITypeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUITypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUITypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUITypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUITypeHyperlink.SearchProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.InnerText, "Type", PropertyExpressionOperator.Contains));
                    this.mUITypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.Grid.sortGrid(\'gridAttributes\',\'fieldtype\',0);";
                    this.mUITypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUITypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.Grid.sortGrid(\'gridAttributes\',\'fieldtype\',0);";
                    this.mUITypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUITypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"javascript:SEL.Grid.sortGrid(\'grid";
                    this.mUITypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUITypeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUITypeHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINewCustomEntityWindoWindow : BrowserWindow
    {
        
        public UINewCustomEntityWindoWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UINewCustomEntityDocument UINewCustomEntityDocument
        {
            get
            {
                if ((this.mUINewCustomEntityDocument == null))
                {
                    this.mUINewCustomEntityDocument = new UINewCustomEntityDocument(this);
                }
                return this.mUINewCustomEntityDocument;
            }
        }
        #endregion
        
        #region Fields
        private UINewCustomEntityDocument mUINewCustomEntityDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINewCustomEntityDocument : HtmlDocument
    {
        
        public UINewCustomEntityDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "sel-expenses.com/shared/admin/aecustomentity.aspx", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqentityname";
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "9";
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        
        public UICtl00_contentmain_pnPane UICtl00_contentmain_pnPane
        {
            get
            {
                if ((this.mUICtl00_contentmain_pnPane == null))
                {
                    this.mUICtl00_contentmain_pnPane = new UICtl00_contentmain_pnPane(this);
                }
                return this.mUICtl00_contentmain_pnPane;
            }
        }
        
        public HtmlSpan UIItemPane1
        {
            get
            {
                if ((this.mUIItemPane1 == null))
                {
                    this.mUIItemPane1 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIItemPane1.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqdisplayname";
                    this.mUIItemPane1.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane1.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIItemPane1.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane1.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIItemPane1.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIItemPane1.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "53";
                    #endregion
                }
                return this.mUIItemPane1;
            }
        }
        
        public HtmlSpan UIItemPane2
        {
            get
            {
                if ((this.mUIItemPane2 == null))
                {
                    this.mUIItemPane2 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIItemPane2.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqAttributeType";
                    this.mUIItemPane2.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane2.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIItemPane2.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane2.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIItemPane2.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIItemPane2.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "69";
                    #endregion
                }
                return this.mUIItemPane2;
            }
        }
        
        public HtmlSpan FormatValidator
        {
            get
            {
                if ((this.mFormatValidator == null))
                {
                    this.mFormatValidator = new HtmlSpan(this);
                    #region Search Criteria
                    this.mFormatValidator.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqTextFormat";
                    this.mFormatValidator.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mFormatValidator.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mFormatValidator.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mFormatValidator.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mFormatValidator.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mFormatValidator.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "83";
                    #endregion
                }
                return this.mFormatValidator;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIItemPane;
        
        private UICtl00_contentmain_pnPane mUICtl00_contentmain_pnPane;
        
        private HtmlSpan mUIItemPane1;
        
        private HtmlSpan mUIItemPane2;
        
        private HtmlSpan mFormatValidator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICtl00_contentmain_pnPane : HtmlDiv
    {
        
        public UICtl00_contentmain_pnPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_pnladdattribute";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New Attribute\r\nDisplay name***Descriptio";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "modalpanel";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 10004; POSITION: fixed; ";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "57";
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIDisplaynamePane
        {
            get
            {
                if ((this.mUIDisplaynamePane == null))
                {
                    this.mUIDisplaynamePane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDisplaynamePane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIDisplaynamePane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDisplaynamePane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Display name***";
                    this.mUIDisplaynamePane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDisplaynamePane.FilterProperties[HtmlDiv.PropertyNames.Class] = "twocolumn";
                    this.mUIDisplaynamePane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=twocolumn";
                    this.mUIDisplaynamePane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
                    #endregion
                }
                return this.mUIDisplaynamePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIDisplaynamePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow1 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow1()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument20 UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument20(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument20 mUICustomEntityCustomEnDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument20 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument20(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqAttributeType";
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "69";
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow2 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow2()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument21 UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument21(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument21 mUICustomEntityCustomEnDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument21 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqTextFormat";
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "83";
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow3 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow3()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument22 UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument22(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument22 mUICustomEntityCustomEnDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument22 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument22(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Custom Entity: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan TypeAsterisk
        {
            get
            {
                if ((this.mTypeAsterisk == null))
                {
                    this.mTypeAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mTypeAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqAttributeType";
                    this.mTypeAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mTypeAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mTypeAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mTypeAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mTypeAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mTypeAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "69";
                    #endregion
                }
                return this.mTypeAsterisk;
            }
        }
        
        public HtmlSpan DisplayNameAsterisk
        {
            get
            {
                if ((this.mDisplayNameAsterisk == null))
                {
                    this.mDisplayNameAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mDisplayNameAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqdisplayname";
                    this.mDisplayNameAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "53";
                    #endregion
                }
                return this.mDisplayNameAsterisk;
            }
        }
        
        public HtmlSpan FormatAsterisk
        {
            get
            {
                if ((this.mFormatAsterisk == null))
                {
                    this.mFormatAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mFormatAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqTextFormat";
                    this.mFormatAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "83";
                    #endregion
                }
                return this.mFormatAsterisk;
            }
        }
        
        public HtmlSpan DisplayWidthAsterisk
        {
            get
            {
                if ((this.mDisplayWidthAsterisk == null))
                {
                    this.mDisplayWidthAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mDisplayWidthAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqDisplayWidth";
                    this.mDisplayWidthAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "131";
                    #endregion
                }
                return this.mDisplayWidthAsterisk;
            }
        }
        
        public HtmlSpan PrecisionAsterisk
        {
            get
            {
                if ((this.mPrecisionAsterisk == null))
                {
                    this.mPrecisionAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mPrecisionAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqPrecision";
                    this.mPrecisionAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "104";
                    #endregion
                }
                return this.mPrecisionAsterisk;
            }
        }
        
        public HtmlSpan DefaultValueAsterisk
        {
            get
            {
                if ((this.mDefaultValueAsterisk == null))
                {
                    this.mDefaultValueAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mDefaultValueAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqDefaultYesNo";
                    this.mDefaultValueAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mDefaultValueAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mDefaultValueAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mDefaultValueAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mDefaultValueAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mDefaultValueAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "116";
                    #endregion
                }
                return this.mDefaultValueAsterisk;
            }
        }
        
        public HtmlSpan ListItemsAsterisk
        {
            get
            {
                if ((this.mListItemsAsterisk == null))
                {
                    this.mListItemsAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mListItemsAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_custAttListItem";
                    this.mListItemsAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "121";
                    #endregion
                }
                return this.mListItemsAsterisk;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mTypeAsterisk;
        
        private HtmlSpan mDisplayNameAsterisk;
        
        private HtmlSpan mFormatAsterisk;
        
        private HtmlSpan mDisplayWidthAsterisk;
        
        private HtmlSpan mPrecisionAsterisk;
        
        private HtmlSpan mDefaultValueAsterisk;
        
        private HtmlSpan mListItemsAsterisk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow4 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow4()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument23 UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument23(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument23 mUICustomEntityCustomEnDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument23 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument23(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Custom Entity: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan LargetextFormat
        {
            get
            {
                if ((this.mLargetextFormat == null))
                {
                    this.mLargetextFormat = new HtmlSpan(this);
                    #region Search Criteria
                    this.mLargetextFormat.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqLargeTextFormat";
                    this.mLargetextFormat.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mLargetextFormat.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mLargetextFormat.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mLargetextFormat.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mLargetextFormat.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mLargetextFormat.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "94";
                    #endregion
                }
                return this.mLargetextFormat;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mLargetextFormat;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow5 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow5()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Greenlight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument24 UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument24(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument24 mUICustomEntityCustomEnDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument24 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument24(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight:", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan DateFormatAsterisk
        {
            get
            {
                if ((this.mDateFormatAsterisk == null))
                {
                    this.mDateFormatAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mDateFormatAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqDateFormat";
                    this.mDateFormatAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mDateFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mDateFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mDateFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mDateFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mDateFormatAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "111";
                    #endregion
                }
                return this.mDateFormatAsterisk;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mDateFormatAsterisk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow6 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow6()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Greenlight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument25 UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument25(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument25 mUICustomEntityCustomEnDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument25 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument25(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight:", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan ListItemsAsterisk
        {
            get
            {
                if ((this.mListItemsAsterisk == null))
                {
                    this.mListItemsAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mListItemsAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_custAttListItem";
                    this.mListItemsAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mListItemsAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "121";
                    #endregion
                }
                return this.mListItemsAsterisk;
            }
        }
        
        public HtmlSpan DisplayWidthAsterisk
        {
            get
            {
                if ((this.mDisplayWidthAsterisk == null))
                {
                    this.mDisplayWidthAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mDisplayWidthAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqDisplayWidth";
                    this.mDisplayWidthAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mDisplayWidthAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "132";
                    #endregion
                }
                return this.mDisplayWidthAsterisk;
            }
        }
        
        public HtmlDiv MissingListItemsAndDisplayWidthErrorModal
        {
            get
            {
                if ((this.mMissingListItemsAndDisplayWidthErrorModal == null))
                {
                    this.mMissingListItemsAndDisplayWidthErrorModal = new HtmlDiv(this);
                    #region Search Criteria
                    this.mMissingListItemsAndDisplayWidthErrorModal.SearchProperties[HtmlDiv.PropertyNames.Id] = "divMasterPopup";
                    this.mMissingListItemsAndDisplayWidthErrorModal.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mMissingListItemsAndDisplayWidthErrorModal.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nPlease add a ";
                    this.mMissingListItemsAndDisplayWidthErrorModal.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mMissingListItemsAndDisplayWidthErrorModal.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mMissingListItemsAndDisplayWidthErrorModal.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divMasterPopup";
                    this.mMissingListItemsAndDisplayWidthErrorModal.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "204";
                    #endregion
                }
                return this.mMissingListItemsAndDisplayWidthErrorModal;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mListItemsAsterisk;
        
        private HtmlSpan mDisplayWidthAsterisk;
        
        private HtmlDiv mMissingListItemsAndDisplayWidthErrorModal;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow7 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow7()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Greenlight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntitymyCustomDocument1 UICustomEntitymyCustomDocument
        {
            get
            {
                if ((this.mUICustomEntitymyCustomDocument == null))
                {
                    this.mUICustomEntitymyCustomDocument = new UICustomEntitymyCustomDocument1(this);
                }
                return this.mUICustomEntitymyCustomDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntitymyCustomDocument1 mUICustomEntitymyCustomDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntitymyCustomDocument1 : HtmlDocument
    {
        
        public UICustomEntitymyCustomDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan InvalidDataPrecisionAsterisk
        {
            get
            {
                if ((this.mInvalidDataPrecisionAsterisk == null))
                {
                    this.mInvalidDataPrecisionAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mInvalidDataPrecisionAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_cmpPrecision1";
                    this.mInvalidDataPrecisionAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mInvalidDataPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mInvalidDataPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mInvalidDataPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mInvalidDataPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mInvalidDataPrecisionAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "104";
                    #endregion
                }
                return this.mInvalidDataPrecisionAsterisk;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mInvalidDataPrecisionAsterisk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnWindow8 : BrowserWindow
    {
        
        public UICustomEntityCustomEnWindow8()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Greenlight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntityCustomEnDocument26 UICustomEntityCustomEnDocument
        {
            get
            {
                if ((this.mUICustomEntityCustomEnDocument == null))
                {
                    this.mUICustomEntityCustomEnDocument = new UICustomEntityCustomEnDocument26(this);
                }
                return this.mUICustomEntityCustomEnDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntityCustomEnDocument26 mUICustomEntityCustomEnDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntityCustomEnDocument26 : HtmlDocument
    {
        
        public UICustomEntityCustomEnDocument26(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlSpan InvalidDataPrecisionAsterisk2
        {
            get
            {
                if ((this.mInvalidDataPrecisionAsterisk2 == null))
                {
                    this.mInvalidDataPrecisionAsterisk2 = new HtmlSpan(this);
                    #region Search Criteria
                    this.mInvalidDataPrecisionAsterisk2.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_cmpPrecision2";
                    this.mInvalidDataPrecisionAsterisk2.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mInvalidDataPrecisionAsterisk2.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mInvalidDataPrecisionAsterisk2.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mInvalidDataPrecisionAsterisk2.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mInvalidDataPrecisionAsterisk2.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mInvalidDataPrecisionAsterisk2.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "105";
                    #endregion
                }
                return this.mInvalidDataPrecisionAsterisk2;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mInvalidDataPrecisionAsterisk2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntitymyCEWindWindow : BrowserWindow
    {
        
        public UICustomEntitymyCEWindWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Greenlight: ", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntitymyCEDocument UICustomEntitymyCEDocument
        {
            get
            {
                if ((this.mUICustomEntitymyCEDocument == null))
                {
                    this.mUICustomEntitymyCEDocument = new UICustomEntitymyCEDocument(this);
                }
                return this.mUICustomEntitymyCEDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntitymyCEDocument mUICustomEntitymyCEDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntitymyCEDocument : HtmlDocument
    {
        
        public UICustomEntitymyCEDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIDivMasterPopupPane
        {
            get
            {
                if ((this.mUIDivMasterPopupPane == null))
                {
                    this.mUIDivMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divMasterPopup";
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nAn attribute ";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divMasterPopup";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "202";
                    #endregion
                }
                return this.mUIDivMasterPopupPane;
            }
        }
        
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnSaveAttribute";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnSaveAttribute";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "save";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonInner";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnSaveAttribute cl";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "48";
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        
        public HtmlInputButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnCancelAttribute";
                    this.mUICancelButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnCancelAttribute";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "cancel";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonInner";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnCancelAttribute ";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "49";
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        
        public HtmlInputButton UIListItemSaveButton
        {
            get
            {
                if ((this.mUIListItemSaveButton == null))
                {
                    this.mUIListItemSaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIListItemSaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnSaveListItem";
                    this.mUIListItemSaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnSaveListItem";
                    this.mUIListItemSaveButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "save";
                    this.mUIListItemSaveButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIListItemSaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIListItemSaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonInner";
                    this.mUIListItemSaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnSaveListItem cla";
                    this.mUIListItemSaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "46";
                    #endregion
                }
                return this.mUIListItemSaveButton;
            }
        }
        
        public HtmlInputButton UIListItemCancelButton
        {
            get
            {
                if ((this.mUIListItemCancelButton == null))
                {
                    this.mUIListItemCancelButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIListItemCancelButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnCancelListItem";
                    this.mUIListItemCancelButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnCancelListItem";
                    this.mUIListItemCancelButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "cancel";
                    this.mUIListItemCancelButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIListItemCancelButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIListItemCancelButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonInner";
                    this.mUIListItemCancelButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnCancelListItem c";
                    this.mUIListItemCancelButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "47";
                    #endregion
                }
                return this.mUIListItemCancelButton;
            }
        }
        
        public UIDivListOptionsPane3 UIDivListOptionsPane
        {
            get
            {
                if ((this.mUIDivListOptionsPane == null))
                {
                    this.mUIDivListOptionsPane = new UIDivListOptionsPane3(this);
                }
                return this.mUIDivListOptionsPane;
            }
        }
        
        public HtmlDiv UINewListItemPane
        {
            get
            {
                if ((this.mUINewListItemPane == null))
                {
                    this.mUINewListItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUINewListItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListItem";
                    this.mUINewListItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New List Item";
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "sectiontitle";
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListItem class=sectiontitle";
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "77";
                    #endregion
                }
                return this.mUINewListItemPane;
            }
        }
        
        public HtmlLabel UIListitemLabel
        {
            get
            {
                if ((this.mUIListitemLabel == null))
                {
                    this.mUIListitemLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIListitemLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lbllistitem";
                    this.mUIListitemLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIListitemLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtlistitem";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "List item*";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lbllistitem class=m";
                    this.mUIListitemLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "27";
                    #endregion
                }
                return this.mUIListitemLabel;
            }
        }
        
        public HtmlEdit UIListitemEdit
        {
            get
            {
                if ((this.mUIListitemEdit == null))
                {
                    this.mUIListitemEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIListitemEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtlistitem";
                    this.mUIListitemEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtlistitem";
                    this.mUIListitemEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "List item*";
                    this.mUIListitemEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIListitemEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIListitemEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "fillspan";
                    this.mUIListitemEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "onkeydown=\"SEL.Forms.RunOnEnter(event, a";
                    this.mUIListitemEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "45";
                    #endregion
                }
                return this.mUIListitemEdit;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIDivMasterPopupPane;
        
        private HtmlInputButton mUISaveButton;
        
        private HtmlInputButton mUICancelButton;
        
        private HtmlInputButton mUIListItemSaveButton;
        
        private HtmlInputButton mUIListItemCancelButton;
        
        private UIDivListOptionsPane3 mUIDivListOptionsPane;
        
        private HtmlDiv mUINewListItemPane;
        
        private HtmlLabel mUIListitemLabel;
        
        private HtmlEdit mUIListitemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDivListOptionsPane3 : HtmlDiv
    {
        
        public UIDivListOptionsPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListOptions";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "List items*malelmsnadflkasskajklfa a alr";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "onecolumn";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListOptions class=onecolumn attrib";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "72";
            #endregion
        }
        
        #region Properties
        public HtmlImage UINewListItemImage
        {
            get
            {
                if ((this.mUINewListItemImage == null))
                {
                    this.mUINewListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUINewListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "New List Item";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/16/plain/add2.png";
                    this.mUINewListItemImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/icons/16/plain/add2.png", PropertyExpressionOperator.Contains));
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "showListItemModal(false);";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:showListItemModal(false);";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"New List Item\" src=\"../images/icons";
                    this.mUINewListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUINewListItemImage;
            }
        }
        
        public HtmlImage UIEditListItemImage
        {
            get
            {
                if ((this.mUIEditListItemImage == null))
                {
                    this.mUIEditListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIEditListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Edit List Item";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/edit.gif";
                    this.mUIEditListItemImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/icons/edit.gif", PropertyExpressionOperator.Contains));
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:editListItem();";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Edit List Item\" src=\"../images/icon";
                    this.mUIEditListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUIEditListItemImage;
            }
        }
        
        public HtmlImage UIDeleteListItemImage
        {
            get
            {
                if ((this.mUIDeleteListItemImage == null))
                {
                    this.mUIDeleteListItemImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteListItemImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete List Item";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/delete2.gif";
                    this.mUIDeleteListItemImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/icons/delete2.gif", PropertyExpressionOperator.Contains));
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "removeListItem();";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:removeListItem();";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=\"Delete List Item\" src=\"../images/ic";
                    this.mUIDeleteListItemImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUIDeleteListItemImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUINewListItemImage;
        
        private HtmlImage mUIEditListItemImage;
        
        private HtmlImage mUIDeleteListItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntitytyWindowWindow : BrowserWindow
    {
        
        public UICustomEntitytyWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Greenlight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomEntitytyDocument UICustomEntitytyDocument
        {
            get
            {
                if ((this.mUICustomEntitytyDocument == null))
                {
                    this.mUICustomEntitytyDocument = new UICustomEntitytyDocument(this);
                }
                return this.mUICustomEntitytyDocument;
            }
        }
        #endregion
        
        #region Fields
        private UICustomEntitytyDocument mUICustomEntitytyDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICustomEntitytyDocument : HtmlDocument
    {
        
        public UICustomEntitytyDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Greenlight:", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UINewListItemListitemsPane
        {
            get
            {
                if ((this.mUINewListItemListitemsPane == null))
                {
                    this.mUINewListItemListitemsPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUINewListItemListitemsPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_pnllistitem";
                    this.mUINewListItemListitemsPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUINewListItemListitemsPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New List Item\r\nList item** \r\nsave cancel";
                    this.mUINewListItemListitemsPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUINewListItemListitemsPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "modalpanel formpanel formpanelsmall";
                    this.mUINewListItemListitemsPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 11004; POSITION: fixed; ";
                    this.mUINewListItemListitemsPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "76";
                    #endregion
                }
                return this.mUINewListItemListitemsPane;
            }
        }
        
        public HtmlDiv UINewListItemPane
        {
            get
            {
                if ((this.mUINewListItemPane == null))
                {
                    this.mUINewListItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUINewListItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divListItem";
                    this.mUINewListItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New List Item";
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "sectiontitle";
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divListItem class=sectiontitle";
                    this.mUINewListItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "77";
                    #endregion
                }
                return this.mUINewListItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUINewListItemListitemsPane;
        
        private HtmlDiv mUINewListItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGreenLightCustomEntiWindow : BrowserWindow
    {
        
        public UIGreenLightCustomEntiWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGreenLightCustomEntiDocument UIGreenLightCustomEntiDocument
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiDocument == null))
                {
                    this.mUIGreenLightCustomEntiDocument = new UIGreenLightCustomEntiDocument(this);
                }
                return this.mUIGreenLightCustomEntiDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGreenLightCustomEntiDocument mUIGreenLightCustomEntiDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGreenLightCustomEntiDocument : HtmlDocument
    {
        
        public UIGreenLightCustomEntiDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=178600", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIDivMasterPopupPane
        {
            get
            {
                if ((this.mUIDivMasterPopupPane == null))
                {
                    this.mUIDivMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divMasterPopup";
                    this.mUIDivMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nThis list ite";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divMasterPopup jQuery1710979919576709";
                    this.mUIDivMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "232";
                    #endregion
                }
                return this.mUIDivMasterPopupPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIDivMasterPopupPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMessagefromwebpageWindow : WinWindow
    {
        
        public UIMessagefromwebpageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Message from webpage";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public UIWouldyouliketopopulaWindow1 UIWouldyouliketopopulaWindow
        {
            get
            {
                if ((this.mUIWouldyouliketopopulaWindow == null))
                {
                    this.mUIWouldyouliketopopulaWindow = new UIWouldyouliketopopulaWindow1(this);
                }
                return this.mUIWouldyouliketopopulaWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIWouldyouliketopopulaWindow1 mUIWouldyouliketopopulaWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIWouldyouliketopopulaWindow1 : WinWindow
    {
        
        public UIWouldyouliketopopulaWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            #endregion
        }
        
        #region Properties
        public WinText UIWouldyouliketopopulaText
        {
            get
            {
                if ((this.mUIWouldyouliketopopulaText == null))
                {
                    this.mUIWouldyouliketopopulaText = new WinText(this);
                    #region Search Criteria
                    this.mUIWouldyouliketopopulaText.SearchProperties[WinText.PropertyNames.Name] = "Would you like to populate any existing records for this GreenLight with the defa" +
                        "ult value of \"Yes\" for this new attribute?";
                    #endregion
                }
                return this.mUIWouldyouliketopopulaText;
            }
        }
        
        public WinText UIWouldyouliketopopulaText1
        {
            get
            {
                if ((this.mUIWouldyouliketopopulaText1 == null))
                {
                    this.mUIWouldyouliketopopulaText1 = new WinText(this);
                    #region Search Criteria
                    this.mUIWouldyouliketopopulaText1.SearchProperties[WinText.PropertyNames.Name] = "Would you like to populate any existing records for this GreenLight with the defa" +
                        "ult value of \"No\" for this new attribute?";
                    #endregion
                }
                return this.mUIWouldyouliketopopulaText1;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWouldyouliketopopulaText;
        
        private WinText mUIWouldyouliketopopulaText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGreenLightSetupTestiWindow : BrowserWindow
    {
        
        public UIGreenLightSetupTestiWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGreenLightSetupTestiDocument UIGreenLightSetupTestiDocument
        {
            get
            {
                if ((this.mUIGreenLightSetupTestiDocument == null))
                {
                    this.mUIGreenLightSetupTestiDocument = new UIGreenLightSetupTestiDocument(this);
                }
                return this.mUIGreenLightSetupTestiDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGreenLightSetupTestiDocument mUIGreenLightSetupTestiDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGreenLightSetupTestiDocument : HtmlDocument
    {
        
        public UIGreenLightSetupTestiDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=19971", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnSaveListItem";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnSaveListItem";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "save";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonInner";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "onclick=\"addListItem();return false;__do";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "35";
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GreenlightAttributeControlsWinow : BrowserWindow
    {
        
        public GreenlightAttributeControlsWinow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public GreenLightAttributeControlsDocument GreenLightAttributeControlsDocument
        {
            get
            {
                if ((this.mGreenLightAttributeControlsDocument == null))
                {
                    this.mGreenLightAttributeControlsDocument = new GreenLightAttributeControlsDocument(this);
                }
                return this.mGreenLightAttributeControlsDocument;
            }
        }
        #endregion
        
        #region Fields
        private GreenLightAttributeControlsDocument mGreenLightAttributeControlsDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GreenLightAttributeControlsDocument : HtmlDocument
    {
        
        public GreenLightAttributeControlsDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=507", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlCheckBox DisplayInMobileAppCheckBox
        {
            get
            {
                if ((this.mDisplayInMobileAppCheckBox == null))
                {
                    this.mDisplayInMobileAppCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mDisplayInMobileAppCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_chkDisplayInMobile";
                    this.mDisplayInMobileAppCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$chkDisplayInMobile";
                    this.mDisplayInMobileAppCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mDisplayInMobileAppCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Display in mobile app";
                    this.mDisplayInMobileAppCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mDisplayInMobileAppCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mDisplayInMobileAppCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "name=\"ctl00$contentmain$chkDisplayInMobi";
                    this.mDisplayInMobileAppCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "53";
                    #endregion
                }
                return this.mDisplayInMobileAppCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCheckBox mDisplayInMobileAppCheckBox;
        #endregion
    }
}
