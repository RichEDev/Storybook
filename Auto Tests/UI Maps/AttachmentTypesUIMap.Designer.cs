// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Auto_Tests.UIMaps.AttachmentTypesUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class AttachmentTypesUIMap
    {
        
        /// <summary>
        /// AddAttachmentType - Use 'AddAttachmentTypeParams' to pass parameters into this method.
        /// </summary>
        public void AddAttachmentType()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddAttachmentTypeHyperlink = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UIAddAttachmentTypeHyperlink;
            HtmlComboBox uIAttachmentFileTypeComboBox = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UIAttachmentFileTypeComboBox;
            HtmlImage uISharedimagesbuttonsbImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UISharedimagesbuttonsbImage;
            #endregion

            // Click link
            Mouse.Click(uIAddAttachmentTypeHyperlink, new Point(31, 12));

            // Select 'MPG' in combo box
            uIAttachmentFileTypeComboBox.SelectedItem = this.AddAttachmentTypeParams.UIAttachmentFileTypeComboBoxSelectedItem;

            // Click '/shared/images/buttons/btn_save.png' image
            Mouse.Click(uISharedimagesbuttonsbImage, new Point(18, 14));
        }
        
        /// <summary>
        /// AddAttachmentTypeUsingCustomDefinition - Use 'AddAttachmentTypeUsingCustomDefinitionParams' to pass parameters into this method.
        /// </summary>
        public void AddAttachmentTypeUsingCustomDefinition()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddAttachmentTypeHyperlink = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UIAddAttachmentTypeHyperlink;
            HtmlComboBox uIAttachmentFileTypeComboBox1 = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UIAttachmentFileTypeComboBox1;
            HtmlImage uISharedimagesbuttonsbImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UISharedimagesbuttonsbImage;
            #endregion

            // Click link
            Mouse.Click(uIAddAttachmentTypeHyperlink, new Point(61, 6));

            // Select 'custom - Automatically generated attachment type - do not edit' in combo box
            uIAttachmentFileTypeComboBox1.SelectedItem = this.AddAttachmentTypeUsingCustomDefinitionParams.UIAttachmentFileTypeComboBox1SelectedItem;

            // Click '/shared/images/buttons/btn_save.png' image
            Mouse.Click(uISharedimagesbuttonsbImage, new Point(24, 7));
        }
        
        /// <summary>
        /// AddAttachmentTypeWithCancel - Use 'AddAttachmentTypeWithCancelParams' to pass parameters into this method.
        /// </summary>
        public void AddAttachmentTypeWithCancel()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddAttachmentTypeHyperlink = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UIAddAttachmentTypeHyperlink;
            HtmlComboBox uIAttachmentFileTypeComboBox = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UIAttachmentFileTypeComboBox;
            HtmlInputButton uICtl00contentmaincmdCButton = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UICtl00contentmaincmdCButton;
            #endregion

            // Click link
            Mouse.Click(uIAddAttachmentTypeHyperlink, new Point(41, 6));

            // Select 'MP3' in combo box
            uIAttachmentFileTypeComboBox.SelectedItem = this.AddAttachmentTypeWithCancelParams.UIAttachmentFileTypeComboBoxSelectedItem;

            // Click 'ctl00$contentmain$cmdCancelAttachmentType' button
            Mouse.Click(uICtl00contentmaincmdCButton, new Point(22, 22));
        }
        
        /// <summary>
        /// AddCustomAttachmentType - Use 'AddCustomAttachmentTypeParams' to pass parameters into this method.
        /// </summary>
        public void AddCustomAttachmentType()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddCustomAttachmentHyperlink = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UIAddCustomAttachmentHyperlink;
            HtmlEdit uIFileExtensionEdit1 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UIFileExtensionEdit1;
            HtmlEdit uIMimeHeaderEdit1 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UIMimeHeaderEdit1;
            HtmlTextArea uIDescriptionEdit1 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UIDescriptionEdit1;
            HtmlImage uISharedimagesbuttonsbImage1 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UISharedimagesbuttonsbImage1;
            #endregion

            // Click 'Add Custom Attachment' link
            Mouse.Click(uIAddCustomAttachmentHyperlink, new Point(12, 10));

            // Type 'custom' in 'File Extension' text box
            uIFileExtensionEdit1.Text = this.AddCustomAttachmentTypeParams.UIFileExtensionEdit1Text;

            // Type 'custommime' in 'Mime Header' text box
            uIMimeHeaderEdit1.Text = this.AddCustomAttachmentTypeParams.UIMimeHeaderEdit1Text;

            // Type 'Automatically generated attachment type - do not edit' in 'Description' text box
            uIDescriptionEdit1.Text = this.AddCustomAttachmentTypeParams.UIDescriptionEdit1Text;

            // Click '/shared/images/buttons/btn_save.png' image
            Mouse.Click(uISharedimagesbuttonsbImage1, new Point(32, 11));
        }
        
        /// <summary>
        /// ArchiveAttachmentType
        /// </summary>
        public void ArchiveAttachmentType()
        {
            #region Variable Declarations
            HtmlImage uIArchiveImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UITbl_gridAttachmentTyCell.UIArchiveImage;
            BrowserWindow uIAttachmentTypesWindoWindow = this.UIAttachmentTypesWindoWindow;
            #endregion

            // Click image
            Mouse.Click(uIArchiveImage, new Point(4, 6));

            // Click 'Ok' button in the browser dialog window
            uIAttachmentTypesWindoWindow.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// ClickEnableReceipts - Use 'ClickEnableReceiptsParams' to pass parameters into this method.
        /// </summary>
        public void ClickEnableReceipts()
        {
            #region Variable Declarations
            HtmlCheckBox uIReceiptscanbeuploadeCheckBox = this.UIGeneralOptionsWindowWindow.UIGeneralOptionsDocument.UIReceiptscanbeuploadeCheckBox;
            #endregion

            // Select 'Receipts can be uploaded to expense items' check box
            uIReceiptscanbeuploadeCheckBox.Checked = this.ClickEnableReceiptsParams.UIReceiptscanbeuploadeCheckBoxChecked;
        }
        
        /// <summary>
        /// CreateCustomAttachmentType - Use 'CreateCustomAttachmentTypeParams' to pass parameters into this method.
        /// </summary>
        public void CreateCustomAttachmentType()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddCustomAttachmentHyperlink = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument1.UIAddCustomAttachmentHyperlink;
            HtmlEdit uIFileExtensionEdit = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument1.UIFileExtensionEdit;
            HtmlEdit uIMimeHeaderEdit = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument1.UIMimeHeaderEdit;
            HtmlTextArea uIDescriptionEdit = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument1.UIDescriptionEdit;
            HtmlImage uISharedimagesbuttonsbImage = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument1.UISharedimagesbuttonsbImage;
            #endregion

            // Click 'Add Custom Attachment' link
            Mouse.Click(uIAddCustomAttachmentHyperlink, new Point(52, 12));

            // Type 'custom' in 'File Extension' text box
            uIFileExtensionEdit.Text = this.CreateCustomAttachmentTypeParams.UIFileExtensionEditText;

            // Type 'custommime' in 'Mime Header' text box
            uIMimeHeaderEdit.Text = this.CreateCustomAttachmentTypeParams.UIMimeHeaderEditText;

            // Type '__Automatically generated attachment type - do not edit' in 'Description' text box
            uIDescriptionEdit.Text = this.CreateCustomAttachmentTypeParams.UIDescriptionEditText;

            // Click '/shared/images/buttons/btn_save.png' image
            Mouse.Click(uISharedimagesbuttonsbImage, new Point(24, 13));
        }
        
        /// <summary>
        /// DeleteAttachmentType
        /// </summary>
        public void DeleteAttachmentType()
        {
            #region Variable Declarations
            HtmlImage uIDeleteImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UITbl_gridAttachmentTyRow.UIDeleteImage;
            BrowserWindow uIAttachmentTypesWindoWindow = this.UIAttachmentTypesWindoWindow;
            #endregion

            // Click 'Delete' image
            Mouse.Click(uIDeleteImage, new Point(7, 4));

            // Click 'Ok' button in the browser dialog window
            uIAttachmentTypesWindoWindow.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// DeleteAttachmentTypeUsingCustomDefinition
        /// </summary>
        public void DeleteAttachmentTypeUsingCustomDefinition()
        {
            #region Variable Declarations
            HtmlImage uIDeleteImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument1.UITbl_gridAttachmentTyRow.UIDeleteImage;
            BrowserWindow uIAttachmentTypesWindoWindow = this.UIAttachmentTypesWindoWindow;
            #endregion

            // Click 'Delete' image
            Mouse.Click(uIDeleteImage, new Point(8, 8));

            // Click 'Ok' button in the browser dialog window
            uIAttachmentTypesWindoWindow.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// DeleteCustomAttachmentType
        /// </summary>
        public void DeleteCustomAttachmentType()
        {
            #region Variable Declarations
            HtmlImage uIDeleteImage = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UITbl_gridCustomAttachRow1.UIDeleteImage;
            BrowserWindow uICustomAttachmentTypeWindow = this.UICustomAttachmentTypeWindow;
            #endregion

            // Click 'Delete' image
            Mouse.Click(uIDeleteImage, new Point(3, 9));

            // Click 'Ok' button in the browser dialog window
            uICustomAttachmentTypeWindow.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// EditCustomAttachmentType - Use 'EditCustomAttachmentTypeParams' to pass parameters into this method.
        /// </summary>
        public void EditCustomAttachmentType()
        {
            #region Variable Declarations
            HtmlImage uIEditImage = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UITbl_gridCustomAttachRow.UIEditImage;
            HtmlEdit uIFileExtensionEdit2 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UIFileExtensionEdit2;
            HtmlEdit uIMimeHeaderEdit2 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UIMimeHeaderEdit2;
            HtmlTextArea uIDescriptionEdit1 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UIDescriptionEdit1;
            HtmlImage uISharedimagesbuttonsbImage1 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UISharedimagesbuttonsbImage1;
            #endregion

            // Click 'Edit' image
            Mouse.Click(uIEditImage, new Point(2, 12));

            // Type 'customEDITED' in 'File Extension' text box
            uIFileExtensionEdit2.Text = this.EditCustomAttachmentTypeParams.UIFileExtensionEdit2Text;

            // Type 'custommimeEDITED' in 'Mime Header' text box
            uIMimeHeaderEdit2.Text = this.EditCustomAttachmentTypeParams.UIMimeHeaderEdit2Text;

            // Type 'Automatically generated attachment type - EDITED' in 'Description' text box
            uIDescriptionEdit1.Text = this.EditCustomAttachmentTypeParams.UIDescriptionEdit1Text;

            // Click '/shared/images/buttons/btn_save.png' image
            Mouse.Click(uISharedimagesbuttonsbImage1, new Point(18, 3));
        }
        
        /// <summary>
        /// PressOKInPNGMandatoryForMobileDevicesModal
        /// </summary>
        public void PressOKInPNGMandatoryForMobileDevicesModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument2.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(30, 10));
        }
        
        /// <summary>
        /// UnArchiveAttachmentType
        /// </summary>
        public void UnArchiveAttachmentType()
        {
            #region Variable Declarations
            HtmlImage uIUnArchiveImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UITbl_gridAttachmentTyCell.UIUnArchiveImage;
            BrowserWindow uIAttachmentTypesWindoWindow = this.UIAttachmentTypesWindoWindow;
            #endregion

            // Click image
            Mouse.Click(uIUnArchiveImage, new Point(7, 8));

            // Click 'Ok' button in the browser dialog window
            uIAttachmentTypesWindoWindow.PerformDialogAction(BrowserDialogAction.Ok);
        }
        
        /// <summary>
        /// ValidateAddAttachmentType - Use 'ValidateAddAttachmentTypeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAddAttachmentType()
        {
            #region Variable Declarations
            HtmlCell uIMPGCell = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UITbl_gridAttachmentTyTable.UIMPGCell;
            #endregion

            // Verify that the 'InnerText' property of cell equals 'MPG'
            Assert.AreEqual(this.ValidateAddAttachmentTypeExpectedValues.UIMPGCellInnerText, uIMPGCell.InnerText);
        }
        
        /// <summary>
        /// ValidateAddAttachmentTypeUsingCustomDefinition - Use 'ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAddAttachmentTypeUsingCustomDefinition()
        {
            #region Variable Declarations
            HtmlCell uI__CustomCell = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument1.UITbl_gridAttachmentTyTable.UI__CustomCell;
            HtmlCell uI__AutomaticallygenerCell = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument1.UITbl_gridAttachmentTyTable.UI__AutomaticallygenerCell;
            #endregion

            // Verify that the 'InnerText' property of '__Custom' cell equals '__Custom'
            Assert.AreEqual(this.ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues.UI__CustomCellInnerText, uI__CustomCell.InnerText);

            // Verify that the 'InnerText' property of '__Automatically generated attachment typ' cell equals '__Automatically generated attachment type - do not edit'
            Assert.AreEqual(this.ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues.UI__AutomaticallygenerCellInnerText, uI__AutomaticallygenerCell.InnerText);
        }
        
        /// <summary>
        /// ValidateAddCustomAttachmentType - Use 'ValidateAddCustomAttachmentTypeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAddCustomAttachmentType()
        {
            #region Variable Declarations
            HtmlRow uITbl_gridCustomAttachRow = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UITbl_gridCustomAttachRow;
            #endregion

            // Verify that the 'InnerText' property of 'tbl_gridCustomAttachmentTypes_0171e4f4-cc6d-43f2-8...' row equals 'customAutomatically generated attachment type - do not editcustommime'
            Assert.AreEqual(this.ValidateAddCustomAttachmentTypeExpectedValues.UITbl_gridCustomAttachRowInnerText, uITbl_gridCustomAttachRow.InnerText);
        }
        
        /// <summary>
        /// ValidateAttachmentTypeDoesNotExist - Use 'ValidateAttachmentTypeDoesNotExistExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAttachmentTypeDoesNotExist()
        {
            #region Variable Declarations
            HtmlCell uIMPGCell = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UITbl_gridAttachmentTyTable.UIMPGCell;
            #endregion

            // Verify that the 'InnerText' property of cell is not equal to 'MPG'
            Assert.AreNotEqual(this.ValidateAttachmentTypeDoesNotExistExpectedValues.UIMPGCellInnerText, uIMPGCell.InnerText);
        }
        
        /// <summary>
        /// ValidateAttachmentTypeIsArchived - Use 'ValidateAttachmentTypeIsArchivedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAttachmentTypeIsArchived()
        {
            #region Variable Declarations
            HtmlImage uIUnArchiveImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UITbl_gridAttachmentTyCell.UIUnArchiveImage;
            #endregion

            // Verify that the 'Title' property of image equals 'Un-Archive'
            Assert.AreEqual(this.ValidateAttachmentTypeIsArchivedExpectedValues.UIUnArchiveImageTitle, uIUnArchiveImage.Title);
        }
        
        /// <summary>
        /// ValidateAttachmentTypeIsNotArchived - Use 'ValidateAttachmentTypeIsNotArchivedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateAttachmentTypeIsNotArchived()
        {
            #region Variable Declarations
            HtmlImage uIArchiveImage = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument.UITbl_gridAttachmentTyCell.UIArchiveImage;
            #endregion

            // Verify that the 'Title' property of image equals 'Archive'
            Assert.AreEqual(this.ValidateAttachmentTypeIsNotArchivedExpectedValues.UIArchiveImageTitle, uIArchiveImage.Title);
        }
        
        /// <summary>
        /// ValidateCustomAttachmentTypeDoesNotExist - Use 'ValidateCustomAttachmentTypeDoesNotExistExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateCustomAttachmentTypeDoesNotExist()
        {
            #region Variable Declarations
            HtmlCell uICustomCell = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UITbl_gridCustomAttachTable.UICustomCell;
            #endregion

            // Verify that the 'InnerText' property of 'custom' cell is not equal to 'custom'
            Assert.AreNotEqual(this.ValidateCustomAttachmentTypeDoesNotExistExpectedValues.UICustomCellInnerText, uICustomCell.InnerText);
        }
        
        /// <summary>
        /// ValidateEditCustomAttachmentType - Use 'ValidateEditCustomAttachmentTypeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateEditCustomAttachmentType()
        {
            #region Variable Declarations
            HtmlRow uITbl_gridCustomAttachRow1 = this.UICustomAttachmentTypeWindow.UICustomAttachmentTypeDocument.UITbl_gridCustomAttachRow1;
            #endregion

            // Verify that the 'InnerText' property of 'tbl_gridCustomAttachmentTypes_0171e4f4-cc6d-43f2-8...' row equals 'customEDITEDAutomatically generated attachment type - EDITEDcustommimeEDITED'
            Assert.AreEqual(this.ValidateEditCustomAttachmentTypeExpectedValues.UITbl_gridCustomAttachRow1InnerText, uITbl_gridCustomAttachRow1.InnerText);
        }
        
        /// <summary>
        /// ValidatePNGMandatoryForMobileDevicesModal - Use 'ValidatePNGMandatoryForMobileDevicesModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidatePNGMandatoryForMobileDevicesModal()
        {
            #region Variable Declarations
            HtmlDiv uICtl00_pnlMasterPopupPane = this.UIAttachmentTypesWindoWindow.UIAttachmentTypesDocument2.UICtl00_pnlMasterPopupPane;
            #endregion

            // Verify that the 'InnerText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
            //
            //
            //This attachment type is currently a mandatory requirement for use with mobile devices. It cannot be deleted while mobile device receipt attachments are in use.'
            Assert.AreEqual(this.ValidatePNGMandatoryForMobileDevicesModalExpectedValues.UICtl00_pnlMasterPopupPaneInnerText, uICtl00_pnlMasterPopupPane.InnerText);
        }
        
        #region Properties
        public virtual AddAttachmentTypeParams AddAttachmentTypeParams
        {
            get
            {
                if ((this.mAddAttachmentTypeParams == null))
                {
                    this.mAddAttachmentTypeParams = new AddAttachmentTypeParams();
                }
                return this.mAddAttachmentTypeParams;
            }
        }
        
        public virtual AddAttachmentTypeUsingCustomDefinitionParams AddAttachmentTypeUsingCustomDefinitionParams
        {
            get
            {
                if ((this.mAddAttachmentTypeUsingCustomDefinitionParams == null))
                {
                    this.mAddAttachmentTypeUsingCustomDefinitionParams = new AddAttachmentTypeUsingCustomDefinitionParams();
                }
                return this.mAddAttachmentTypeUsingCustomDefinitionParams;
            }
        }
        
        public virtual AddAttachmentTypeWithCancelParams AddAttachmentTypeWithCancelParams
        {
            get
            {
                if ((this.mAddAttachmentTypeWithCancelParams == null))
                {
                    this.mAddAttachmentTypeWithCancelParams = new AddAttachmentTypeWithCancelParams();
                }
                return this.mAddAttachmentTypeWithCancelParams;
            }
        }
        
        public virtual AddCustomAttachmentTypeParams AddCustomAttachmentTypeParams
        {
            get
            {
                if ((this.mAddCustomAttachmentTypeParams == null))
                {
                    this.mAddCustomAttachmentTypeParams = new AddCustomAttachmentTypeParams();
                }
                return this.mAddCustomAttachmentTypeParams;
            }
        }
        
        public virtual ClickEnableReceiptsParams ClickEnableReceiptsParams
        {
            get
            {
                if ((this.mClickEnableReceiptsParams == null))
                {
                    this.mClickEnableReceiptsParams = new ClickEnableReceiptsParams();
                }
                return this.mClickEnableReceiptsParams;
            }
        }
        
        public virtual CreateCustomAttachmentTypeParams CreateCustomAttachmentTypeParams
        {
            get
            {
                if ((this.mCreateCustomAttachmentTypeParams == null))
                {
                    this.mCreateCustomAttachmentTypeParams = new CreateCustomAttachmentTypeParams();
                }
                return this.mCreateCustomAttachmentTypeParams;
            }
        }
        
        public virtual EditCustomAttachmentTypeParams EditCustomAttachmentTypeParams
        {
            get
            {
                if ((this.mEditCustomAttachmentTypeParams == null))
                {
                    this.mEditCustomAttachmentTypeParams = new EditCustomAttachmentTypeParams();
                }
                return this.mEditCustomAttachmentTypeParams;
            }
        }
        
        public virtual ValidateAddAttachmentTypeExpectedValues ValidateAddAttachmentTypeExpectedValues
        {
            get
            {
                if ((this.mValidateAddAttachmentTypeExpectedValues == null))
                {
                    this.mValidateAddAttachmentTypeExpectedValues = new ValidateAddAttachmentTypeExpectedValues();
                }
                return this.mValidateAddAttachmentTypeExpectedValues;
            }
        }
        
        public virtual ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues
        {
            get
            {
                if ((this.mValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues == null))
                {
                    this.mValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues = new ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues();
                }
                return this.mValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues;
            }
        }
        
        public virtual ValidateAddCustomAttachmentTypeExpectedValues ValidateAddCustomAttachmentTypeExpectedValues
        {
            get
            {
                if ((this.mValidateAddCustomAttachmentTypeExpectedValues == null))
                {
                    this.mValidateAddCustomAttachmentTypeExpectedValues = new ValidateAddCustomAttachmentTypeExpectedValues();
                }
                return this.mValidateAddCustomAttachmentTypeExpectedValues;
            }
        }
        
        public virtual ValidateAttachmentTypeDoesNotExistExpectedValues ValidateAttachmentTypeDoesNotExistExpectedValues
        {
            get
            {
                if ((this.mValidateAttachmentTypeDoesNotExistExpectedValues == null))
                {
                    this.mValidateAttachmentTypeDoesNotExistExpectedValues = new ValidateAttachmentTypeDoesNotExistExpectedValues();
                }
                return this.mValidateAttachmentTypeDoesNotExistExpectedValues;
            }
        }
        
        public virtual ValidateAttachmentTypeIsArchivedExpectedValues ValidateAttachmentTypeIsArchivedExpectedValues
        {
            get
            {
                if ((this.mValidateAttachmentTypeIsArchivedExpectedValues == null))
                {
                    this.mValidateAttachmentTypeIsArchivedExpectedValues = new ValidateAttachmentTypeIsArchivedExpectedValues();
                }
                return this.mValidateAttachmentTypeIsArchivedExpectedValues;
            }
        }
        
        public virtual ValidateAttachmentTypeIsNotArchivedExpectedValues ValidateAttachmentTypeIsNotArchivedExpectedValues
        {
            get
            {
                if ((this.mValidateAttachmentTypeIsNotArchivedExpectedValues == null))
                {
                    this.mValidateAttachmentTypeIsNotArchivedExpectedValues = new ValidateAttachmentTypeIsNotArchivedExpectedValues();
                }
                return this.mValidateAttachmentTypeIsNotArchivedExpectedValues;
            }
        }
        
        public virtual ValidateCustomAttachmentTypeDoesNotExistExpectedValues ValidateCustomAttachmentTypeDoesNotExistExpectedValues
        {
            get
            {
                if ((this.mValidateCustomAttachmentTypeDoesNotExistExpectedValues == null))
                {
                    this.mValidateCustomAttachmentTypeDoesNotExistExpectedValues = new ValidateCustomAttachmentTypeDoesNotExistExpectedValues();
                }
                return this.mValidateCustomAttachmentTypeDoesNotExistExpectedValues;
            }
        }
        
        public virtual ValidateEditCustomAttachmentTypeExpectedValues ValidateEditCustomAttachmentTypeExpectedValues
        {
            get
            {
                if ((this.mValidateEditCustomAttachmentTypeExpectedValues == null))
                {
                    this.mValidateEditCustomAttachmentTypeExpectedValues = new ValidateEditCustomAttachmentTypeExpectedValues();
                }
                return this.mValidateEditCustomAttachmentTypeExpectedValues;
            }
        }
        
        public virtual ValidatePNGMandatoryForMobileDevicesModalExpectedValues ValidatePNGMandatoryForMobileDevicesModalExpectedValues
        {
            get
            {
                if ((this.mValidatePNGMandatoryForMobileDevicesModalExpectedValues == null))
                {
                    this.mValidatePNGMandatoryForMobileDevicesModalExpectedValues = new ValidatePNGMandatoryForMobileDevicesModalExpectedValues();
                }
                return this.mValidatePNGMandatoryForMobileDevicesModalExpectedValues;
            }
        }
        
        public UIAttachmentTypesWindoWindow UIAttachmentTypesWindoWindow
        {
            get
            {
                if ((this.mUIAttachmentTypesWindoWindow == null))
                {
                    this.mUIAttachmentTypesWindoWindow = new UIAttachmentTypesWindoWindow();
                }
                return this.mUIAttachmentTypesWindoWindow;
            }
        }
        
        public UICustomAttachmentTypeWindow UICustomAttachmentTypeWindow
        {
            get
            {
                if ((this.mUICustomAttachmentTypeWindow == null))
                {
                    this.mUICustomAttachmentTypeWindow = new UICustomAttachmentTypeWindow();
                }
                return this.mUICustomAttachmentTypeWindow;
            }
        }
        
        public UIGeneralOptionsWindowWindow UIGeneralOptionsWindowWindow
        {
            get
            {
                if ((this.mUIGeneralOptionsWindowWindow == null))
                {
                    this.mUIGeneralOptionsWindowWindow = new UIGeneralOptionsWindowWindow();
                }
                return this.mUIGeneralOptionsWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddAttachmentTypeParams mAddAttachmentTypeParams;
        
        private AddAttachmentTypeUsingCustomDefinitionParams mAddAttachmentTypeUsingCustomDefinitionParams;
        
        private AddAttachmentTypeWithCancelParams mAddAttachmentTypeWithCancelParams;
        
        private AddCustomAttachmentTypeParams mAddCustomAttachmentTypeParams;
        
        private ClickEnableReceiptsParams mClickEnableReceiptsParams;
        
        private CreateCustomAttachmentTypeParams mCreateCustomAttachmentTypeParams;
        
        private EditCustomAttachmentTypeParams mEditCustomAttachmentTypeParams;
        
        private ValidateAddAttachmentTypeExpectedValues mValidateAddAttachmentTypeExpectedValues;
        
        private ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues mValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues;
        
        private ValidateAddCustomAttachmentTypeExpectedValues mValidateAddCustomAttachmentTypeExpectedValues;
        
        private ValidateAttachmentTypeDoesNotExistExpectedValues mValidateAttachmentTypeDoesNotExistExpectedValues;
        
        private ValidateAttachmentTypeIsArchivedExpectedValues mValidateAttachmentTypeIsArchivedExpectedValues;
        
        private ValidateAttachmentTypeIsNotArchivedExpectedValues mValidateAttachmentTypeIsNotArchivedExpectedValues;
        
        private ValidateCustomAttachmentTypeDoesNotExistExpectedValues mValidateCustomAttachmentTypeDoesNotExistExpectedValues;
        
        private ValidateEditCustomAttachmentTypeExpectedValues mValidateEditCustomAttachmentTypeExpectedValues;
        
        private ValidatePNGMandatoryForMobileDevicesModalExpectedValues mValidatePNGMandatoryForMobileDevicesModalExpectedValues;
        
        private UIAttachmentTypesWindoWindow mUIAttachmentTypesWindoWindow;
        
        private UICustomAttachmentTypeWindow mUICustomAttachmentTypeWindow;
        
        private UIGeneralOptionsWindowWindow mUIGeneralOptionsWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddAttachmentType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class AddAttachmentTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'MPG' in combo box
        /// </summary>
        public string UIAttachmentFileTypeComboBoxSelectedItem = "MPG";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddAttachmentTypeUsingCustomDefinition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class AddAttachmentTypeUsingCustomDefinitionParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'custom - Automatically generated attachment type - do not edit' in combo box
        /// </summary>
        public string UIAttachmentFileTypeComboBox1SelectedItem = "custom - Automatically generated attachment type - do not edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddAttachmentTypeWithCancel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class AddAttachmentTypeWithCancelParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'MP3' in combo box
        /// </summary>
        public string UIAttachmentFileTypeComboBoxSelectedItem = "MP3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddCustomAttachmentType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class AddCustomAttachmentTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'custom' in 'File Extension' text box
        /// </summary>
        public string UIFileExtensionEdit1Text = "custom";
        
        /// <summary>
        /// Type 'custommime' in 'Mime Header' text box
        /// </summary>
        public string UIMimeHeaderEdit1Text = "custommime";
        
        /// <summary>
        /// Type 'Automatically generated attachment type - do not edit' in 'Description' text box
        /// </summary>
        public string UIDescriptionEdit1Text = "Automatically generated attachment type - do not edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickEnableReceipts'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ClickEnableReceiptsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Receipts can be uploaded to expense items' check box
        /// </summary>
        public bool UIReceiptscanbeuploadeCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateCustomAttachmentType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class CreateCustomAttachmentTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'custom' in 'File Extension' text box
        /// </summary>
        public string UIFileExtensionEditText = "custom";
        
        /// <summary>
        /// Type 'custommime' in 'Mime Header' text box
        /// </summary>
        public string UIMimeHeaderEditText = "custommime";
        
        /// <summary>
        /// Type '__Automatically generated attachment type - do not edit' in 'Description' text box
        /// </summary>
        public string UIDescriptionEditText = "__Automatically generated attachment type - do not edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditCustomAttachmentType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class EditCustomAttachmentTypeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'customEDITED' in 'File Extension' text box
        /// </summary>
        public string UIFileExtensionEdit2Text = "customEDITED";
        
        /// <summary>
        /// Type 'custommimeEDITED' in 'Mime Header' text box
        /// </summary>
        public string UIMimeHeaderEdit2Text = "custommimeEDITED";
        
        /// <summary>
        /// Type 'Automatically generated attachment type - EDITED' in 'Description' text box
        /// </summary>
        public string UIDescriptionEdit1Text = "Automatically generated attachment type - EDITED";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAddAttachmentType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateAddAttachmentTypeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of cell equals 'MPG'
        /// </summary>
        public string UIMPGCellInnerText = "MPG";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAddAttachmentTypeUsingCustomDefinition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateAddAttachmentTypeUsingCustomDefinitionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of '__Custom' cell equals '__Custom'
        /// </summary>
        public string UI__CustomCellInnerText = "__Custom";
        
        /// <summary>
        /// Verify that the 'InnerText' property of '__Automatically generated attachment typ' cell equals '__Automatically generated attachment type - do not edit'
        /// </summary>
        public string UI__AutomaticallygenerCellInnerText = "__Automatically generated attachment type - do not edit";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAddCustomAttachmentType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateAddCustomAttachmentTypeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'tbl_gridCustomAttachmentTypes_0171e4f4-cc6d-43f2-8...' row equals 'customAutomatically generated attachment type - do not editcustommime'
        /// </summary>
        public string UITbl_gridCustomAttachRowInnerText = "customAutomatically generated attachment type - do not editcustommime";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAttachmentTypeDoesNotExist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateAttachmentTypeDoesNotExistExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of cell is not equal to 'MPG'
        /// </summary>
        public string UIMPGCellInnerText = "MPG";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAttachmentTypeIsArchived'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateAttachmentTypeIsArchivedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Title' property of image equals 'Un-Archive'
        /// </summary>
        public string UIUnArchiveImageTitle = "Un-Archive";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateAttachmentTypeIsNotArchived'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateAttachmentTypeIsNotArchivedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Title' property of image equals 'Archive'
        /// </summary>
        public string UIArchiveImageTitle = "Archive";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateCustomAttachmentTypeDoesNotExist'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateCustomAttachmentTypeDoesNotExistExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'custom' cell is not equal to 'custom'
        /// </summary>
        public string UICustomCellInnerText = "custom";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateEditCustomAttachmentType'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateEditCustomAttachmentTypeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'tbl_gridCustomAttachmentTypes_0171e4f4-cc6d-43f2-8...' row equals 'customEDITEDAutomatically generated attachment type - EDITEDcustommimeEDITED'
        /// </summary>
        public string UITbl_gridCustomAttachRow1InnerText = "customEDITEDAutomatically generated attachment type - EDITEDcustommimeEDITED";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidatePNGMandatoryForMobileDevicesModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidatePNGMandatoryForMobileDevicesModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///This attachment type is currently a mandatory requirement for use with mobile devices. It cannot be deleted while mobile device receipt attachments are in use.'
        /// </summary>
        public string UICtl00_pnlMasterPopupPaneInnerText = "Message from Expenses\r\n\r\n\r\nThis attachment type is currently a mandatory requirem" +
            "ent for use with mobile devices. It cannot be deleted while mobile device receip" +
            "t attachments are in use.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIAttachmentTypesWindoWindow : BrowserWindow
    {
        
        public UIAttachmentTypesWindoWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Attachment Types";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIAttachmentTypesDocument UIAttachmentTypesDocument
        {
            get
            {
                if ((this.mUIAttachmentTypesDocument == null))
                {
                    this.mUIAttachmentTypesDocument = new UIAttachmentTypesDocument(this);
                }
                return this.mUIAttachmentTypesDocument;
            }
        }
        
        public UIAttachmentTypesDocument1 UIAttachmentTypesDocument1
        {
            get
            {
                if ((this.mUIAttachmentTypesDocument1 == null))
                {
                    this.mUIAttachmentTypesDocument1 = new UIAttachmentTypesDocument1(this);
                }
                return this.mUIAttachmentTypesDocument1;
            }
        }
        
        public UIAttachmentTypesDocument2 UIAttachmentTypesDocument2
        {
            get
            {
                if ((this.mUIAttachmentTypesDocument2 == null))
                {
                    this.mUIAttachmentTypesDocument2 = new UIAttachmentTypesDocument2(this);
                }
                return this.mUIAttachmentTypesDocument2;
            }
        }
        #endregion
        
        #region Fields
        private UIAttachmentTypesDocument mUIAttachmentTypesDocument;
        
        private UIAttachmentTypesDocument1 mUIAttachmentTypesDocument1;
        
        private UIAttachmentTypesDocument2 mUIAttachmentTypesDocument2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIAttachmentTypesDocument : HtmlDocument
    {
        
        public UIAttachmentTypesDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Attachment Types";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/AttachmentTypes.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/AttachmentTypes.aspx", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAddAttachmentTypeHyperlink
        {
            get
            {
                if ((this.mUIAddAttachmentTypeHyperlink == null))
                {
                    this.mUIAddAttachmentTypeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddAttachmentTypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "ctl00_contentmenu_lnkAddAttachmentType";
                    this.mUIAddAttachmentTypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddAttachmentTypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddAttachmentTypeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add Attachment Type";
                    this.mUIAddAttachmentTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.Common.ShowModal(modAttachmentTypesID);%20SEL.AttachmentTypes.GetAttachmentTy" +
                        "peData();";
                    this.mUIAddAttachmentTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddAttachmentTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.Common.ShowModal(modAttachmentTypesID); SEL.AttachmentTypes.GetAtt" +
                        "achmentTypeData();";
                    this.mUIAddAttachmentTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "submenuitem";
                    this.mUIAddAttachmentTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=ctl00_contentmenu_lnkAddAttachmentTyp";
                    this.mUIAddAttachmentTypeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIAddAttachmentTypeHyperlink;
            }
        }
        
        public HtmlComboBox UIAttachmentFileTypeComboBox
        {
            get
            {
                if ((this.mUIAttachmentFileTypeComboBox == null))
                {
                    this.mUIAttachmentFileTypeComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIAttachmentFileTypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbAttachmentType";
                    this.mUIAttachmentFileTypeComboBox.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbAttachmentType";
                    this.mUIAttachmentFileTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIAttachmentFileTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Attachment File Type";
                    this.mUIAttachmentFileTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIAttachmentFileTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "59";
                    this.mUIAttachmentFileTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.Class] = "fillspan";
                    this.mUIAttachmentFileTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbAttachmentType c";
                    this.mUIAttachmentFileTypeComboBox.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIAttachmentFileTypeComboBox;
            }
        }
        
        public HtmlInputButton UICtl00contentmaincmdCButton
        {
            get
            {
                if ((this.mUICtl00contentmaincmdCButton == null))
                {
                    this.mUICtl00contentmaincmdCButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICtl00contentmaincmdCButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_cmdCancelAttachmentType";
                    this.mUICtl00contentmaincmdCButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$cmdCancelAttachmentType";
                    this.mUICtl00contentmaincmdCButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "";
                    this.mUICtl00contentmaincmdCButton.FilterProperties[HtmlButton.PropertyNames.Type] = "image";
                    this.mUICtl00contentmaincmdCButton.FilterProperties.Add(new PropertyExpression("Src", ".sel-expenses.com/shared/images/buttons/cancel_up.gif", PropertyExpressionOperator.Contains));
                    this.mUICtl00contentmaincmdCButton.FilterProperties[HtmlButton.PropertyNames.Title] = "";
                    this.mUICtl00contentmaincmdCButton.FilterProperties[HtmlButton.PropertyNames.Class] = "";
                    this.mUICtl00contentmaincmdCButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUICtl00contentmaincmdCButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "5";
                    #endregion
                }
                return this.mUICtl00contentmaincmdCButton;
            }
        }
        
        public HtmlImage UISharedimagesbuttonsbImage
        {
            get
            {
                if ((this.mUISharedimagesbuttonsbImage == null))
                {
                    this.mUISharedimagesbuttonsbImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Id] = "ctl00_contentmain_cmdSaveAttachmentType";
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_save.png";
                    this.mUISharedimagesbuttonsbImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, ".sel-expenses.com/shared/images/buttons/btn_save.png", PropertyExpressionOperator.Contains));
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "8";
                    #endregion
                }
                return this.mUISharedimagesbuttonsbImage;
            }
        }
        
        public UITbl_gridAttachmentTyTable UITbl_gridAttachmentTyTable
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyTable == null))
                {
                    this.mUITbl_gridAttachmentTyTable = new UITbl_gridAttachmentTyTable(this);
                }
                return this.mUITbl_gridAttachmentTyTable;
            }
        }
        
        public UITbl_gridAttachmentTyCell UITbl_gridAttachmentTyCell
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyCell == null))
                {
                    this.mUITbl_gridAttachmentTyCell = new UITbl_gridAttachmentTyCell(this);
                }
                return this.mUITbl_gridAttachmentTyCell;
            }
        }
        
        public UITbl_gridAttachmentTyRow UITbl_gridAttachmentTyRow
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyRow == null))
                {
                    this.mUITbl_gridAttachmentTyRow = new UITbl_gridAttachmentTyRow(this);
                }
                return this.mUITbl_gridAttachmentTyRow;
            }
        }
        
        public HtmlComboBox UIAttachmentFileTypeComboBox1
        {
            get
            {
                if ((this.mUIAttachmentFileTypeComboBox1 == null))
                {
                    this.mUIAttachmentFileTypeComboBox1 = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUIAttachmentFileTypeComboBox1.SearchProperties[HtmlComboBox.PropertyNames.Id] = "ctl00_contentmain_cmbAttachmentType";
                    this.mUIAttachmentFileTypeComboBox1.SearchProperties[HtmlComboBox.PropertyNames.Name] = "ctl00$contentmain$cmbAttachmentType";
                    this.mUIAttachmentFileTypeComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Size] = "0";
                    this.mUIAttachmentFileTypeComboBox1.FilterProperties[HtmlComboBox.PropertyNames.LabeledBy] = "Attachment File Type";
                    this.mUIAttachmentFileTypeComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Title] = null;
                    this.mUIAttachmentFileTypeComboBox1.FilterProperties[HtmlComboBox.PropertyNames.ItemCount] = "58";
                    this.mUIAttachmentFileTypeComboBox1.FilterProperties[HtmlComboBox.PropertyNames.Class] = "fillspan";
                    this.mUIAttachmentFileTypeComboBox1.FilterProperties[HtmlComboBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_cmbAttachmentType c";
                    this.mUIAttachmentFileTypeComboBox1.FilterProperties[HtmlComboBox.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIAttachmentFileTypeComboBox1;
            }
        }
        
        public UITbl_gridAttachmentTyRow1 UITbl_gridAttachmentTyRow1
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyRow1 == null))
                {
                    this.mUITbl_gridAttachmentTyRow1 = new UITbl_gridAttachmentTyRow1(this);
                }
                return this.mUITbl_gridAttachmentTyRow1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAddAttachmentTypeHyperlink;
        
        private HtmlComboBox mUIAttachmentFileTypeComboBox;
        
        private HtmlInputButton mUICtl00contentmaincmdCButton;
        
        private HtmlImage mUISharedimagesbuttonsbImage;
        
        private UITbl_gridAttachmentTyTable mUITbl_gridAttachmentTyTable;
        
        private UITbl_gridAttachmentTyCell mUITbl_gridAttachmentTyCell;
        
        private UITbl_gridAttachmentTyRow mUITbl_gridAttachmentTyRow;
        
        private HtmlComboBox mUIAttachmentFileTypeComboBox1;
        
        private UITbl_gridAttachmentTyRow1 mUITbl_gridAttachmentTyRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyTable : HtmlTable
    {
        
        public UITbl_gridAttachmentTyTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_gridAttachmentTypes";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes class=cGrid";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "3";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "cGrid";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            #endregion
        }
        
        #region Properties
        public HtmlCell UIMPGCell
        {
            get
            {
                if ((this.mUIMPGCell == null))
                {
                    this.mUIMPGCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUIMPGCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUIMPGCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUIMPGCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUIMPGCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "MPG";
                    this.mUIMPGCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row1";
                    this.mUIMPGCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUIMPGCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "2";
                    this.mUIMPGCell.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
                    this.mUIMPGCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUIMPGCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUIMPGCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyCell : HtmlCell
    {
        
        public UITbl_gridAttachmentTyCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlCell.PropertyNames.Id] = "tbl_gridAttachmentTypes_4_archiveStatus";
            this.SearchProperties[HtmlCell.PropertyNames.Name] = null;
            this.FilterProperties[HtmlCell.PropertyNames.InnerText] = null;
            this.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes_4_archiveStat";
            this.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
            this.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
            this.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIArchiveImage
        {
            get
            {
                if ((this.mUIArchiveImage == null))
                {
                    this.mUIArchiveImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/folder_lock.png";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.Src] = ".sel-expenses.com/shared/images/icons/folder_lock.png";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.ChangeArchiveStatus(4);";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.ChangeArchiveStatus(4);";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "title=Archive src=\"http://fwtest.sel-exp";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIArchiveImage;
            }
        }
        
        public HtmlImage UIUnArchiveImage
        {
            get
            {
                if ((this.mUIUnArchiveImage == null))
                {
                    this.mUIUnArchiveImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/folder_into.png";
                    this.mUIUnArchiveImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, ".sel-expenses.com/shared/images/icons/folder_into.png", PropertyExpressionOperator.Contains));
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.ChangeArchiveStatus(4);";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.ChangeArchiveStatus(4);";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "title=Un-Archive src=\"http://fwtest.sel-";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIUnArchiveImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIArchiveImage;
        
        private HtmlImage mUIUnArchiveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyRow : HtmlRow
    {
        
        public UITbl_gridAttachmentTyRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridAttachmentTypes_4";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes_4";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = "";
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIDeleteImage
        {
            get
            {
                if ((this.mUIDeleteImage == null))
                {
                    this.mUIDeleteImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/delete2.png";
                    this.mUIDeleteImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, ".sel-expenses.com/shared/images/icons/delete2.png", PropertyExpressionOperator.Contains));
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.DeleteAttachmentType(4);";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.DeleteAttachmentType(4);";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Delete src=\"http://fwtest.sel-expens";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyRow1 : HtmlRow
    {
        
        public UITbl_gridAttachmentTyRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridAttachmentTypes_5";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "customAutomatically generated attachment";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes_5";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIDeleteImage
        {
            get
            {
                if ((this.mUIDeleteImage == null))
                {
                    this.mUIDeleteImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/delete2.png";
                    this.mUIDeleteImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, ".sel-expenses.com/shared/images/icons/delete2.png", PropertyExpressionOperator.Contains));
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.DeleteAttachmentType(5);";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.DeleteAttachmentType(5);";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Delete src=\"http://fwtest.sel-expens";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIAttachmentTypesDocument1 : HtmlDocument
    {
        
        public UIAttachmentTypesDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Attachment Types";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/AttachmentTypes.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "sel-expenses.com/shared/admin/AttachmentTypes.aspx", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UITbl_gridAttachmentTyTable1 UITbl_gridAttachmentTyTable
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyTable == null))
                {
                    this.mUITbl_gridAttachmentTyTable = new UITbl_gridAttachmentTyTable1(this);
                }
                return this.mUITbl_gridAttachmentTyTable;
            }
        }
        
        public UITbl_gridAttachmentTyRow2 UITbl_gridAttachmentTyRow
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyRow == null))
                {
                    this.mUITbl_gridAttachmentTyRow = new UITbl_gridAttachmentTyRow2(this);
                }
                return this.mUITbl_gridAttachmentTyRow;
            }
        }
        #endregion
        
        #region Fields
        private UITbl_gridAttachmentTyTable1 mUITbl_gridAttachmentTyTable;
        
        private UITbl_gridAttachmentTyRow2 mUITbl_gridAttachmentTyRow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyTable1 : HtmlTable
    {
        
        public UITbl_gridAttachmentTyTable1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_gridAttachmentTypes";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes class=cGrid";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "13";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "cGrid";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            #endregion
        }
        
        #region Properties
        public HtmlCell UI__CustomCell
        {
            get
            {
                if ((this.mUI__CustomCell == null))
                {
                    this.mUI__CustomCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUI__CustomCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUI__CustomCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUI__CustomCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUI__CustomCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "__Custom";
                    this.mUI__CustomCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row2";
                    this.mUI__CustomCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "12";
                    this.mUI__CustomCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "2";
                    this.mUI__CustomCell.FilterProperties[HtmlCell.PropertyNames.Class] = "row2";
                    this.mUI__CustomCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "47";
                    #endregion
                }
                return this.mUI__CustomCell;
            }
        }
        
        public HtmlCell UI__AutomaticallygenerCell
        {
            get
            {
                if ((this.mUI__AutomaticallygenerCell == null))
                {
                    this.mUI__AutomaticallygenerCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUI__AutomaticallygenerCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUI__AutomaticallygenerCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUI__AutomaticallygenerCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUI__AutomaticallygenerCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "__Automatically generated attachment typ";
                    this.mUI__AutomaticallygenerCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row2";
                    this.mUI__AutomaticallygenerCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "12";
                    this.mUI__AutomaticallygenerCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "3";
                    this.mUI__AutomaticallygenerCell.FilterProperties[HtmlCell.PropertyNames.Class] = "row2";
                    this.mUI__AutomaticallygenerCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "48";
                    #endregion
                }
                return this.mUI__AutomaticallygenerCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUI__CustomCell;
        
        private HtmlCell mUI__AutomaticallygenerCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyRow2 : HtmlRow
    {
        
        public UITbl_gridAttachmentTyRow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridAttachmentTypes_210";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "__Custom__Automatically generated attach";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes_210";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "11";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "12";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIDeleteImage
        {
            get
            {
                if ((this.mUIDeleteImage == null))
                {
                    this.mUIDeleteImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/delete2.png";
                    this.mUIDeleteImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, ".sel-expenses.com/shared/images/icons/delete2.png", PropertyExpressionOperator.Contains));
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.DeleteAttachmentType(210);";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.DeleteAttachmentType(210);";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Delete src=\"/shared/images/icons/del";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIAttachmentTypesDocument2 : HtmlDocument
    {
        
        public UIAttachmentTypesDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Attachment Types";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/AttachmentTypes.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/AttachmentTypes.aspx", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UICtl00_pnlMasterPopupPane
        {
            get
            {
                if ((this.mUICtl00_pnlMasterPopupPane == null))
                {
                    this.mUICtl00_pnlMasterPopupPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_pnlMasterPopup";
                    this.mUICtl00_pnlMasterPopupPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nThis attachme";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "errorModal";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 10004; POSITION: fixed; ";
                    this.mUICtl00_pnlMasterPopupPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "32";
                    #endregion
                }
                return this.mUICtl00_pnlMasterPopupPane;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/buttons/btn_close.png", PropertyExpressionOperator.Contains));
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "23";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        
        public UITbl_gridAttachmentTyCell1 UITbl_gridAttachmentTyCell
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyCell == null))
                {
                    this.mUITbl_gridAttachmentTyCell = new UITbl_gridAttachmentTyCell1(this);
                }
                return this.mUITbl_gridAttachmentTyCell;
            }
        }
        
        public UITbl_gridAttachmentTyCell11 UITbl_gridAttachmentTyCell1
        {
            get
            {
                if ((this.mUITbl_gridAttachmentTyCell1 == null))
                {
                    this.mUITbl_gridAttachmentTyCell1 = new UITbl_gridAttachmentTyCell11(this);
                }
                return this.mUITbl_gridAttachmentTyCell1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUICtl00_pnlMasterPopupPane;
        
        private HtmlImage mUIOKImage;
        
        private UITbl_gridAttachmentTyCell1 mUITbl_gridAttachmentTyCell;
        
        private UITbl_gridAttachmentTyCell11 mUITbl_gridAttachmentTyCell1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyCell1 : HtmlCell
    {
        
        public UITbl_gridAttachmentTyCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlCell.PropertyNames.Id] = "tbl_gridAttachmentTypes_42_archiveStatus";
            this.SearchProperties[HtmlCell.PropertyNames.Name] = null;
            this.FilterProperties[HtmlCell.PropertyNames.InnerText] = null;
            this.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes_42_archiveSta";
            this.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
            this.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
            this.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIArchiveImage
        {
            get
            {
                if ((this.mUIArchiveImage == null))
                {
                    this.mUIArchiveImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIArchiveImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/folder_lock.png";
                    this.mUIArchiveImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, ".sel-expenses.com/shared/images/icons/folder_lock.png", PropertyExpressionOperator.Contains));
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.ChangeArchiveStatus(42);";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.ChangeArchiveStatus(42);";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "title=Archive src=\"/shared/images/icons/";
                    this.mUIArchiveImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIArchiveImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIArchiveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridAttachmentTyCell11 : HtmlCell
    {
        
        public UITbl_gridAttachmentTyCell11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlCell.PropertyNames.Id] = "tbl_gridAttachmentTypes_48_archiveStatus";
            this.SearchProperties[HtmlCell.PropertyNames.Name] = null;
            this.FilterProperties[HtmlCell.PropertyNames.InnerText] = null;
            this.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "id=tbl_gridAttachmentTypes_48_archiveSta";
            this.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
            this.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
            this.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
            #endregion
        }
        
        #region Properties
        public HtmlImage UIUnArchiveImage
        {
            get
            {
                if ((this.mUIUnArchiveImage == null))
                {
                    this.mUIUnArchiveImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIUnArchiveImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/folder_into.png";
                    this.mUIUnArchiveImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, ".sel-expenses.com/shared/images/icons/folder_into.png", PropertyExpressionOperator.Contains));
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.ChangeArchiveStatus(48);";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.ChangeArchiveStatus(48);";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.Class] = "";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "title=Un-Archive src=\"https://chronos1.s";
                    this.mUIUnArchiveImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    #endregion
                }
                return this.mUIUnArchiveImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIUnArchiveImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICustomAttachmentTypeWindow : BrowserWindow
    {
        
        public UICustomAttachmentTypeWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Custom Attachment Types";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Custom Attachment Types");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UICustomAttachmentTypeDocument UICustomAttachmentTypeDocument
        {
            get
            {
                if ((this.mUICustomAttachmentTypeDocument == null))
                {
                    this.mUICustomAttachmentTypeDocument = new UICustomAttachmentTypeDocument(this);
                }
                return this.mUICustomAttachmentTypeDocument;
            }
        }
        
        public UICustomAttachmentTypeDocument1 UICustomAttachmentTypeDocument1
        {
            get
            {
                if ((this.mUICustomAttachmentTypeDocument1 == null))
                {
                    this.mUICustomAttachmentTypeDocument1 = new UICustomAttachmentTypeDocument1(this);
                }
                return this.mUICustomAttachmentTypeDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UICustomAttachmentTypeDocument mUICustomAttachmentTypeDocument;
        
        private UICustomAttachmentTypeDocument1 mUICustomAttachmentTypeDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICustomAttachmentTypeDocument : HtmlDocument
    {
        
        public UICustomAttachmentTypeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Custom Attachment Types";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/CustomAttachmentTypes.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://fwtest.sel-expenses.com/shared/admin/CustomAttachmentTypes.aspx";
            this.WindowTitles.Add("Custom Attachment Types");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAddCustomAttachmentHyperlink
        {
            get
            {
                if ((this.mUIAddCustomAttachmentHyperlink == null))
                {
                    this.mUIAddCustomAttachmentHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "ctl00_contentmenu_lnkAddCustAttachmentType";
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add Custom Attachment";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.AttachmentTypes.PopulateCustomAttachmentTypeData(null);";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.PopulateCustomAttachmentTypeData(null);";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "submenuitem";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=ctl00_contentmenu_lnkAddCustAttachmen";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIAddCustomAttachmentHyperlink.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIAddCustomAttachmentHyperlink;
            }
        }
        
        public HtmlEdit UIFileExtensionEdit
        {
            get
            {
                if ((this.mUIFileExtensionEdit == null))
                {
                    this.mUIFileExtensionEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFileExtensionEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtExtension";
                    this.mUIFileExtensionEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtExtension";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "File Extension";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtExtension tabInd";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIFileExtensionEdit.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIFileExtensionEdit;
            }
        }
        
        public HtmlEdit UIMimeHeaderEdit
        {
            get
            {
                if ((this.mUIMimeHeaderEdit == null))
                {
                    this.mUIMimeHeaderEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMimeHeaderEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtMimeHeader";
                    this.mUIMimeHeaderEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtMimeHeader";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Mime Header";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtMimeHeader tabIn";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIMimeHeaderEdit.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIMimeHeaderEdit;
            }
        }
        
        public HtmlTextArea UIDescriptionEdit
        {
            get
            {
                if ((this.mUIDescriptionEdit == null))
                {
                    this.mUIDescriptionEdit = new HtmlTextArea(this);
                    #region Search Criteria
                    this.mUIDescriptionEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtDescription";
                    this.mUIDescriptionEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtDescription";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Description";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtDescription tabI";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIDescriptionEdit.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIDescriptionEdit;
            }
        }
        
        public HtmlImage UISharedimagesbuttonsbImage
        {
            get
            {
                if ((this.mUISharedimagesbuttonsbImage == null))
                {
                    this.mUISharedimagesbuttonsbImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Id] = "ctl00_contentmain_cmdSaveCustAttachmentType";
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_save.png";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "10";
                    this.mUISharedimagesbuttonsbImage.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUISharedimagesbuttonsbImage;
            }
        }
        
        public HtmlEdit UIFileExtensionEdit1
        {
            get
            {
                if ((this.mUIFileExtensionEdit1 == null))
                {
                    this.mUIFileExtensionEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFileExtensionEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtExtension";
                    this.mUIFileExtensionEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtExtension";
                    this.mUIFileExtensionEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "File Extension";
                    this.mUIFileExtensionEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFileExtensionEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFileExtensionEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFileExtensionEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtExtension maxLen";
                    this.mUIFileExtensionEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIFileExtensionEdit1.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIFileExtensionEdit1;
            }
        }
        
        public HtmlEdit UIMimeHeaderEdit1
        {
            get
            {
                if ((this.mUIMimeHeaderEdit1 == null))
                {
                    this.mUIMimeHeaderEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMimeHeaderEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtMimeHeader";
                    this.mUIMimeHeaderEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtMimeHeader";
                    this.mUIMimeHeaderEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Mime Header";
                    this.mUIMimeHeaderEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMimeHeaderEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMimeHeaderEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMimeHeaderEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtMimeHeader maxLe";
                    this.mUIMimeHeaderEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIMimeHeaderEdit1.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIMimeHeaderEdit1;
            }
        }
        
        public HtmlTextArea UIDescriptionEdit1
        {
            get
            {
                if ((this.mUIDescriptionEdit1 == null))
                {
                    this.mUIDescriptionEdit1 = new HtmlTextArea(this);
                    #region Search Criteria
                    this.mUIDescriptionEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtDescription";
                    this.mUIDescriptionEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtDescription";
                    this.mUIDescriptionEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Description";
                    this.mUIDescriptionEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIDescriptionEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIDescriptionEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtDescription name";
                    this.mUIDescriptionEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIDescriptionEdit1.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIDescriptionEdit1;
            }
        }
        
        public HtmlImage UISharedimagesbuttonsbImage1
        {
            get
            {
                if ((this.mUISharedimagesbuttonsbImage1 == null))
                {
                    this.mUISharedimagesbuttonsbImage1 = new HtmlImage(this);
                    #region Search Criteria
                    this.mUISharedimagesbuttonsbImage1.SearchProperties[HtmlImage.PropertyNames.Id] = "ctl00_contentmain_cmdSaveCustAttachmentType";
                    this.mUISharedimagesbuttonsbImage1.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUISharedimagesbuttonsbImage1.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUISharedimagesbuttonsbImage1.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_save.png";
                    this.mUISharedimagesbuttonsbImage1.FilterProperties[HtmlImage.PropertyNames.Src] = "http://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUISharedimagesbuttonsbImage1.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUISharedimagesbuttonsbImage1.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUISharedimagesbuttonsbImage1.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "8";
                    this.mUISharedimagesbuttonsbImage1.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUISharedimagesbuttonsbImage1;
            }
        }
        
        public UITbl_gridCustomAttachRow UITbl_gridCustomAttachRow
        {
            get
            {
                if ((this.mUITbl_gridCustomAttachRow == null))
                {
                    this.mUITbl_gridCustomAttachRow = new UITbl_gridCustomAttachRow(this);
                }
                return this.mUITbl_gridCustomAttachRow;
            }
        }
        
        public UITbl_gridCustomAttachTable UITbl_gridCustomAttachTable
        {
            get
            {
                if ((this.mUITbl_gridCustomAttachTable == null))
                {
                    this.mUITbl_gridCustomAttachTable = new UITbl_gridCustomAttachTable(this);
                }
                return this.mUITbl_gridCustomAttachTable;
            }
        }
        
        public HtmlEdit UIFileExtensionEdit2
        {
            get
            {
                if ((this.mUIFileExtensionEdit2 == null))
                {
                    this.mUIFileExtensionEdit2 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFileExtensionEdit2.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtExtension";
                    this.mUIFileExtensionEdit2.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtExtension";
                    this.mUIFileExtensionEdit2.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "File Extension";
                    this.mUIFileExtensionEdit2.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFileExtensionEdit2.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFileExtensionEdit2.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFileExtensionEdit2.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtExtension value=";
                    this.mUIFileExtensionEdit2.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIFileExtensionEdit2.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIFileExtensionEdit2;
            }
        }
        
        public HtmlEdit UIMimeHeaderEdit2
        {
            get
            {
                if ((this.mUIMimeHeaderEdit2 == null))
                {
                    this.mUIMimeHeaderEdit2 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMimeHeaderEdit2.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtMimeHeader";
                    this.mUIMimeHeaderEdit2.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtMimeHeader";
                    this.mUIMimeHeaderEdit2.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Mime Header";
                    this.mUIMimeHeaderEdit2.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMimeHeaderEdit2.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMimeHeaderEdit2.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMimeHeaderEdit2.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtMimeHeader value";
                    this.mUIMimeHeaderEdit2.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIMimeHeaderEdit2.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIMimeHeaderEdit2;
            }
        }
        
        public UITbl_gridCustomAttachRow1 UITbl_gridCustomAttachRow1
        {
            get
            {
                if ((this.mUITbl_gridCustomAttachRow1 == null))
                {
                    this.mUITbl_gridCustomAttachRow1 = new UITbl_gridCustomAttachRow1(this);
                }
                return this.mUITbl_gridCustomAttachRow1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAddCustomAttachmentHyperlink;
        
        private HtmlEdit mUIFileExtensionEdit;
        
        private HtmlEdit mUIMimeHeaderEdit;
        
        private HtmlTextArea mUIDescriptionEdit;
        
        private HtmlImage mUISharedimagesbuttonsbImage;
        
        private HtmlEdit mUIFileExtensionEdit1;
        
        private HtmlEdit mUIMimeHeaderEdit1;
        
        private HtmlTextArea mUIDescriptionEdit1;
        
        private HtmlImage mUISharedimagesbuttonsbImage1;
        
        private UITbl_gridCustomAttachRow mUITbl_gridCustomAttachRow;
        
        private UITbl_gridCustomAttachTable mUITbl_gridCustomAttachTable;
        
        private HtmlEdit mUIFileExtensionEdit2;
        
        private HtmlEdit mUIMimeHeaderEdit2;
        
        private UITbl_gridCustomAttachRow1 mUITbl_gridCustomAttachRow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridCustomAttachRow : HtmlRow
    {
        
        public UITbl_gridCustomAttachRow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridCustomAttachmentTypes_0171e4f4-cc6d-43f2-8014-a97b8b17dd34";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "customAutomatically generated attachment";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridCustomAttachmentTypes_0171e4f";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Custom Attachment Types");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIEditImage
        {
            get
            {
                if ((this.mUIEditImage == null))
                {
                    this.mUIEditImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIEditImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Edit";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/edit.png";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://fwtest.sel-expenses.com/shared/images/icons/edit.png";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.GetCustomAttachmentTypeData(\'0171e4f4-cc6d-43f2-8014-a97b8b17" +
                        "dd34\');";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.GetCustomAttachmentTypeData(\'0171e4f4-cc6d-43f2-80" +
                        "14-a97b8b17dd34\');";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Edit src=\"http://fwtest.sel-expenses";
                    this.mUIEditImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "1";
                    this.mUIEditImage.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIEditImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIEditImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridCustomAttachTable : HtmlTable
    {
        
        public UITbl_gridCustomAttachTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_gridCustomAttachmentTypes";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "File Extension DescriptionMime Header\r\nc";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_gridCustomAttachmentTypes class=c";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "5";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "cGrid";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Custom Attachment Types");
            #endregion
        }
        
        #region Properties
        public HtmlCell UICustomCell
        {
            get
            {
                if ((this.mUICustomCell == null))
                {
                    this.mUICustomCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUICustomCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUICustomCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUICustomCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUICustomCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "custom";
                    this.mUICustomCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=row1";
                    this.mUICustomCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUICustomCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "2";
                    this.mUICustomCell.FilterProperties[HtmlCell.PropertyNames.Class] = "row1";
                    this.mUICustomCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "3";
                    this.mUICustomCell.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUICustomCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUICustomCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UITbl_gridCustomAttachRow1 : HtmlRow
    {
        
        public UITbl_gridCustomAttachRow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlRow.PropertyNames.Id] = "tbl_gridCustomAttachmentTypes_0171e4f4-cc6d-43f2-8014-a97b8b17dd34";
            this.SearchProperties[HtmlRow.PropertyNames.Name] = null;
            this.FilterProperties[HtmlRow.PropertyNames.InnerText] = "customEDITEDAutomatically generated atta";
            this.FilterProperties[HtmlRow.PropertyNames.ControlDefinition] = "id=tbl_gridCustomAttachmentTypes_0171e4f";
            this.FilterProperties[HtmlRow.PropertyNames.RowIndex] = "1";
            this.FilterProperties[HtmlRow.PropertyNames.Class] = null;
            this.FilterProperties[HtmlRow.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Custom Attachment Types");
            #endregion
        }
        
        #region Properties
        public HtmlImage UIDeleteImage
        {
            get
            {
                if ((this.mUIDeleteImage == null))
                {
                    this.mUIDeleteImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Id] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIDeleteImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "Delete";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/icons/delete2.png";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Src] = "http://fwtest.sel-expenses.com/shared/images/icons/delete2.png";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.LinkAbsolutePath] = "SEL.AttachmentTypes.DeleteCustomAttachmentType(\'0171e4f4-cc6d-43f2-8014-a97b8b17d" +
                        "d34\');";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.DeleteCustomAttachmentType(\'0171e4f4-cc6d-43f2-801" +
                        "4-a97b8b17dd34\');";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "alt=Delete src=\"http://fwtest.sel-expens";
                    this.mUIDeleteImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "2";
                    this.mUIDeleteImage.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIDeleteImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlImage mUIDeleteImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UICustomAttachmentTypeDocument1 : HtmlDocument
    {
        
        public UICustomAttachmentTypeDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Custom Attachment Types";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/CustomAttachmentTypes.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://fwtest.sel-expenses.com/shared/admin/CustomAttachmentTypes.aspx";
            this.WindowTitles.Add("Custom Attachment Types");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAddCustomAttachmentHyperlink
        {
            get
            {
                if ((this.mUIAddCustomAttachmentHyperlink == null))
                {
                    this.mUIAddCustomAttachmentHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "ctl00_contentmenu_lnkAddCustAttachmentType";
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddCustomAttachmentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add Custom Attachment";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "SEL.AttachmentTypes.PopulateCustomAttachmentTypeData(null);";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:SEL.AttachmentTypes.PopulateCustomAttachmentTypeData(null);";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "submenuitem";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=ctl00_contentmenu_lnkAddCustAttachmen";
                    this.mUIAddCustomAttachmentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIAddCustomAttachmentHyperlink.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIAddCustomAttachmentHyperlink;
            }
        }
        
        public HtmlEdit UIFileExtensionEdit
        {
            get
            {
                if ((this.mUIFileExtensionEdit == null))
                {
                    this.mUIFileExtensionEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIFileExtensionEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtExtension";
                    this.mUIFileExtensionEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtExtension";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "File Extension";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtExtension maxLen";
                    this.mUIFileExtensionEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIFileExtensionEdit.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIFileExtensionEdit;
            }
        }
        
        public HtmlEdit UIMimeHeaderEdit
        {
            get
            {
                if ((this.mUIMimeHeaderEdit == null))
                {
                    this.mUIMimeHeaderEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMimeHeaderEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtMimeHeader";
                    this.mUIMimeHeaderEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtMimeHeader";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Mime Header";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtMimeHeader maxLe";
                    this.mUIMimeHeaderEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIMimeHeaderEdit.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIMimeHeaderEdit;
            }
        }
        
        public HtmlTextArea UIDescriptionEdit
        {
            get
            {
                if ((this.mUIDescriptionEdit == null))
                {
                    this.mUIDescriptionEdit = new HtmlTextArea(this);
                    #region Search Criteria
                    this.mUIDescriptionEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ctl00_contentmain_txtDescription";
                    this.mUIDescriptionEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ctl00$contentmain$txtDescription";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Description";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_txtDescription name";
                    this.mUIDescriptionEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIDescriptionEdit.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUIDescriptionEdit;
            }
        }
        
        public HtmlImage UISharedimagesbuttonsbImage
        {
            get
            {
                if ((this.mUISharedimagesbuttonsbImage == null))
                {
                    this.mUISharedimagesbuttonsbImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Id] = "ctl00_contentmain_cmdSaveCustAttachmentType";
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUISharedimagesbuttonsbImage.SearchProperties[HtmlImage.PropertyNames.Alt] = null;
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_save.png";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.Src] = "https://fwtest.sel-expenses.com/shared/images/buttons/btn_save.png";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"BORDER-RIGHT-WIDTH: 0px; BORDER-T";
                    this.mUISharedimagesbuttonsbImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "12";
                    this.mUISharedimagesbuttonsbImage.WindowTitles.Add("Custom Attachment Types");
                    #endregion
                }
                return this.mUISharedimagesbuttonsbImage;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAddCustomAttachmentHyperlink;
        
        private HtmlEdit mUIFileExtensionEdit;
        
        private HtmlEdit mUIMimeHeaderEdit;
        
        private HtmlTextArea mUIDescriptionEdit;
        
        private HtmlImage mUISharedimagesbuttonsbImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGeneralOptionsWindowWindow : BrowserWindow
    {
        
        public UIGeneralOptionsWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "General Options";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGeneralOptionsDocument UIGeneralOptionsDocument
        {
            get
            {
                if ((this.mUIGeneralOptionsDocument == null))
                {
                    this.mUIGeneralOptionsDocument = new UIGeneralOptionsDocument(this);
                }
                return this.mUIGeneralOptionsDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGeneralOptionsDocument mUIGeneralOptionsDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGeneralOptionsDocument : HtmlDocument
    {
        
        public UIGeneralOptionsDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "General Options";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/accountOptions.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/accountOptions.aspx", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlCheckBox UIReceiptscanbeuploadeCheckBox
        {
            get
            {
                if ((this.mUIReceiptscanbeuploadeCheckBox == null))
                {
                    this.mUIReceiptscanbeuploadeCheckBox = new HtmlCheckBox(this);
                    #region Search Criteria
                    this.mUIReceiptscanbeuploadeCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Id] = "ctl00_contentmain_tabsNewExpenses_tabother_chkattach";
                    this.mUIReceiptscanbeuploadeCheckBox.SearchProperties[HtmlCheckBox.PropertyNames.Name] = "ctl00$contentmain$tabsNewExpenses$tabother$chkattach";
                    this.mUIReceiptscanbeuploadeCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Value] = "on";
                    this.mUIReceiptscanbeuploadeCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.LabeledBy] = "Receipts can be uploaded to expense items";
                    this.mUIReceiptscanbeuploadeCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Title] = null;
                    this.mUIReceiptscanbeuploadeCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.Class] = null;
                    this.mUIReceiptscanbeuploadeCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_tabsNewExpenses_tab";
                    this.mUIReceiptscanbeuploadeCheckBox.FilterProperties[HtmlCheckBox.PropertyNames.TagInstance] = "207";
                    #endregion
                }
                return this.mUIReceiptscanbeuploadeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCheckBox mUIReceiptscanbeuploadeCheckBox;
        #endregion
    }
}
