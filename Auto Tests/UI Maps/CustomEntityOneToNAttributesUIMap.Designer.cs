// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Auto_Tests.UIMaps.CustomEntityOneToNAttributesUIMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public partial class CustomEntityOneToNAttributesUIMap
    {
        
        /// <summary>
        /// ClickNewOneToNRelationship
        /// </summary>
        public void ClickNewOneToNRelationship()
        {
            #region Variable Declarations
            HtmlHyperlink uINew1nRelationshipHyperlink = this.UINewGreenLightWindowsWindow.UINewGreenLightDocument.UIPgOptAttributesPane.UINew1nRelationshipHyperlink;
            #endregion

            // Click 'New 1:n Relationship' link
            Mouse.Click(uINew1nRelationshipHyperlink, new Point(29, 8));
        }
        
        /// <summary>
        /// PressCancelSaveOneToNModal
        /// </summary>
        public void PressCancelSaveOneToNModal()
        {
            #region Variable Declarations
            HtmlInputButton uICancelButton = this.UIGreenLightCustomEntiWindow.UIGreenLightCustomEntiDocument.UICancelButton;
            #endregion

            // Click 'cancel' button
            Mouse.Click(uICancelButton, new Point(24, 13));
        }
        
        /// <summary>
        /// PressCloseOneToNValidationModal
        /// </summary>
        public void PressCloseOneToNValidationModal()
        {
            #region Variable Declarations
            HtmlImage uIOKImage = this.UIGreenLightCustomEntiWindow.UIGreenLightCustomEntiDocument.UIOKImage;
            #endregion

            // Click 'OK' image
            Mouse.Click(uIOKImage, new Point(10, 7));
        }
        
        /// <summary>
        /// PressSaveOneToNModal
        /// </summary>
        public void PressSaveOneToNModal()
        {
            #region Variable Declarations
            HtmlInputButton uISaveButton = this.UIGreenLightCustomEntiWindow.UIGreenLightCustomEntiDocument.UISaveButton;
            #endregion

            // Click 'save' button
            Mouse.Click(uISaveButton, new Point(8, 17));
        }
        
        /// <summary>
        /// ValidateDescriptionLabel - Use 'ValidateDescriptionLabelExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDescriptionLabel()
        {
            #region Variable Declarations
            HtmlLabel uIDescriptionLabel = this.UIGreenLightCustomEntiWindow1.UIGreenLightCustomEntiDocument.UIDescriptionLabel;
            #endregion

            // Verify that the 'DisplayText' property of 'Description' label equals 'Description'
            Assert.AreEqual(this.ValidateDescriptionLabelExpectedValues.UIDescriptionLabelDisplayText, uIDescriptionLabel.DisplayText);
        }
        
        /// <summary>
        /// ValidateDisplayNameLabel - Use 'ValidateDisplayNameLabelExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateDisplayNameLabel()
        {
            #region Variable Declarations
            HtmlLabel uIDisplaynameLabel = this.UIGreenLightCustomEntiWindow1.UIGreenLightCustomEntiDocument.UIDisplaynameLabel;
            #endregion

            // Verify that the 'DisplayText' property of 'Display name*' label equals 'Display name*'
            Assert.AreEqual(this.ValidateDisplayNameLabelExpectedValues.UIDisplaynameLabelDisplayText, uIDisplaynameLabel.DisplayText);
        }
        
        /// <summary>
        /// ValidateGreenLightLabel - Use 'ValidateGreenLightLabelExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateGreenLightLabel()
        {
            #region Variable Declarations
            HtmlLabel uIRelatedtoLabel = this.UIGreenLightCustomEntiWindow1.UIGreenLightCustomEntiDocument.UIRelatedtoLabel;
            #endregion

            // Verify that the 'DisplayText' property of 'Related to*' label equals 'Related to*'
            Assert.AreEqual(this.ValidateGreenLightLabelExpectedValues.UIRelatedtoLabelDisplayText, uIRelatedtoLabel.DisplayText);
        }
        
        /// <summary>
        /// ValidateOneToNMessageModal - Use 'ValidateOneToNMessageModalExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateOneToNMessageModal()
        {
            #region Variable Declarations
            HtmlDiv uIMessageFromExpensesModal = this.UIGreenLightCustomEntiWindow.UIGreenLightCustomEntiDocument.UIMessageFromExpensesModal;
            #endregion

            // Verify that the 'InnerText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
            //
            //
            //Please enter a Display name for this attribute.
            //Please select a GreenLight from the list.
            //Please select a View to be used.'
            Assert.AreEqual(this.ValidateOneToNMessageModalExpectedValues.UIMessageFromExpensesModalInnerText, uIMessageFromExpensesModal.InnerText);
        }
        
        /// <summary>
        /// ValidateOneToNModalTitle - Use 'ValidateOneToNModalTitleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateOneToNModalTitle()
        {
            #region Variable Declarations
            HtmlDiv uIDivOneToManyRelationPane = this.UIGreenLightOLDSubRepoWindow.UIGreenLightredDocument.UIDivOneToManyRelationPane;
            #endregion

            // Verify that the 'InnerText' property of 'divOneToManyRelationshipHeading' pane equals ''
            Assert.AreEqual(this.ValidateOneToNModalTitleExpectedValues.UIDivOneToManyRelationPaneInnerText, uIDivOneToManyRelationPane.InnerText);
        }
        
        /// <summary>
        /// ValidateViewLabel - Use 'ValidateViewLabelExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateViewLabel()
        {
            #region Variable Declarations
            HtmlLabel uIViewLabel = this.UIGreenLightCustomEntiWindow1.UIGreenLightCustomEntiDocument.UIViewLabel;
            #endregion

            // Verify that the 'DisplayText' property of 'View*' label equals 'View*'
            Assert.AreEqual(this.ValidateViewLabelExpectedValues.UIViewLabelDisplayText, uIViewLabel.DisplayText);
        }
        
        #region Properties
        public virtual ValidateDescriptionLabelExpectedValues ValidateDescriptionLabelExpectedValues
        {
            get
            {
                if ((this.mValidateDescriptionLabelExpectedValues == null))
                {
                    this.mValidateDescriptionLabelExpectedValues = new ValidateDescriptionLabelExpectedValues();
                }
                return this.mValidateDescriptionLabelExpectedValues;
            }
        }
        
        public virtual ValidateDisplayNameLabelExpectedValues ValidateDisplayNameLabelExpectedValues
        {
            get
            {
                if ((this.mValidateDisplayNameLabelExpectedValues == null))
                {
                    this.mValidateDisplayNameLabelExpectedValues = new ValidateDisplayNameLabelExpectedValues();
                }
                return this.mValidateDisplayNameLabelExpectedValues;
            }
        }
        
        public virtual ValidateGreenLightLabelExpectedValues ValidateGreenLightLabelExpectedValues
        {
            get
            {
                if ((this.mValidateGreenLightLabelExpectedValues == null))
                {
                    this.mValidateGreenLightLabelExpectedValues = new ValidateGreenLightLabelExpectedValues();
                }
                return this.mValidateGreenLightLabelExpectedValues;
            }
        }
        
        public virtual ValidateOneToNMessageModalExpectedValues ValidateOneToNMessageModalExpectedValues
        {
            get
            {
                if ((this.mValidateOneToNMessageModalExpectedValues == null))
                {
                    this.mValidateOneToNMessageModalExpectedValues = new ValidateOneToNMessageModalExpectedValues();
                }
                return this.mValidateOneToNMessageModalExpectedValues;
            }
        }
        
        public virtual ValidateOneToNModalTitleExpectedValues ValidateOneToNModalTitleExpectedValues
        {
            get
            {
                if ((this.mValidateOneToNModalTitleExpectedValues == null))
                {
                    this.mValidateOneToNModalTitleExpectedValues = new ValidateOneToNModalTitleExpectedValues();
                }
                return this.mValidateOneToNModalTitleExpectedValues;
            }
        }
        
        public virtual ValidateViewLabelExpectedValues ValidateViewLabelExpectedValues
        {
            get
            {
                if ((this.mValidateViewLabelExpectedValues == null))
                {
                    this.mValidateViewLabelExpectedValues = new ValidateViewLabelExpectedValues();
                }
                return this.mValidateViewLabelExpectedValues;
            }
        }
        
        public UIGreenLightCustomEntiWindow UIGreenLightCustomEntiWindow
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiWindow == null))
                {
                    this.mUIGreenLightCustomEntiWindow = new UIGreenLightCustomEntiWindow();
                }
                return this.mUIGreenLightCustomEntiWindow;
            }
        }
        
        public UINewGreenLightWindowsWindow UINewGreenLightWindowsWindow
        {
            get
            {
                if ((this.mUINewGreenLightWindowsWindow == null))
                {
                    this.mUINewGreenLightWindowsWindow = new UINewGreenLightWindowsWindow();
                }
                return this.mUINewGreenLightWindowsWindow;
            }
        }
        
        public UIGreenLight34WindowsIWindow UIGreenLight34WindowsIWindow
        {
            get
            {
                if ((this.mUIGreenLight34WindowsIWindow == null))
                {
                    this.mUIGreenLight34WindowsIWindow = new UIGreenLight34WindowsIWindow();
                }
                return this.mUIGreenLight34WindowsIWindow;
            }
        }
        
        public UIGreenLightCustomEntiWindow1 UIGreenLightCustomEntiWindow1
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiWindow1 == null))
                {
                    this.mUIGreenLightCustomEntiWindow1 = new UIGreenLightCustomEntiWindow1();
                }
                return this.mUIGreenLightCustomEntiWindow1;
            }
        }
        
        public UIGreenLightOLDSubRepoWindow UIGreenLightOLDSubRepoWindow
        {
            get
            {
                if ((this.mUIGreenLightOLDSubRepoWindow == null))
                {
                    this.mUIGreenLightOLDSubRepoWindow = new UIGreenLightOLDSubRepoWindow();
                }
                return this.mUIGreenLightOLDSubRepoWindow;
            }
        }
        #endregion
        
        #region Fields
        private ValidateDescriptionLabelExpectedValues mValidateDescriptionLabelExpectedValues;
        
        private ValidateDisplayNameLabelExpectedValues mValidateDisplayNameLabelExpectedValues;
        
        private ValidateGreenLightLabelExpectedValues mValidateGreenLightLabelExpectedValues;
        
        private ValidateOneToNMessageModalExpectedValues mValidateOneToNMessageModalExpectedValues;
        
        private ValidateOneToNModalTitleExpectedValues mValidateOneToNModalTitleExpectedValues;
        
        private ValidateViewLabelExpectedValues mValidateViewLabelExpectedValues;
        
        private UIGreenLightCustomEntiWindow mUIGreenLightCustomEntiWindow;
        
        private UINewGreenLightWindowsWindow mUINewGreenLightWindowsWindow;
        
        private UIGreenLight34WindowsIWindow mUIGreenLight34WindowsIWindow;
        
        private UIGreenLightCustomEntiWindow1 mUIGreenLightCustomEntiWindow1;
        
        private UIGreenLightOLDSubRepoWindow mUIGreenLightOLDSubRepoWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDescriptionLabel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateDescriptionLabelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Description' label equals 'Description'
        /// </summary>
        public string UIDescriptionLabelDisplayText = "Description";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateDisplayNameLabel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateDisplayNameLabelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Display name*' label equals 'Display name*'
        /// </summary>
        public string UIDisplaynameLabelDisplayText = "Display name*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateGreenLightLabel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateGreenLightLabelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Related to*' label equals 'Related to*'
        /// </summary>
        public string UIRelatedtoLabelDisplayText = "Related to*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateOneToNMessageModal'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateOneToNMessageModalExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'ctl00_pnlMasterPopup' pane equals 'Message from Expenses
        ///
        ///
        ///Please enter a Display name for this attribute.
        ///Please select a GreenLight from the list.
        ///Please select a View to be used.'
        /// </summary>
        public string UIMessageFromExpensesModalInnerText = "Message from Expenses\r\n\r\n\r\nPlease enter a Display name for this attribute.\r\nPleas" +
            "e select a GreenLight from the list.\r\nPlease select a View to be used.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateOneToNModalTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateOneToNModalTitleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'divOneToManyRelationshipHeading' pane equals ''
        /// </summary>
        public string UIDivOneToManyRelationPaneInnerText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateViewLabel'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class ValidateViewLabelExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'View*' label equals 'View*'
        /// </summary>
        public string UIViewLabelDisplayText = "View*";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightCustomEntiWindow : BrowserWindow
    {
        
        public UIGreenLightCustomEntiWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "GreenLight", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGreenLightCustomEntiDocument UIGreenLightCustomEntiDocument
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiDocument == null))
                {
                    this.mUIGreenLightCustomEntiDocument = new UIGreenLightCustomEntiDocument(this);
                }
                return this.mUIGreenLightCustomEntiDocument;
            }
        }
        
        public UIGreenLightCustomEntiDocument1 UIGreenLightCustomEntiDocument1
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiDocument1 == null))
                {
                    this.mUIGreenLightCustomEntiDocument1 = new UIGreenLightCustomEntiDocument1(this);
                }
                return this.mUIGreenLightCustomEntiDocument1;
            }
        }
        
        public UIGreenLightCustomEntiDocument2 UIGreenLightCustomEntiDocument2
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiDocument2 == null))
                {
                    this.mUIGreenLightCustomEntiDocument2 = new UIGreenLightCustomEntiDocument2(this);
                }
                return this.mUIGreenLightCustomEntiDocument2;
            }
        }
        #endregion
        
        #region Fields
        private UIGreenLightCustomEntiDocument mUIGreenLightCustomEntiDocument;
        
        private UIGreenLightCustomEntiDocument1 mUIGreenLightCustomEntiDocument1;
        
        private UIGreenLightCustomEntiDocument2 mUIGreenLightCustomEntiDocument2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightCustomEntiDocument : HtmlDocument
    {
        
        public UIGreenLightCustomEntiDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnSaveOnetonrelationship";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnSaveOnetonrelationship";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "save";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonInner";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "style=\"BACKGROUND-POSITION: left top\" id";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "57";
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        
        public HtmlImage UIOKImage
        {
            get
            {
                if ((this.mUIOKImage == null))
                {
                    this.mUIOKImage = new HtmlImage(this);
                    #region Search Criteria
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Id] = "btnMasterPopup";
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Name] = null;
                    this.mUIOKImage.SearchProperties[HtmlImage.PropertyNames.Alt] = "OK";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.AbsolutePath] = "/shared/images/buttons/btn_close.png";
                    this.mUIOKImage.FilterProperties.Add(new PropertyExpression(HtmlImage.PropertyNames.Src, "sel-expenses.com/shared/images/buttons/btn_close.png", PropertyExpressionOperator.Contains));
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.Class] = null;
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.ControlDefinition] = "style=\"CURSOR: pointer\" id=btnMasterPopu";
                    this.mUIOKImage.FilterProperties[HtmlImage.PropertyNames.TagInstance] = "112";
                    #endregion
                }
                return this.mUIOKImage;
            }
        }
        
        public HtmlInputButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[HtmlButton.PropertyNames.Id] = "ctl00_contentmain_btnCancelOnetonrelationship";
                    this.mUICancelButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$contentmain$btnCancelOnetonrelationship";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "cancel";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.Type] = "button";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonInner";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_btnCancelRelationsh";
                    this.mUICancelButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "58";
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        
        public HtmlDiv UIMessageFromExpensesModal
        {
            get
            {
                if ((this.mUIMessageFromExpensesModal == null))
                {
                    this.mUIMessageFromExpensesModal = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIMessageFromExpensesModal.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_pnlMasterPopup";
                    this.mUIMessageFromExpensesModal.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMessageFromExpensesModal.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Message from Expenses\r\n\r\n\r\nPlease enter ";
                    this.mUIMessageFromExpensesModal.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMessageFromExpensesModal.FilterProperties[HtmlDiv.PropertyNames.Class] = "errorModal";
                    this.mUIMessageFromExpensesModal.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 11004; POSITION: fixed; ";
                    this.mUIMessageFromExpensesModal.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "223";
                    #endregion
                }
                return this.mUIMessageFromExpensesModal;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUISaveButton;
        
        private HtmlImage mUIOKImage;
        
        private HtmlInputButton mUICancelButton;
        
        private HtmlDiv mUIMessageFromExpensesModal;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightCustomEntiDocument1 : HtmlDocument
    {
        
        public UIGreenLightCustomEntiDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlTable UITbl_gridAttributesTable
        {
            get
            {
                if ((this.mUITbl_gridAttributesTable == null))
                {
                    this.mUITbl_gridAttributesTable = new HtmlTable(this);
                    #region Search Criteria
                    this.mUITbl_gridAttributesTable.SearchProperties[HtmlTable.PropertyNames.Id] = "tbl_gridAttributes";
                    this.mUITbl_gridAttributesTable.SearchProperties[HtmlTable.PropertyNames.Name] = null;
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Display NameDescriptionType Used for Aud";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "id=tbl_gridAttributes class=datatbl";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.RowCount] = "21";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "6";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.Class] = "datatbl";
                    this.mUITbl_gridAttributesTable.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
                    #endregion
                }
                return this.mUITbl_gridAttributesTable;
            }
        }
        #endregion
        
        #region Fields
        private HtmlTable mUITbl_gridAttributesTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightCustomEntiDocument2 : HtmlDocument
    {
        
        public UIGreenLightCustomEntiDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "/shared/admin/aecustomentity.aspx?entityid=", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UICtl00_contentmain_pnPane
        {
            get
            {
                if ((this.mUICtl00_contentmain_pnPane == null))
                {
                    this.mUICtl00_contentmain_pnPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_contentmain_pnPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_pnlrelationship";
                    this.mUICtl00_contentmain_pnPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New Attribute\r\nDisplay name***Descriptio";
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "modalpanel formpanel";
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"Z-INDEX: 10004; POSITION: fixed; ";
                    this.mUICtl00_contentmain_pnPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "59";
                    #endregion
                }
                return this.mUICtl00_contentmain_pnPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUICtl00_contentmain_pnPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UINewGreenLightWindowsWindow : BrowserWindow
    {
        
        public UINewGreenLightWindowsWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UINewGreenLightDocument UINewGreenLightDocument
        {
            get
            {
                if ((this.mUINewGreenLightDocument == null))
                {
                    this.mUINewGreenLightDocument = new UINewGreenLightDocument(this);
                }
                return this.mUINewGreenLightDocument;
            }
        }
        #endregion
        
        #region Fields
        private UINewGreenLightDocument mUINewGreenLightDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UINewGreenLightDocument : HtmlDocument
    {
        
        public UINewGreenLightDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.WindowTitles.Add("New GreenLight");
            #endregion
        }
        
        #region Properties
        public UIPgOptAttributesPane UIPgOptAttributesPane
        {
            get
            {
                if ((this.mUIPgOptAttributesPane == null))
                {
                    this.mUIPgOptAttributesPane = new UIPgOptAttributesPane(this);
                }
                return this.mUIPgOptAttributesPane;
            }
        }
        
        public HtmlSpan UIDisplayNameAsterisk
        {
            get
            {
                if ((this.mUIDisplayNameAsterisk == null))
                {
                    this.mUIDisplayNameAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIDisplayNameAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_reqOnetonrelationshipname";
                    this.mUIDisplayNameAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIDisplayNameAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "149";
                    #endregion
                }
                return this.mUIDisplayNameAsterisk;
            }
        }
        
        public HtmlSpan UIGreenLightAsterisk
        {
            get
            {
                if ((this.mUIGreenLightAsterisk == null))
                {
                    this.mUIGreenLightAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIGreenLightAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_cmpOnetonrelationshipentity";
                    this.mUIGreenLightAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIGreenLightAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIGreenLightAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIGreenLightAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIGreenLightAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"VISIBILITY: visible; COLOR: red\" ";
                    this.mUIGreenLightAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "159";
                    #endregion
                }
                return this.mUIGreenLightAsterisk;
            }
        }
        
        public HtmlSpan UIViewAsterisk
        {
            get
            {
                if ((this.mUIViewAsterisk == null))
                {
                    this.mUIViewAsterisk = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIViewAsterisk.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_contentmain_cmpOnetonrelationshipview";
                    this.mUIViewAsterisk.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIViewAsterisk.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "*";
                    this.mUIViewAsterisk.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIViewAsterisk.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIViewAsterisk.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "style=\"DISPLAY: inline; COLOR: red\" id=c";
                    this.mUIViewAsterisk.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "166";
                    #endregion
                }
                return this.mUIViewAsterisk;
            }
        }
        #endregion
        
        #region Fields
        private UIPgOptAttributesPane mUIPgOptAttributesPane;
        
        private HtmlSpan mUIDisplayNameAsterisk;
        
        private HtmlSpan mUIGreenLightAsterisk;
        
        private HtmlSpan mUIViewAsterisk;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIPgOptAttributesPane : HtmlDiv
    {
        
        public UIPgOptAttributesPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "pgOptAttributes";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New Attribute New n:1 Relationship New 1";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=pgOptAttributes class";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
            this.WindowTitles.Add("New GreenLight");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UINew1nRelationshipHyperlink
        {
            get
            {
                if ((this.mUINew1nRelationshipHyperlink == null))
                {
                    this.mUINew1nRelationshipHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUINew1nRelationshipHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUINew1nRelationshipHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUINew1nRelationshipHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUINew1nRelationshipHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "New 1:n Relationship";
                    this.mUINew1nRelationshipHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "attributeid%20=%200;document.getElementById(cmbrelationshipentityid).disabled%20=" +
                        "%20false;clearRelationshipForm();showRelationshipModal(2);";
                    this.mUINew1nRelationshipHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUINew1nRelationshipHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "javascript:attributeid = 0;document.getElementById(cmbrelationshipentityid).disab" +
                        "led = false;clearRelationshipForm();showRelationshipModal(2);";
                    this.mUINew1nRelationshipHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "submenuitem";
                    this.mUINew1nRelationshipHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=submenuitem tabIndex=0 href=\"javas";
                    this.mUINew1nRelationshipHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    #endregion
                }
                return this.mUINew1nRelationshipHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUINew1nRelationshipHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLight34WindowsIWindow : BrowserWindow
    {
        
        public UIGreenLight34WindowsIWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "GreenLight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGreenLight34Document UIGreenLight34Document
        {
            get
            {
                if ((this.mUIGreenLight34Document == null))
                {
                    this.mUIGreenLight34Document = new UIGreenLight34Document(this);
                }
                return this.mUIGreenLight34Document;
            }
        }
        #endregion
        
        #region Fields
        private UIGreenLight34Document mUIGreenLight34Document;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLight34Document : HtmlDocument
    {
        
        public UIGreenLight34Document(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=139854";
            #endregion
        }
        
        #region Properties
        public HtmlDiv UINew1nRelationshipAttPane
        {
            get
            {
                if ((this.mUINew1nRelationshipAttPane == null))
                {
                    this.mUINew1nRelationshipAttPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUINew1nRelationshipAttPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divRelationshipHeading";
                    this.mUINew1nRelationshipAttPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUINew1nRelationshipAttPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "New 1:n Relationship Attribute";
                    this.mUINew1nRelationshipAttPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUINew1nRelationshipAttPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "sectiontitle";
                    this.mUINew1nRelationshipAttPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divRelationshipHeading class=sectiont";
                    this.mUINew1nRelationshipAttPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "85";
                    #endregion
                }
                return this.mUINew1nRelationshipAttPane;
            }
        }
        
        public HtmlLabel UIDisplaynameLabel
        {
            get
            {
                if ((this.mUIDisplaynameLabel == null))
                {
                    this.mUIDisplaynameLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipdisplayname";
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtOnetonrelationshipname";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Display name*";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "ctl00_contentmain_tabConRelFields_tabRelDefinition_lblrelationshipdisplayname";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "28";
                    #endregion
                }
                return this.mUIDisplaynameLabel;
            }
        }
        
        public HtmlLabel UIGreenLightLabel
        {
            get
            {
                if ((this.mUIGreenLightLabel == null))
                {
                    this.mUIGreenLightLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIGreenLightLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipentity";
                    this.mUIGreenLightLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIGreenLightLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbOnetonrelationshipentity";
                    this.mUIGreenLightLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "GreenLight*";
                    this.mUIGreenLightLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIGreenLightLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_lblrelationshipenti";
                    this.mUIGreenLightLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "30";
                    #endregion
                }
                return this.mUIGreenLightLabel;
            }
        }
        
        public HtmlLabel UIDescriptionLabel
        {
            get
            {
                if ((this.mUIDescriptionLabel == null))
                {
                    this.mUIDescriptionLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipdescription";
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtOnetonrelationshipdescription";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Description";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "ctl00_contentmain_tabConRelFields_tabRelDefinition_lblrelationshipdescription";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "31";
                    #endregion
                }
                return this.mUIDescriptionLabel;
            }
        }
        
        public HtmlLabel UIViewLabel
        {
            get
            {
                if ((this.mUIViewLabel == null))
                {
                    this.mUIViewLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIViewLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipview";
                    this.mUIViewLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIViewLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbOnetonrelationshipview";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "View*";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "ctl00_contentmain_tabConRelFields_tabRelDefinition_lblrelationshipview";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "33";
                    #endregion
                }
                return this.mUIViewLabel;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUINew1nRelationshipAttPane;
        
        private HtmlLabel mUIDisplaynameLabel;
        
        private HtmlLabel mUIGreenLightLabel;
        
        private HtmlLabel mUIDescriptionLabel;
        
        private HtmlLabel mUIViewLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightCustomEntiWindow1 : BrowserWindow
    {
        
        public UIGreenLightCustomEntiWindow1()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "GreenLight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGreenLightCustomEntiDocument3 UIGreenLightCustomEntiDocument
        {
            get
            {
                if ((this.mUIGreenLightCustomEntiDocument == null))
                {
                    this.mUIGreenLightCustomEntiDocument = new UIGreenLightCustomEntiDocument3(this);
                }
                return this.mUIGreenLightCustomEntiDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGreenLightCustomEntiDocument3 mUIGreenLightCustomEntiDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightCustomEntiDocument3 : HtmlDocument
    {
        
        public UIGreenLightCustomEntiDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "sel-expenses.com/shared/admin/aecustomentity.aspx?entityid=1171", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlLabel UIDisplaynameLabel
        {
            get
            {
                if ((this.mUIDisplaynameLabel == null))
                {
                    this.mUIDisplaynameLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipdisplayname";
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDisplaynameLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtOnetonrelationshipname";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Display name*";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_tabConRelFields_tab";
                    this.mUIDisplaynameLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "28";
                    this.mUIDisplaynameLabel.WindowTitles.Add("GreenLight: Custom Entity 4985c6a6-528c-427e-9617-0a78ce6eff8f");
                    #endregion
                }
                return this.mUIDisplaynameLabel;
            }
        }
        
        public HtmlLabel UIRelatedtoLabel
        {
            get
            {
                if ((this.mUIRelatedtoLabel == null))
                {
                    this.mUIRelatedtoLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIRelatedtoLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipentity";
                    this.mUIRelatedtoLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIRelatedtoLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbOnetonrelationshipentity";
                    this.mUIRelatedtoLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Related to*";
                    this.mUIRelatedtoLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIRelatedtoLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_tabConRelFields_tab";
                    this.mUIRelatedtoLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "30";
                    this.mUIRelatedtoLabel.WindowTitles.Add("GreenLight: Custom Entity 4985c6a6-528c-427e-9617-0a78ce6eff8f");
                    #endregion
                }
                return this.mUIRelatedtoLabel;
            }
        }
        
        public HtmlLabel UIDescriptionLabel
        {
            get
            {
                if ((this.mUIDescriptionLabel == null))
                {
                    this.mUIDescriptionLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipdescription";
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIDescriptionLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_txtOnetonrelationshipdescription";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "Description";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = null;
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_tabConRelFields_tab";
                    this.mUIDescriptionLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "31";
                    this.mUIDescriptionLabel.WindowTitles.Add("GreenLight: Custom Entity 4985c6a6-528c-427e-9617-0a78ce6eff8f");
                    #endregion
                }
                return this.mUIDescriptionLabel;
            }
        }
        
        public HtmlLabel UIViewLabel
        {
            get
            {
                if ((this.mUIViewLabel == null))
                {
                    this.mUIViewLabel = new HtmlLabel(this);
                    #region Search Criteria
                    this.mUIViewLabel.SearchProperties[HtmlLabel.PropertyNames.Id] = "ctl00_contentmain_lblOnetonrelationshipview";
                    this.mUIViewLabel.SearchProperties[HtmlLabel.PropertyNames.Name] = null;
                    this.mUIViewLabel.SearchProperties[HtmlLabel.PropertyNames.LabelFor] = "ctl00_contentmain_cmbOnetonrelationshipview";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.InnerText] = "View*";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.Class] = "mandatory";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "id=ctl00_contentmain_tabConRelFields_tab";
                    this.mUIViewLabel.FilterProperties[HtmlLabel.PropertyNames.TagInstance] = "33";
                    this.mUIViewLabel.WindowTitles.Add("GreenLight: Custom Entity 4985c6a6-528c-427e-9617-0a78ce6eff8f");
                    #endregion
                }
                return this.mUIViewLabel;
            }
        }
        #endregion
        
        #region Fields
        private HtmlLabel mUIDisplaynameLabel;
        
        private HtmlLabel mUIRelatedtoLabel;
        
        private HtmlLabel mUIDescriptionLabel;
        
        private HtmlLabel mUIViewLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightOLDSubRepoWindow : BrowserWindow
    {
        
        public UIGreenLightOLDSubRepoWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "GreenLight:", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGreenLightredDocument UIGreenLightredDocument
        {
            get
            {
                if ((this.mUIGreenLightredDocument == null))
                {
                    this.mUIGreenLightredDocument = new UIGreenLightredDocument(this);
                }
                return this.mUIGreenLightredDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGreenLightredDocument mUIGreenLightredDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.51106.1")]
    public class UIGreenLightredDocument : HtmlDocument
    {
        
        public UIGreenLightredDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "ctl00_body";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "GreenLight:", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/shared/admin/aecustomentity.aspx";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, "sel-expenses.com/shared/admin/aecustomentity.aspx", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIDivOneToManyRelationPane
        {
            get
            {
                if ((this.mUIDivOneToManyRelationPane == null))
                {
                    this.mUIDivOneToManyRelationPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIDivOneToManyRelationPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "divOneToManyRelationshipHeading";
                    this.mUIDivOneToManyRelationPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIDivOneToManyRelationPane.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.InnerText, "1:n Relationship Attribute", PropertyExpressionOperator.Contains));
                    this.mUIDivOneToManyRelationPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIDivOneToManyRelationPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "sectiontitle";
                    this.mUIDivOneToManyRelationPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=divOneToManyRelationshipHeading class";
                    this.mUIDivOneToManyRelationPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "114";
                    #endregion
                }
                return this.mUIDivOneToManyRelationPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIDivOneToManyRelationPane;
        #endregion
    }
}
