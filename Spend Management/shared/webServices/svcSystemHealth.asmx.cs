using System;
using System.Configuration;
using System.Data;
using SpendManagementLibrary;

namespace Spend_Management.shared.webServices
{
    using System.Diagnostics;

    using SpendManagementLibrary.Definitions;
    using System.Collections.Generic;
    using System.Web.Services;

    using SpendManagementLibrary.Helpers;

    /// <summary>
    /// Reports related spend management service
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    [System.Web.Script.Services.ScriptService]
    public class svcSystemHealth : WebService
    {
        #region Reports
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [WebMethod(EnableSession = true)]
        public List<ReportRequestInformation> GetRunningReportsInformation()
        {
            return cMisc.GetCurrentUser().Employee.AdminOverride ? cReports.GetReportRequestInformation() : new List<ReportRequestInformation>();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [WebMethod(EnableSession = true)]
        public List<ReportThreadInformation> GetRunningThreadsInformation()
        {
            return cMisc.GetCurrentUser().Employee.AdminOverride ? cReports.GetReportThreadInformation() : new List<ReportThreadInformation>();
        }
        #endregion Reports

        #region EventLogs
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        [WebMethod(EnableSession = true)]
        public List<EventLogEntry> GetEventLogEntries(LogReader.LogType logType = LogReader.LogType.Application, int numberOfEvents = 10, string machineName = ".")
        {
            if (cMisc.GetCurrentUser().Employee.AdminOverride)
            {
                var logReader = new LogReader { MachineName = machineName, Log = logType, NumberOfRecords = numberOfEvents};
                List<EventLogEntry> eventLogEntries = logReader.GetEvents();
                return eventLogEntries ?? new List<EventLogEntry>();
            }
            else
            {
                return new List<EventLogEntry>();
            }
        }
        #endregion EventLogs

        #region FinancialExports


        [WebMethod(EnableSession = true)]
        public List<string> TestFinancialExports(int accountId)
        {
            return cFinancialExports.TestFinancialExports(accountId);
        }

        [WebMethod(EnableSession = true)]
        public List<string> GetAccountsWithFinancialExports()
        {
            return cFinancialExports.GetAccountsWithFinancialExports();
        }

        /// <summary>
        /// Get a list of reports to be tested
        /// </summary>
        /// <returns>A list of <see cref="ReportBasic"/>That have no run time criteria or static text</returns>
        [WebMethod(EnableSession = true)]
        public List<ReportBasic> TestReports()
        {
            var currentUser = cMisc.GetCurrentUser();
            return cReports.GetReportIdWithNoRuntimeItems(currentUser.AccountID);

        }

        
        /// <summary>
        /// Test a specific report
        /// </summary>
        /// <param name="reportId">The <see cref="Guid"/>ID of the report to test</param>
        /// <returns>Either "OK" or and error message</returns>
        [WebMethod(EnableSession = true)]
        public List<string> TestReport(string reportId)
        {
            var report = new Guid(reportId);
            return this.RunReport(report);

        }


        /// <summary>
        /// Test a specific report by contacting the reports engine.
        /// </summary>
        /// <param name="reportId">The report ID to run</param>
        /// <returns>The resule.  Either OK or the error message generated by the Reports engine.</returns>
        private List<string> RunReport(Guid reportId)
        {
            var result = new List<string>();
            var reportsPath = ConfigurationManager.AppSettings["ReportsServicePath"] + "/reports.rem";
            var reports = (IReports) Activator.GetObject(typeof(IReports), reportsPath);
            var currentUser = cMisc.GetCurrentUser();
            try
            {
                cReport report = reports.getReportById(currentUser.AccountID, reportId);
                report.SubAccountID = currentUser.CurrentSubAccountId;
                var reportRequest = new cReportRequest(
                    currentUser.AccountID,
                    currentUser.CurrentSubAccountId,
                    1,
                    report,
                    ExportType.Viewer,
                    null,
                    false,
                    currentUser.EmployeeID,
                    AccessRoleLevel.AllData);
                using (DataSet dataSet = reports.createSynchronousReport(reportRequest))
                {
                }

                result.Add("OK");
            }
            catch (Exception ex)
            {
                result.Add(
                    $"Error found: {ex.Message}");
            }

            return result;
        }

        #endregion
    }
}
