using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Web;
using SpendManagementLibrary;
using SpendManagementLibrary.Addresses;
using SpendManagementLibrary.DocumentMerge;
using SpendManagementLibrary.Helpers;
using SpendManagementLibrary.Interfaces;
using Spend_Management.shared.code;

namespace Spend_Management
{
    using SpendManagementLibrary.Employees;

    /// <summary>
	/// cAttachments class
	/// </summary>
    public class cAttachments
    {
        private int nAccountId;
        private int nEmployeeId;
        private int nSubaccountId;
        private int? nDelegateId;
        private int nEntityID;
        private int nAttributeID;
        private byte[] nBuffer;
        private string nFileID;
        private string nFileName = string.Empty;
        private string nFileType;

		/// <summary>
		/// cAttachments constructor
		/// </summary>
		/// <param name="accountid"></param>
        public cAttachments(int accountid, int employeeid, int subaccountid, int? delegateid)
        {
            nAccountId = accountid;
		    nEmployeeId = employeeid;
		    nSubaccountId = subaccountid;
            if (delegateid.HasValue)
            {
                nDelegateId = delegateid;
            }
        }
        /// <summary>
        ///cAttachments constructor
        /// </summary>
        /// <param name="entityId">
        ///  The Id of the entity
        /// <param name="attributeId">
        /// The Id of the attribute
        /// <param name="buffer">
        /// byte array of data   
        /// <param name="fileID">
        /// the GUID Id of the file 
        /// <param name="fileName">
        /// The name of the file
        /// <param name="fileType">
        /// The extension of the file   
        public cAttachments(int entityId, int attributeId, byte[] buffer, string fileID, string fileName, string fileType)
        {
            this.nEntityID = entityId;
            this.nAttributeID = attributeId;
            this.nBuffer = buffer;
            this.nFileID = fileID;
            this.nFileName = fileName;
            this.nFileType = fileType;
        }

        /// <summary>
        /// cAttachments constructor
        /// </summary>
        /// <param name="accountId">The account id</param>
        public cAttachments(int accountId)
        {
            nAccountId = accountId;
        }

        /// <summary>
        /// Returns the current metabase customer ID
        /// </summary>
        public int accountid
        {
            get { return nAccountId; }
        }

        /// <summary>
        /// saveAttachment: store a binary file attachment into the database
        /// </summary>
        /// <param name="tablename">attachments database table to store into</param>
        /// <param name="idfield">name of the primary id field in the table</param>
        /// <param name="id">parent record ID to associate attachment to</param>
        /// <param name="attachment">Attachment details</param>
        /// <param name="document">Binary array of the document to be stored</param>
        /// <param name="isTorchGenerated">Whether or not the attachment was generated by document merge</param>
        /// <param name="isPublished">Whether or not the attachment is "published" (synonymous with "visible in the mobile app"), only applies if isTorchGenerated is true</param>
        /// <returns></returns>
        public int saveAttachment(string tablename, string idfield, int id, cAttachment attachment, byte[] document)
        {
            int attachmentID = 0;
            DBConnection db = new DBConnection(cAccounts.getConnectionString(accountid));

            db.sqlexecute.Parameters.AddWithValue("@recordID", id);
            db.sqlexecute.Parameters.AddWithValue("@idfieldname", idfield);
            db.sqlexecute.Parameters.AddWithValue("@tablename", tablename);
            db.sqlexecute.Parameters.AddWithValue("@title", attachment.Title);
            db.sqlexecute.Parameters.AddWithValue("@description", attachment.Description);
            db.sqlexecute.Parameters.AddWithValue("@fileName", attachment.FileName);
            db.sqlexecute.Parameters.AddWithValue("@mimeID", attachment.MimeType.MimeID);
            db.sqlexecute.Parameters.AddWithValue("@userID", attachment.CreatedBy);
            db.sqlexecute.Parameters.AddWithValue("@torchGenerated", attachment.TorchGenerated);
            db.sqlexecute.Parameters.AddWithValue("@published", attachment.Published);
            db.sqlexecute.Parameters.AddWithValue("@createdOn", attachment.CreatedOn);

            if (document != null && document.Length > 0)
            {
				db.sqlexecute.Parameters.AddWithValue("@fileData", document);
            }
            else
            {
                return 0;
            }

            db.sqlexecute.Parameters.AddWithValue("@CUemployeeID", nEmployeeId);
            if (nDelegateId.HasValue)
            {
                db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", nDelegateId.Value);
            }
            else
            {
                db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", DBNull.Value);
            }

            db.sqlexecute.Parameters.Add("@identity", System.Data.SqlDbType.Int);
            db.sqlexecute.Parameters["@identity"].Direction = System.Data.ParameterDirection.ReturnValue;
            db.ExecuteProc("saveAttachment");
            attachmentID = (int)db.sqlexecute.Parameters["@identity"].Value;
            db.sqlexecute.Parameters.Clear();

            return attachmentID;
        }

		/// <summary>
		/// deleteAttachment: delete an attachment from the database
		/// </summary>
		/// <param name="tableName">Database table name to delete the attachment from</param>
		/// <param name="attachmentId">Database ID of the attachment to be deleted</param>
        /// <param name="id">ElementID</param>
        /// <param name="attachDocType">Type of document being deleted</param>
		public void deleteAttachment(string tableName, int attachmentId, int id, AttachDocumentType attachDocType)
        {
		
            if (id > 0)
            {
                saveElementDocumentAttachment(attachDocType, id, -1);
             
                if (attachDocType == AttachDocumentType.Licence)
                {
                    User.CacheRemove(this.nEmployeeId, this.accountid);
                }

            }

            using (var db = new DatabaseConnection(cAccounts.getConnectionString(this.accountid)))
            {
                db.sqlexecute.Parameters.AddWithValue("@attachmentid", attachmentId);
                db.sqlexecute.Parameters.AddWithValue("@tablename", tableName);
                db.sqlexecute.Parameters.AddWithValue("@CUemployeeID", nEmployeeId);
               
                if (nDelegateId.HasValue)
                {
                    db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", nDelegateId.Value);
                }
                else
                {
                    db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", DBNull.Value);
                }

                db.ExecuteProc("deleteAttachment");
                db.sqlexecute.Parameters.Clear();
            }
            return;
        }

		/// <summary>
		/// getAttachment: Retrieve an attachment from the database
		/// </summary>
		/// <param name="tablename">Database table name to get the attachment from</param>
		/// <param name="attachmentid">Database ID of the attachment to be retrieved</param>
		/// <returns>Attachment in a class structure</returns>
		public cAttachment getAttachment(string tablename, int attachmentid)
		{
			cTables clsTables = new cTables(accountid);
			cTable table = clsTables.GetTableByName(tablename);
			cAttachment retAttachment = null;
			
			retAttachment = getAttachmentFromDb(table, attachmentid);
			
			return retAttachment;
		}

		/// <summary>
		/// getAttachment: Retrieve an attachment from the database
		/// </summary>
		/// <param name="tableid">Database table ID to get the attachment from</param>
		/// <param name="attachmentid">Database ID of the attachment to be retrieved</param>
		/// <param name="currentUser">An instance of ICurrentUser, to pass the current user to auditing</param>
		/// <param name="auditLog">An instance of IAuditLog, to write an audit log entry</param>
		/// <returns>Attachment in a class structure</returns>
		public cAttachment getAttachment(Guid tableid, int attachmentid, ICurrentUser currentUser, IAuditLog auditLog)
		{
            cAttachment retAttachment = null;
			cTables clsTables = new cTables(accountid);
            cTable table = clsTables.GetTableByID(tableid);

			retAttachment = getAttachmentFromDb(table, attachmentid);
            auditLog.ViewRecord(SpendManagementElement.Attachments, $"{retAttachment.FileName} ({table.TableName} , {retAttachment.attachmentID})", currentUser);

            return retAttachment;
		}

        /// <summary>
        /// Gets all attachments linked to an entity
        /// </summary>
        /// <param name="tableName">The name of the table tat stores the attachments</param>
        /// <param name="entityId">The Id of the entity he attachment belongs too</param>
        /// <returns>A list of cAttachment</returns>
        public List<cAttachment> GetAttachments(string tableName, int entityId)
        {
            var attachmentIds = new List<int>();

            using (IDBConnection connection = new DatabaseConnection(cAccounts.getConnectionString(accountid)))
            {
                string sql = string.Format("select attachmentID from {0} where id = @id", tableName);

                connection.AddWithValue("@id", entityId);

                using (var reader = connection.GetReader(sql))
                {
                    int attachmentIdOrdinal = reader.GetOrdinal("attachmentID");

                    while (reader.Read())
                    {
                        attachmentIds.Add(reader.GetInt32(attachmentIdOrdinal));

                    }
                }
            }

            return attachmentIds.Select(id => this.getAttachment("emailTemplate_attachments", id)).ToList();
        }

        /// <summary>
        /// getAttachmentFromDb: retrieve actual attachment record from the database
        /// </summary>
        /// <param name="srcTable">Database table where attachment is stored</param>
        /// <param name="attId">Database ID of the attachment</param>
        /// <returns></returns>
        private cAttachment getAttachmentFromDb(cTable srcTable, int attId)
		{
			//cAttachment retAttachment = null;
			cAttachment tmp = null;
			cMimeTypes mtypes = new cMimeTypes(accountid, nSubaccountId);
			DBConnection db = new DBConnection(cAccounts.getConnectionString(accountid));
             string sql = "select attachmentid, id, title, fileName, description, mimeID, createdOn, createdBy from [" +
                         srcTable.TableName + "] where attachmentid = @attId";
            db.sqlexecute.Parameters.AddWithValue("@attId", attId);

            using (System.Data.SqlClient.SqlDataReader reader = db.GetReader(sql))
            {
                while (reader.Read())
                {
                    int recordIdOrd = reader.GetOrdinal("id");
                    int titleOrd = reader.GetOrdinal("title");
                    int fileNameOrd = reader.GetOrdinal("fileName");
                    int mimeTypeOrd = reader.GetOrdinal("mimeID");
                    int descriptionOrd = reader.GetOrdinal("description");
                    int createdOnOrd = reader.GetOrdinal("createdOn");
                    int createdByOrd = reader.GetOrdinal("createdBy");

                    int recordID = reader.GetInt32(recordIdOrd); 
                    string title = reader.GetString(titleOrd);
                    string filename = reader.GetString(fileNameOrd);
                    int mimeID = reader.GetInt32(mimeTypeOrd);

                    cMimeType mimetype = mtypes.GetMimeTypeByID(mimeID);

                    string desc = "";
                    if (!reader.IsDBNull(descriptionOrd)) 
                    {
                        desc = reader.GetString(descriptionOrd); 
                    }

                    DateTime createdon = reader.GetDateTime(createdOnOrd);
                    int createdby = reader.GetInt32(createdByOrd);

                    tmp = new cAttachment(attId, srcTable.TableID, recordID, title, desc, filename, mimetype, createdon,
                        createdby, null, null, null);
                }

                reader.Close();
            }

            if (tmp != null)
            {
                sql = "select fileData from [" + srcTable.TableName.Replace("attachments", "attachmentData") +
                      "] where attachmentID = @attId";
                db.sqlexecute.Parameters.Clear();
                db.sqlexecute.Parameters.AddWithValue("@attId", attId);

                byte[] attData = db.getImageData(sql);

                tmp.AttachmentData = attData;    
            }
            

        return tmp;
        }

        public void saveElementDocumentAttachment(AttachDocumentType attachDocType, int id, int attachmentId)
        {
            using (var db = new DatabaseConnection(cAccounts.getConnectionString(this.accountid)))
            {

            if (attachmentId > -1)
            {
                db.sqlexecute.Parameters.AddWithValue("@attachmentID", attachmentId);
            }
            else
            {
                db.sqlexecute.Parameters.AddWithValue("@attachmentID", DBNull.Value);
            }

            db.sqlexecute.Parameters.AddWithValue("@id", id);      
            db.sqlexecute.Parameters.AddWithValue("@docType", (byte)attachDocType);
            db.sqlexecute.Parameters.AddWithValue("@CUemployeeID", nEmployeeId);
           
            if (nDelegateId.HasValue)
            {
                db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", nDelegateId.Value);
            }
            else
            {
                db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", DBNull.Value);
            }

            db.ExecuteProc("dbo.saveElementDocAttach");
            db.sqlexecute.Parameters.Clear(); 
           }
        }

        public int getAttachmentIDFromElement(AttachDocumentType docType, int ID)
        {
            DBConnection db = new DBConnection(cAccounts.getConnectionString(accountid));
            db.sqlexecute.Parameters.AddWithValue("@ID", ID);
            string strSQL;
            int attachmentID = 0;
            System.Data.SqlClient.SqlDataReader reader;

            switch (docType)
            {
                case AttachDocumentType.Licence:
                    strSQL = "SELECT licenceAttachID FROM employees WHERE employeeid = @ID";

                    using (reader = db.GetReader(strSQL))
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(reader.GetOrdinal("licenceAttachID")))
                            {
                                attachmentID = reader.GetInt32(reader.GetOrdinal("licenceAttachID"));
                            }
                        }
                        reader.Close();
                    }
                    break;
                case AttachDocumentType.Tax:
                    strSQL = "SELECT taxAttachID FROM cars WHERE carid = @ID";

                    using (reader = db.GetReader(strSQL))
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(reader.GetOrdinal("taxAttachID")))
                            {
                                attachmentID = reader.GetInt32(reader.GetOrdinal("taxAttachID"));
                            }
                        }
                        reader.Close();
                    }
                    break;
                case AttachDocumentType.MOT:
                    strSQL = "SELECT MOTAttachID FROM cars WHERE carid = @ID";

                    using (reader = db.GetReader(strSQL))
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(reader.GetOrdinal("MOTAttachID")))
                            {
                                attachmentID = reader.GetInt32(reader.GetOrdinal("MOTAttachID"));
                            }
                        }
                        reader.Close();
                    }
                    break;
                case AttachDocumentType.Insurance:
                    strSQL = "SELECT insuranceAttachID FROM cars WHERE carid = @ID";

                    using (reader = db.GetReader(strSQL))
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(reader.GetOrdinal("insuranceAttachID")))
                            {
                                attachmentID = reader.GetInt32(reader.GetOrdinal("insuranceAttachID"));
                            }
                        }
                        reader.Close();
                    }
                    break;
                case AttachDocumentType.Service:
                    strSQL = "SELECT serviceAttachID FROM cars WHERE carid = @ID";

                    using (reader = db.GetReader(strSQL))
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(reader.GetOrdinal("serviceAttachID")))
                            {
                                attachmentID = reader.GetInt32(reader.GetOrdinal("serviceAttachID"));
                            }
                        }
                        reader.Close();
                    }
                    break;
                case AttachDocumentType.ExpenseReceipt:
                    strSQL = "SELECT receiptAttachID FROM savedexpenses WHERE carid = @ID";

                    using (reader = db.GetReader(strSQL))
                    {
                        while (reader.Read())
                        {
                            if (!reader.IsDBNull(reader.GetOrdinal("receiptAttachID")))
                            {
                                attachmentID = reader.GetInt32(reader.GetOrdinal("receiptAttachID"));
                            }
                        }
                        reader.Close();
                    }
                    break;
            }
            return attachmentID;
        }

    /// <summary>
    /// Update attachments that have been added during creation of a green light where id = zero and employee id = current employee id
    /// </summary>
    /// <param name="entityid">The Entity id to update</param>
    /// <param name="id">The new id to use to update</param>
    public void UpdateNewAttachmentsWithRealId(int entityid, int id)
        {
            var db = new DBConnection(cAccounts.getConnectionString(this.accountid));
            db.sqlexecute.Parameters.AddWithValue("@id", id);
            db.sqlexecute.Parameters.AddWithValue("@entityid", entityid);
            db.sqlexecute.Parameters.AddWithValue("CUEmployeeID", this.nEmployeeId);
            if (this.nDelegateId.HasValue)
            {
                db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", this.nDelegateId.Value);
            }
            else
            {
                db.sqlexecute.Parameters.AddWithValue("@CUdelegateID", DBNull.Value);
            }
            db.ExecuteProc("dbo.updateAttachmentsWithRealId");
            db.sqlexecute.Parameters.Clear();
        }

    /// <summary>
    /// Removes any custom entity attachments where id = zero and created by = employee id and the created on date/time is before the current time minus one hour.
    /// </summary>
    /// <param name="entityid">
    /// The entity currently in use
    /// </param>
    /// <param name="employeeid">
    /// The employee id of the current user.
    /// </param>
    /// <param name="clearUpTo">
    /// The date to delete records with id = zero.
    /// </param>
    public void RemoveOrphanAttachmentsOnCustomTables(int entityid, int employeeid, DateTime clearUpTo)
    {
        cCustomEntity currentEntity = new cCustomEntities(cMisc.GetCurrentUser()).getEntityById(entityid);
        if (currentEntity.EnableAttachments)
        {
            var db = new DBConnection(cAccounts.getConnectionString(this.accountid));
            var tableName = string.Format("custom_{0}_attachments", entityid);
                var sql =
                    string.Format(
                        "SELECT attachmentid FROM {0} where id = 0 and createdby = {1} and createdon < '{2}'", tableName,
                        employeeid, clearUpTo.ToString("yyyy-MM-dd HH:mm:ss"));
            using (var reader = db.GetReader(sql))
            {
                while (reader.Read())
                {
                    if (!reader.IsDBNull(0))
                    {
                        var attachmentId = reader.GetInt32(0);
                        this.deleteAttachment(tableName, attachmentId, 0, AttachDocumentType.None);
                    }
                    }

                }
            }
        }
        /// <summary>
        /// Checks the file extension is not on the restricted file list
        /// </summary>
        /// <param name="extension">
        /// The extension of the file   
       /// <returns>an instance of cMimeType, or null</returns>
        public cMimeType checkMimeType(string extension)
        {
            cGlobalMimeTypes clsMimetypes = new cGlobalMimeTypes(this.accountid);
            cGlobalMimeType globMimeType = clsMimetypes.getMimeTypeByExtension(extension);

            if (globMimeType != null)
            {
                cMimeTypes clsMimeTypes = new cMimeTypes(this.accountid, this.nSubaccountId);
                cMimeType mimeType = clsMimeTypes.GetMimeTypeByGlobalID(globMimeType.GlobalMimeID);

                return mimeType;
            }
            return null;
        }

        /// <summary>
        /// Saves the attachment data to the db
        /// </summary>        
        public int saveAttachmentData()
        {
            if (this.nFileName != string.Empty)
            {
                CurrentUser user = cMisc.GetCurrentUser();
                var clsentities = new cCustomEntities(user);                
               return clsentities.SaveCustomeEntityImageData(this.nEntityID, this.nAttributeID, this.nBuffer,
                    this.nFileID, this.nFileType, nFileName, user.AccountID);    
            }
            return 0;

                }

        /// <summary>
        /// Gets the byte array of file data
        /// </summary>
        /// <param name="fileStream">
        /// The file data from the System.IO
        /// <returns>byte array of the files data</returns>
        public byte[] getFileData(Stream fileStream)
        {
            byte[] bytes = new byte[fileStream.Length];
            int numBytesToRead = (int) fileStream.Length;
            int numBytesRead = 0;

            while (numBytesToRead > 0)
            {
                // Read may return anything from 0 to numBytesToRead.
                int n = fileStream.Read(bytes, numBytesRead, numBytesToRead);
                // The end of the file is reached.
                if (n == 0)
                {
                    break;
            }    
                numBytesRead += n;
                numBytesToRead -= n;
        }
            return bytes;
    }

        /// <summary>
        /// Flips the "Published" BIT field for a custom entity attachment record
        /// </summary>
        /// <param name="table">The custom entity attachment table</param>
        /// <param name="attachmentId">The custom entity record attachment id</param>
        public void ToggleAttachmentPublished(cTable table, int attachmentId)
        {
            using (var db = new DatabaseConnection(cAccounts.getConnectionString(this.accountid)))
            {
                db.sqlexecute.Parameters.AddWithValue("@attachmentid", attachmentId);
                db.sqlexecute.Parameters.AddWithValue("@tablename", table.TableName);
                db.sqlexecute.Parameters.AddWithValue("@UserId", nEmployeeId);

                if (nDelegateId.HasValue)
                {
                    db.sqlexecute.Parameters.AddWithValue("@DelegateId", nDelegateId.Value);
                }
                else
                {
                    db.sqlexecute.Parameters.AddWithValue("@DelegateId", DBNull.Value);
                }

                db.ExecuteProc("toggleAttachmentPublished");
                db.sqlexecute.Parameters.Clear();
            }
        }

        /// <summary>
        /// Gets a list of attachments or Document Merge generated attachments.
        /// </summary>
        /// <param name="user">The user.</param>
        /// <param name="entity">The related custom entity.</param>
        /// <param name="recordId">The related record identifier.</param>
        /// <param name="torchGenerated">Whether to get a list of torch generated attachments or just standard attachments.</param>
        /// <param name="connection">Optional database connection object.</param>
        /// <returns>A list of <see cref="cAttachment"/>.</returns>
        public List<cAttachment> GetPublishedAttachments(ICurrentUserBase user, cCustomEntity entity, int recordId, bool torchGenerated = false, IDBConnection connection = null)
        {
            var list = new List<cAttachment>();

            using (IDBConnection databaseConnection = connection ?? new DatabaseConnection(cAccounts.getConnectionString(user.AccountID)))
            {
                string sql;

                if (torchGenerated)
                {
                    sql = string.Format("SELECT attachmentid, title, filename, description, createdon, createdby FROM dbo.custom_{0}_attachments WHERE Id IN (SELECT c1 FROM @identifiers) AND TorchGenerated = 1 AND Published = 1 ORDER BY createdon DESC;", entity.entityid);

                    var templates = new DocumentTemplate(user.AccountID, user.CurrentSubAccountId, user.EmployeeID);
                    int[] templateAssociationIds = templates.GetDocumentTemplateAssociationIdsByEntityRecord(entity.entityid, recordId);
                    databaseConnection.AddWithValue("@identifiers", templateAssociationIds.ToList());
                }
                else
                {
                    sql = string.Format("SELECT attachmentid, title, filename, description, createdon, createdby FROM dbo.custom_{0}_attachments WHERE Id = @identifier AND TorchGenerated = 0 AND Published = 1 ORDER BY createdon DESC;", entity.entityid);
                    databaseConnection.AddWithValue("@identifier", recordId);
                }

                using (IDataReader reader = databaseConnection.GetReader(sql))
                {
                    int attachmentIdOrdinal = reader.GetOrdinal("attachmentid"),
                        titleOrdinal = reader.GetOrdinal("title"),
                        filenameOrdinal = reader.GetOrdinal("filename"),
                        descriptionOrdinal = reader.GetOrdinal("description"),
                        createdOnOrdinal = reader.GetOrdinal("createdon"),
                        createdByOrdinal = reader.GetOrdinal("createdby");

                    while (reader.Read())
                    {
                        var attachmentId = reader.GetInt32(attachmentIdOrdinal);
                        var title = reader.IsDBNull(titleOrdinal) ? string.Empty : reader.GetString(titleOrdinal);
                        var filename = reader.IsDBNull(filenameOrdinal) ? string.Empty : reader.GetString(filenameOrdinal);
                        var description = reader.IsDBNull(descriptionOrdinal) ? string.Empty : reader.GetString(descriptionOrdinal);
                        var createdOn = reader.IsDBNull(createdOnOrdinal) ? DateTime.MinValue : reader.GetDateTime(createdOnOrdinal);
                        var createdBy = reader.GetInt32(createdByOrdinal);

                        list.Add(new cAttachment(attachmentId, Guid.Empty, 0, title, description, filename, null, createdOn, createdBy, null, null, null, true, true));
                    }

                    databaseConnection.sqlexecute.Parameters.Clear();
                    reader.Close();
                }
            }

            return list;
        } 
    }
}
