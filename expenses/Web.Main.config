<?xml version="1.0" encoding="utf-8"?>

<!-- For more information on using web.config transformation visit https://go.microsoft.com/fwlink/?LinkId=125889 -->

<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
  <connectionStrings>
    <add name="metabase" connectionString="Data Source=$(databaseServer_token);Initial Catalog=MainMetabaseExpenses;User ID=spenduser;Password=$(databasePassword_token);Max Pool Size=10000;" providerName="System.Data.SqlClient" xdt:Transform="SetAttributes" xdt:Locator="Match(name)"/>
    <add name="ApiLog" connectionString="Data Source=$(databaseServer_token);Initial Catalog=MainApiLog;User ID=spenduser;Password=$(databasePassword_token);Max Pool Size=10000;" providerName="System.Data.SqlClient" xdt:Transform="SetAttributes" xdt:Locator="Match(name)"/>
    <add name="globaladdresses" connectionString="Data Source=$(databaseServer_token);Initial Catalog=MainGlobalAddresses;User ID=spenduser;Password=$(databasePassword_token);Max Pool Size=10000;" providerName="System.Data.SqlClient" xdt:Transform="SetAttributes" xdt:Locator="Match(name)"/>
    <add name="redis" connectionString="$(redisServer_token)" xdt:Transform="SetAttributes" xdt:Locator="Match(name)"/>
  </connectionStrings>

  <appSettings>
    <add key="ReportsServicePath" value="tcp://$(servicesServer_token):1976" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="SchedulerServicePath" value="tcp://$(servicesServer_token):1989" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="ESRTransferServicePath" value="http://$(esrLinkServerExternal_token):$(esrTransferServicePort_token)" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="ImplementationSpreadsheetXMLTemplatePath" value="D:\Products\$(releaseVersion_token)\sites\Spend Management\XMLImportMappings\" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="OfflinePort" value="7788"  xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- Specify the Windows Explorer Folder location for our Static Library. This can be a Shared folder, such as \\shared\static content -->

    <add key="StaticLibraryFolderLocation" value="\\$(cachingServer_token)\Shared Folder\StaticContent" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="SupportEmailAddress" value="support@selenity.com" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="dbpassword" value="$(databasePassword_token)" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="ApplicationInstanceName" value="Expenses" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="mobileServiceEndPointAddress" value="http://apitest.sel-expenses/expenses/shared/api/mobile/mobileapi.svc" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />

    <add key="ReportsOutputFilePath" value="\\$(servicesServer_token)\ReportFiles\Reportfiles" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="HostedEntityImageLocation" value="\\$(cachingServer_token)\EntityImages" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="tempDocMergeImageLocation" value="\\$(cachingServer_token)\EntityImages\" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="BundlingEnableOptimisations" xdt:Transform="Remove" xdt:Locator="Match(key)" />

    <add key="NewRelicDetailedLogging" value="true" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="NewRelic.AppName" value="Expenses Main" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="SalesForceApiSandboxMode" value="true" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- this key is only actually needed if you want to use SalesForce API in sandbox mode -->
    <add key="SalesForceApiUsername" value="api@software-europe.com" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- in sandbox mode this value will have .sandbox appended, as the sandbox username is api.software-europe.com.sandbox -->
    <add key="SalesForceApiPassword" value="$(salesForceApiPassword_token)" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="SalesForceKnowledgeArticleProducts" value="Expenses__c, Expenses_Health__c, Greenlight__c, Mobile__c, Corporate_Diligence__c" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="ForceHTTPSRedirect" value="false" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RackSpaceCloudUsername" value="benjamin.hoe" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="RackSpaceCloudApiKey" value="$(rackspaceCloudApiKey_token)" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="DataStoreMode" value="filesystem" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- This should be "cloudfiles" or "filesystem". The filesystem root is used below if not cloud files. -->
    <add key="DataStoreFileSystemModeRootPath" value="\\$(cachingServer_token)\ReceiptsTemp\" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="EnableBrokers" value="false" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="DocMergeRetryStatusMax" value="500" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="DocMergeRetryAttempts" value="3" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="DocMergeRetrySleepTime" value="3000"  xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="DocMergeSkipTableOfContents" value="false" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- if true, the problematic SyncFusion WordDocument.UpdateTableOfContents method will not be used, instead the user will have to use Word to create a TOC. This key and it's usage in code should be removed once SyncFusion have fixed their bug -->
    <add key="DebugMerge" value="false" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="TorchDataDebugLocation" xdt:Transform="Remove" xdt:Locator="Match(key)" />
    <add key="SelPrivateCertificateSCPath" value="\certificates\sel-expenses.com_2012-2017.pfx" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="SelPrivateCertificatePassword" value="EmLK8CCa+l4ho5rpgwcsmA==" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="SelPublicCertificateSCPath" value="\certificates\sel-expenses.com_2012-2017.cer" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="PermittedHtmlTagsPath" value="D:\Products\$(releaseVersion_token)\sites\Spend Management\XMLPermittedHtmlTags\PermittedHtmlTags.xml" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="EnvelopeAttachmentInstructionsUrl" value="/help_text/Content/Claimant Guide/EnvelopeAttachmentInstructions.txt" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <add key="LicenceCheckPortalAccessMode" value="MockTest" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- This should be "Live" or "MockTest" or "Test". Consent url below will be used based on this configuration -->
    <add key="LicenceCheckConsentPortalLiveUrl" value="https://fleet.edavis.co.uk/partners/Econsent" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- This is the consent portal URL for Live environment. This will be used if the LicenceCheckPortalAccessMode is configured as "Live"-->
    <add key="LicenceCheckConsentPortalDemoUrl" value="https://demo.edavis.co.uk/Partners/Econsent" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!-- This is the consent portal URL for Mock or Test environment. This will be used if the LicenceCheckPortalAccessMode is configured as "MockTest"-->
    <add key="LicenceCheckPortalAccessUserName" value="Selenity" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!--Username to access for LicenceCheck api service -->
    <add key="LicenceCheckPortalAccessPassword" value="rOTw/tcK4a9q8IS6aTpLvg==" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
    <!--Encrypted password to access LicenceCheck api service -->
    <add key="PublicApiUrl" value="$(PublicApiUrl_token)" xdt:Transform="SetAttributes" xdt:Locator="Match(key)" />
  </appSettings>

  <system.web>
    <sessionState mode="StateServer" stateConnectionString="tcpip=$(cachingServer_token):42424" cookieless="false" timeout="120" xdt:Transform="Replace" />

    <customErrors mode="RemoteOnly" defaultRedirect="~/publicPages/error.aspx" xdt:Transform="Replace" >
      <error statusCode="404" redirect="~/publicPages/error.aspx?404" />
      <error statusCode="500" redirect="~/publicPages/error.aspx?500" />
    </customErrors>
  </system.web>

  <system.serviceModel xdt:Transform="Replace" >
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="false" logMessagesAtServiceLevel="true" logMessagesAtTransportLevel="false" maxMessagesToLog="3000" maxSizeOfMessageToLog="2000" />
    </diagnostics>
    <services>
      <service name="Spend_Management.MobileAPI">
        <!-- <endpoint address="https://api.sel-expenses.com/shared/api/mobile/mobileapi.svc" behaviorConfiguration="JsonBehavior" binding="webHttpBinding" bindingConfiguration="SecureMobileBinding" name="SecureAPI" contract="Spend_Management.IMobileAPI" /> -->
        <endpoint address="http://api.sel-expenses.com/shared/api/mobile/mobileapi.svc" behaviorConfiguration="JsonBehavior" binding="webHttpBinding" bindingConfiguration="MobileBinding" name="API" contract="Spend_Management.IMobileAPI" />
        <!-- <endpoint address="mex" contract="IMetadataExchange" binding="mexHttpBinding" name="mexHttpBinding" />
        <endpoint address="mex" contract="IMetadataExchange" binding="mexHttpsBinding" name="mexHttpsBinding" /> -->
        <host>
          <baseAddresses>
            <add baseAddress="http://api.sel-expenses.com" />
            <!-- <add baseAddress="https://api.sel-expenses.com" /> -->
          </baseAddresses>
        </host>
      </service>
    </services>
    <bindings>
      <netNamedPipeBinding>
        <binding name="pipeBinding" />
      </netNamedPipeBinding>
      <mexHttpBinding>
        <binding name="mexHttpBinding" />
      </mexHttpBinding>
      <mexHttpsBinding>
        <binding name="mexHttpsBinding" />
      </mexHttpsBinding>
      <webHttpBinding>
        <binding name="MobileBinding" maxReceivedMessageSize="2147483647" maxBufferSize="2147483647">
          <readerQuotas maxStringContentLength="2147483647" maxDepth="2147483647" maxArrayLength="2147483647" maxBytesPerRead="2147483647" maxNameTableCharCount="2147483647" />
          <security mode="None" />
        </binding>
        <binding name="SecureMobileBinding" maxReceivedMessageSize="2147483647" maxBufferSize="2147483647">
          <readerQuotas maxStringContentLength="2147483647" maxDepth="2147483647" maxArrayLength="2147483647" maxBytesPerRead="2147483647" maxNameTableCharCount="2147483647" />
          <security mode="Transport">
            <transport clientCredentialType="None" proxyCredentialType="None">
            </transport>
          </security>
        </binding>
      </webHttpBinding>
      <netTcpBinding>
        <binding name="EsrNhsHubBinding" />
        <binding name="EsrRouterBinding" />
      </netTcpBinding>
      <wsHttpBinding>
        <binding name="WSHttpBinding_IQuickCheck">
          <security mode="Transport">
            <transport clientCredentialType="None" />
          </security>
        </binding>
      </wsHttpBinding>
    </bindings>
    <client>
      <endpoint name="EsrNhsHubEndpoint" address="net.tcp://$(esrLinkServerExternal_token):15002/EsrNhsHubCommands" binding="netTcpBinding" bindingConfiguration="EsrNhsHubBinding" contract="EsrNhsHub.IEsrNhsHubCommands" />
      <endpoint name="EsrRouterToHubEndpoint" address="net.tcp://$(esrLinkServerExternal_token):15001/EsrRouter/ToHub" binding="netTcpBinding" bindingConfiguration="EsrRouterBinding" contract="EsrNhsHub.IEsrNhsHubCommands" />
      <endpoint address="https://secureapi.licencecheck.co.uk/QuickCheck.svc" binding="wsHttpBinding" bindingConfiguration="WSHttpBinding_IQuickCheck" contract="DutyOfCareLicenceCheckApi.IQuickCheck" name="WSHttpBinding_IQuickCheck" />
    </client>
    <behaviors>
      <endpointBehaviors>
        <behavior name="JsonBehavior">
          <enableWebScript />
          <dataContractSerializer maxItemsInObjectGraph="6553600" />
        </behavior>
      </endpointBehaviors>
      <serviceBehaviors>
        <behavior name="JsonBehavior">
          <serviceMetadata httpsGetEnabled="true" httpGetEnabled="true" />
          <serviceDebug httpHelpPageEnabled="true" includeExceptionDetailInFaults="true" httpsHelpPageEnabled="true" />
          <serviceCredentials>
            <serviceCertificate findValue="*.sel-expenses.com" storeLocation="LocalMachine" storeName="My" x509FindType="FindBySubjectName" />
          </serviceCredentials>
        </behavior>
      </serviceBehaviors>

    </behaviors>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true">
      <baseAddressPrefixFilters>
        <add prefix="http://api.sel-expenses.com" />
        <!-- <add prefix="https://api.sel-expenses.com" /> -->
      </baseAddressPrefixFilters>
    </serviceHostingEnvironment>
    <!--<serviceHostingEnvironment multipleSiteBindingsEnabled="true" />-->
  </system.serviceModel>

  <couchbase>
    <servers bucket="expenses" bucketPassword="" xdt:Transform="Replace" >
      <add uri="$(couchbaseServerURI_token)" />
    </servers>
  </couchbase>

  <system.web>
    <compilation xdt:Transform="RemoveAttributes(debug)" />
  </system.web>
</configuration>