using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SpendManagementLibrary
{
	/// <summary>
	/// cAttachment class
	/// </summary>
    public class cAttachment
    {
        private int nAttachmentID;
		private int nOwningRecordID;
		private Guid gTableId;
        private string sTitle;
        private string sDescription;
        private string sFileName;
        private cMimeType clsMimeType;
        private DateTime dtCreatedOn;
        private int nCreatedBy;
        private DateTime? dtModifiedOn;
        private int? nModifiedBy;
		byte[] byteAttachmentData;

		/// <summary>
		/// cAttachment constructor for individual attachment entity
		/// </summary>
		/// <param name="attachmentID">Database ID of the attachment</param>
		/// <param name="tableid">Table ID of the attachment table</param>
		/// <param name="parentRecordID">Owning parent record id</param>
		/// <param name="title">Attachment title</param>
		/// <param name="description">Attachment description</param>
		/// <param name="filename">Attachment filename</param>
		/// <param name="mimetype">Attachment MIME content type entity</param>
		/// <param name="createdon">Attachment original attachment date</param>
		/// <param name="createdby">Attachment originally attached by</param>
		/// <param name="modifiedon">Attachment last modified date</param>
        /// <param name="modifiedby">Attachment last modified by</param>
        /// <param name="attachmentData">Binary data of attachment</param>
        /// <param name="published">Indicates whether or not the attachment is "published", which means "visible in the mobile app"</param>
        /// <param name="torchGenerated">Indicates whether or not the attachment was generated by a Torch document merge</param>
        public cAttachment(int attachmentID, Guid tableid, int parentRecordID, string title, string description, string filename, cMimeType mimetype, DateTime createdon, int createdby, DateTime? modifiedon, int? modifiedby, byte[] attachmentData, bool published = false, bool torchGenerated = false)
        {
            nAttachmentID = attachmentID;
			nOwningRecordID = parentRecordID;
            sTitle = title;
            sDescription = description;
            sFileName = filename;
            clsMimeType = mimetype;
            dtCreatedOn = createdon;
            nCreatedBy = createdby;
            dtModifiedOn = modifiedon;
            nModifiedBy = modifiedby;
			byteAttachmentData = attachmentData;
		    Published = published;
		    TorchGenerated = torchGenerated;
        }

        #region properties
		/// <summary>
		/// attachmentID: Gets the Attachment ID for the entity
		/// </summary>
        public int attachmentID
        {
            get { return nAttachmentID; }
        }
		/// <summary>
		/// TableId: Gets the table ID of the attachment table
		/// </summary>
		public Guid TableId
		{
			get { return gTableId; }
		}
		/// <summary>
		/// OwnerRecordID: Gets the record ID that the attachment is linked to
		/// </summary>
		public int OwnerRecordID
		{
			get { return nOwningRecordID; }
		}
		/// <summary>
		/// Title: Gets the title of the attachment
		/// </summary>
        public string Title
        {
            get { return sTitle; }
        }
		/// <summary>
		/// Description: Gets the description of the attachment
		/// </summary>
        public string Description
        {
            get { return sDescription; }
        }
		/// <summary>
		/// FileName: Gets the filename of the attachment
		/// </summary>
        public string FileName
        {
            get { return sFileName; }
        }
		/// <summary>
		/// MimeType: Gets the cMimeType entity for handling the attachment content type
		/// </summary>
        public cMimeType MimeType
        {
            get { return clsMimeType; }
        }
		/// <summary>
		/// CreatedOn: Gets the date the attachment was uploaded
		/// </summary>
        public DateTime CreatedOn
        {
            get { return dtCreatedOn; }
        }
		/// <summary>
		/// CreatedBy: Gets the Id of user who uploaded the attachment
		/// </summary>
        public int CreatedBy
        {
            get { return nCreatedBy; }
        }
		/// <summary>
		/// ModifiedOn: Gets the date the attachment was last modified
		/// </summary>
        public DateTime? ModifiedOn
        {
            get { return dtModifiedOn; }
        }
		/// <summary>
		/// ModifiedBy: Gets the ID of the user who last modified the attachment
		/// </summary>
        public int? ModifiedBy
        {
            get { return nModifiedBy; }
        }
		/// <summary>
		/// getAttachment: Gets the attachment in the form of a binary array
		/// </summary>
		public byte[] AttachmentData
		{
			get { return byteAttachmentData; }
            set { byteAttachmentData = value; }
		}

        /// <summary>
        /// Gets or sets a value indicating whether or not the attachment is "published", which means "visible in the mobile app"
        /// </summary>
        public bool Published { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether or not the attachment was generated by a Torch document merge
        /// </summary>
        public bool TorchGenerated { get; set; }
        #endregion
    }
}
